(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // node_modules/react/cjs/react.production.min.js
  var require_react_production_min = __commonJS({
    "node_modules/react/cjs/react.production.min.js"(exports) {
      "use strict";
      var l = Symbol.for("react.element");
      var n = Symbol.for("react.portal");
      var p = Symbol.for("react.fragment");
      var q = Symbol.for("react.strict_mode");
      var r = Symbol.for("react.profiler");
      var t = Symbol.for("react.provider");
      var u = Symbol.for("react.context");
      var v = Symbol.for("react.forward_ref");
      var w = Symbol.for("react.suspense");
      var x = Symbol.for("react.memo");
      var y = Symbol.for("react.lazy");
      var z = Symbol.iterator;
      function A(a) {
        if (null === a || "object" !== typeof a) return null;
        a = z && a[z] || a["@@iterator"];
        return "function" === typeof a ? a : null;
      }
      var B = { isMounted: function() {
        return false;
      }, enqueueForceUpdate: function() {
      }, enqueueReplaceState: function() {
      }, enqueueSetState: function() {
      } };
      var C = Object.assign;
      var D = {};
      function E(a, b, e) {
        this.props = a;
        this.context = b;
        this.refs = D;
        this.updater = e || B;
      }
      E.prototype.isReactComponent = {};
      E.prototype.setState = function(a, b) {
        if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, a, b, "setState");
      };
      E.prototype.forceUpdate = function(a) {
        this.updater.enqueueForceUpdate(this, a, "forceUpdate");
      };
      function F() {
      }
      F.prototype = E.prototype;
      function G(a, b, e) {
        this.props = a;
        this.context = b;
        this.refs = D;
        this.updater = e || B;
      }
      var H = G.prototype = new F();
      H.constructor = G;
      C(H, E.prototype);
      H.isPureReactComponent = true;
      var I = Array.isArray;
      var J = Object.prototype.hasOwnProperty;
      var K = { current: null };
      var L = { key: true, ref: true, __self: true, __source: true };
      function M(a, b, e) {
        var d, c = {}, k = null, h = null;
        if (null != b) for (d in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b) J.call(b, d) && !L.hasOwnProperty(d) && (c[d] = b[d]);
        var g = arguments.length - 2;
        if (1 === g) c.children = e;
        else if (1 < g) {
          for (var f = Array(g), m = 0; m < g; m++) f[m] = arguments[m + 2];
          c.children = f;
        }
        if (a && a.defaultProps) for (d in g = a.defaultProps, g) void 0 === c[d] && (c[d] = g[d]);
        return { $$typeof: l, type: a, key: k, ref: h, props: c, _owner: K.current };
      }
      function N(a, b) {
        return { $$typeof: l, type: a.type, key: b, ref: a.ref, props: a.props, _owner: a._owner };
      }
      function O(a) {
        return "object" === typeof a && null !== a && a.$$typeof === l;
      }
      function escape2(a) {
        var b = { "=": "=0", ":": "=2" };
        return "$" + a.replace(/[=:]/g, function(a2) {
          return b[a2];
        });
      }
      var P = /\/+/g;
      function Q(a, b) {
        return "object" === typeof a && null !== a && null != a.key ? escape2("" + a.key) : b.toString(36);
      }
      function R(a, b, e, d, c) {
        var k = typeof a;
        if ("undefined" === k || "boolean" === k) a = null;
        var h = false;
        if (null === a) h = true;
        else switch (k) {
          case "string":
          case "number":
            h = true;
            break;
          case "object":
            switch (a.$$typeof) {
              case l:
              case n:
                h = true;
            }
        }
        if (h) return h = a, c = c(h), a = "" === d ? "." + Q(h, 0) : d, I(c) ? (e = "", null != a && (e = a.replace(P, "$&/") + "/"), R(c, b, e, "", function(a2) {
          return a2;
        })) : null != c && (O(c) && (c = N(c, e + (!c.key || h && h.key === c.key ? "" : ("" + c.key).replace(P, "$&/") + "/") + a)), b.push(c)), 1;
        h = 0;
        d = "" === d ? "." : d + ":";
        if (I(a)) for (var g = 0; g < a.length; g++) {
          k = a[g];
          var f = d + Q(k, g);
          h += R(k, b, e, f, c);
        }
        else if (f = A(a), "function" === typeof f) for (a = f.call(a), g = 0; !(k = a.next()).done; ) k = k.value, f = d + Q(k, g++), h += R(k, b, e, f, c);
        else if ("object" === k) throw b = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b) + "). If you meant to render a collection of children, use an array instead.");
        return h;
      }
      function S(a, b, e) {
        if (null == a) return a;
        var d = [], c = 0;
        R(a, d, "", "", function(a2) {
          return b.call(e, a2, c++);
        });
        return d;
      }
      function T(a) {
        if (-1 === a._status) {
          var b = a._result;
          b = b();
          b.then(function(b2) {
            if (0 === a._status || -1 === a._status) a._status = 1, a._result = b2;
          }, function(b2) {
            if (0 === a._status || -1 === a._status) a._status = 2, a._result = b2;
          });
          -1 === a._status && (a._status = 0, a._result = b);
        }
        if (1 === a._status) return a._result.default;
        throw a._result;
      }
      var U = { current: null };
      var V = { transition: null };
      var W = { ReactCurrentDispatcher: U, ReactCurrentBatchConfig: V, ReactCurrentOwner: K };
      function X() {
        throw Error("act(...) is not supported in production builds of React.");
      }
      exports.Children = { map: S, forEach: function(a, b, e) {
        S(a, function() {
          b.apply(this, arguments);
        }, e);
      }, count: function(a) {
        var b = 0;
        S(a, function() {
          b++;
        });
        return b;
      }, toArray: function(a) {
        return S(a, function(a2) {
          return a2;
        }) || [];
      }, only: function(a) {
        if (!O(a)) throw Error("React.Children.only expected to receive a single React element child.");
        return a;
      } };
      exports.Component = E;
      exports.Fragment = p;
      exports.Profiler = r;
      exports.PureComponent = G;
      exports.StrictMode = q;
      exports.Suspense = w;
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W;
      exports.act = X;
      exports.cloneElement = function(a, b, e) {
        if (null === a || void 0 === a) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
        var d = C({}, a.props), c = a.key, k = a.ref, h = a._owner;
        if (null != b) {
          void 0 !== b.ref && (k = b.ref, h = K.current);
          void 0 !== b.key && (c = "" + b.key);
          if (a.type && a.type.defaultProps) var g = a.type.defaultProps;
          for (f in b) J.call(b, f) && !L.hasOwnProperty(f) && (d[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);
        }
        var f = arguments.length - 2;
        if (1 === f) d.children = e;
        else if (1 < f) {
          g = Array(f);
          for (var m = 0; m < f; m++) g[m] = arguments[m + 2];
          d.children = g;
        }
        return { $$typeof: l, type: a.type, key: c, ref: k, props: d, _owner: h };
      };
      exports.createContext = function(a) {
        a = { $$typeof: u, _currentValue: a, _currentValue2: a, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null };
        a.Provider = { $$typeof: t, _context: a };
        return a.Consumer = a;
      };
      exports.createElement = M;
      exports.createFactory = function(a) {
        var b = M.bind(null, a);
        b.type = a;
        return b;
      };
      exports.createRef = function() {
        return { current: null };
      };
      exports.forwardRef = function(a) {
        return { $$typeof: v, render: a };
      };
      exports.isValidElement = O;
      exports.lazy = function(a) {
        return { $$typeof: y, _payload: { _status: -1, _result: a }, _init: T };
      };
      exports.memo = function(a, b) {
        return { $$typeof: x, type: a, compare: void 0 === b ? null : b };
      };
      exports.startTransition = function(a) {
        var b = V.transition;
        V.transition = {};
        try {
          a();
        } finally {
          V.transition = b;
        }
      };
      exports.unstable_act = X;
      exports.useCallback = function(a, b) {
        return U.current.useCallback(a, b);
      };
      exports.useContext = function(a) {
        return U.current.useContext(a);
      };
      exports.useDebugValue = function() {
      };
      exports.useDeferredValue = function(a) {
        return U.current.useDeferredValue(a);
      };
      exports.useEffect = function(a, b) {
        return U.current.useEffect(a, b);
      };
      exports.useId = function() {
        return U.current.useId();
      };
      exports.useImperativeHandle = function(a, b, e) {
        return U.current.useImperativeHandle(a, b, e);
      };
      exports.useInsertionEffect = function(a, b) {
        return U.current.useInsertionEffect(a, b);
      };
      exports.useLayoutEffect = function(a, b) {
        return U.current.useLayoutEffect(a, b);
      };
      exports.useMemo = function(a, b) {
        return U.current.useMemo(a, b);
      };
      exports.useReducer = function(a, b, e) {
        return U.current.useReducer(a, b, e);
      };
      exports.useRef = function(a) {
        return U.current.useRef(a);
      };
      exports.useState = function(a) {
        return U.current.useState(a);
      };
      exports.useSyncExternalStore = function(a, b, e) {
        return U.current.useSyncExternalStore(a, b, e);
      };
      exports.useTransition = function() {
        return U.current.useTransition();
      };
      exports.version = "18.3.1";
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (true) {
        module.exports = require_react_production_min();
      } else {
        module.exports = null;
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.production.min.js
  var require_scheduler_production_min = __commonJS({
    "node_modules/scheduler/cjs/scheduler.production.min.js"(exports) {
      "use strict";
      function f(a, b) {
        var c = a.length;
        a.push(b);
        a: for (; 0 < c; ) {
          var d = c - 1 >>> 1, e = a[d];
          if (0 < g(e, b)) a[d] = b, a[c] = e, c = d;
          else break a;
        }
      }
      function h(a) {
        return 0 === a.length ? null : a[0];
      }
      function k(a) {
        if (0 === a.length) return null;
        var b = a[0], c = a.pop();
        if (c !== b) {
          a[0] = c;
          a: for (var d = 0, e = a.length, w = e >>> 1; d < w; ) {
            var m = 2 * (d + 1) - 1, C = a[m], n = m + 1, x = a[n];
            if (0 > g(C, c)) n < e && 0 > g(x, C) ? (a[d] = x, a[n] = c, d = n) : (a[d] = C, a[m] = c, d = m);
            else if (n < e && 0 > g(x, c)) a[d] = x, a[n] = c, d = n;
            else break a;
          }
        }
        return b;
      }
      function g(a, b) {
        var c = a.sortIndex - b.sortIndex;
        return 0 !== c ? c : a.id - b.id;
      }
      if ("object" === typeof performance && "function" === typeof performance.now) {
        l = performance;
        exports.unstable_now = function() {
          return l.now();
        };
      } else {
        p = Date, q = p.now();
        exports.unstable_now = function() {
          return p.now() - q;
        };
      }
      var l;
      var p;
      var q;
      var r = [];
      var t = [];
      var u = 1;
      var v = null;
      var y = 3;
      var z = false;
      var A = false;
      var B = false;
      var D = "function" === typeof setTimeout ? setTimeout : null;
      var E = "function" === typeof clearTimeout ? clearTimeout : null;
      var F = "undefined" !== typeof setImmediate ? setImmediate : null;
      "undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
      function G(a) {
        for (var b = h(t); null !== b; ) {
          if (null === b.callback) k(t);
          else if (b.startTime <= a) k(t), b.sortIndex = b.expirationTime, f(r, b);
          else break;
          b = h(t);
        }
      }
      function H(a) {
        B = false;
        G(a);
        if (!A) if (null !== h(r)) A = true, I(J);
        else {
          var b = h(t);
          null !== b && K(H, b.startTime - a);
        }
      }
      function J(a, b) {
        A = false;
        B && (B = false, E(L), L = -1);
        z = true;
        var c = y;
        try {
          G(b);
          for (v = h(r); null !== v && (!(v.expirationTime > b) || a && !M()); ) {
            var d = v.callback;
            if ("function" === typeof d) {
              v.callback = null;
              y = v.priorityLevel;
              var e = d(v.expirationTime <= b);
              b = exports.unstable_now();
              "function" === typeof e ? v.callback = e : v === h(r) && k(r);
              G(b);
            } else k(r);
            v = h(r);
          }
          if (null !== v) var w = true;
          else {
            var m = h(t);
            null !== m && K(H, m.startTime - b);
            w = false;
          }
          return w;
        } finally {
          v = null, y = c, z = false;
        }
      }
      var N = false;
      var O = null;
      var L = -1;
      var P = 5;
      var Q = -1;
      function M() {
        return exports.unstable_now() - Q < P ? false : true;
      }
      function R() {
        if (null !== O) {
          var a = exports.unstable_now();
          Q = a;
          var b = true;
          try {
            b = O(true, a);
          } finally {
            b ? S() : (N = false, O = null);
          }
        } else N = false;
      }
      var S;
      if ("function" === typeof F) S = function() {
        F(R);
      };
      else if ("undefined" !== typeof MessageChannel) {
        T = new MessageChannel(), U = T.port2;
        T.port1.onmessage = R;
        S = function() {
          U.postMessage(null);
        };
      } else S = function() {
        D(R, 0);
      };
      var T;
      var U;
      function I(a) {
        O = a;
        N || (N = true, S());
      }
      function K(a, b) {
        L = D(function() {
          a(exports.unstable_now());
        }, b);
      }
      exports.unstable_IdlePriority = 5;
      exports.unstable_ImmediatePriority = 1;
      exports.unstable_LowPriority = 4;
      exports.unstable_NormalPriority = 3;
      exports.unstable_Profiling = null;
      exports.unstable_UserBlockingPriority = 2;
      exports.unstable_cancelCallback = function(a) {
        a.callback = null;
      };
      exports.unstable_continueExecution = function() {
        A || z || (A = true, I(J));
      };
      exports.unstable_forceFrameRate = function(a) {
        0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P = 0 < a ? Math.floor(1e3 / a) : 5;
      };
      exports.unstable_getCurrentPriorityLevel = function() {
        return y;
      };
      exports.unstable_getFirstCallbackNode = function() {
        return h(r);
      };
      exports.unstable_next = function(a) {
        switch (y) {
          case 1:
          case 2:
          case 3:
            var b = 3;
            break;
          default:
            b = y;
        }
        var c = y;
        y = b;
        try {
          return a();
        } finally {
          y = c;
        }
      };
      exports.unstable_pauseExecution = function() {
      };
      exports.unstable_requestPaint = function() {
      };
      exports.unstable_runWithPriority = function(a, b) {
        switch (a) {
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
            break;
          default:
            a = 3;
        }
        var c = y;
        y = a;
        try {
          return b();
        } finally {
          y = c;
        }
      };
      exports.unstable_scheduleCallback = function(a, b, c) {
        var d = exports.unstable_now();
        "object" === typeof c && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;
        switch (a) {
          case 1:
            var e = -1;
            break;
          case 2:
            e = 250;
            break;
          case 5:
            e = 1073741823;
            break;
          case 4:
            e = 1e4;
            break;
          default:
            e = 5e3;
        }
        e = c + e;
        a = { id: u++, callback: b, priorityLevel: a, startTime: c, expirationTime: e, sortIndex: -1 };
        c > d ? (a.sortIndex = c, f(t, a), null === h(r) && a === h(t) && (B ? (E(L), L = -1) : B = true, K(H, c - d))) : (a.sortIndex = e, f(r, a), A || z || (A = true, I(J)));
        return a;
      };
      exports.unstable_shouldYield = M;
      exports.unstable_wrapCallback = function(a) {
        var b = y;
        return function() {
          var c = y;
          y = b;
          try {
            return a.apply(this, arguments);
          } finally {
            y = c;
          }
        };
      };
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (true) {
        module.exports = require_scheduler_production_min();
      } else {
        module.exports = null;
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.production.min.js
  var require_react_dom_production_min = __commonJS({
    "node_modules/react-dom/cjs/react-dom.production.min.js"(exports) {
      "use strict";
      var aa = require_react();
      var ca = require_scheduler();
      function p(a) {
        for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) b += "&args[]=" + encodeURIComponent(arguments[c]);
        return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
      }
      var da = /* @__PURE__ */ new Set();
      var ea = {};
      function fa(a, b) {
        ha(a, b);
        ha(a + "Capture", b);
      }
      function ha(a, b) {
        ea[a] = b;
        for (a = 0; a < b.length; a++) da.add(b[a]);
      }
      var ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement);
      var ja = Object.prototype.hasOwnProperty;
      var ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/;
      var la = {};
      var ma = {};
      function oa(a) {
        if (ja.call(ma, a)) return true;
        if (ja.call(la, a)) return false;
        if (ka.test(a)) return ma[a] = true;
        la[a] = true;
        return false;
      }
      function pa(a, b, c, d) {
        if (null !== c && 0 === c.type) return false;
        switch (typeof b) {
          case "function":
          case "symbol":
            return true;
          case "boolean":
            if (d) return false;
            if (null !== c) return !c.acceptsBooleans;
            a = a.toLowerCase().slice(0, 5);
            return "data-" !== a && "aria-" !== a;
          default:
            return false;
        }
      }
      function qa(a, b, c, d) {
        if (null === b || "undefined" === typeof b || pa(a, b, c, d)) return true;
        if (d) return false;
        if (null !== c) switch (c.type) {
          case 3:
            return !b;
          case 4:
            return false === b;
          case 5:
            return isNaN(b);
          case 6:
            return isNaN(b) || 1 > b;
        }
        return false;
      }
      function v(a, b, c, d, e, f, g) {
        this.acceptsBooleans = 2 === b || 3 === b || 4 === b;
        this.attributeName = d;
        this.attributeNamespace = e;
        this.mustUseProperty = c;
        this.propertyName = a;
        this.type = b;
        this.sanitizeURL = f;
        this.removeEmptyString = g;
      }
      var z = {};
      "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a) {
        z[a] = new v(a, 0, false, a, null, false, false);
      });
      [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a) {
        var b = a[0];
        z[b] = new v(b, 1, false, a[1], null, false, false);
      });
      ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a) {
        z[a] = new v(a, 2, false, a.toLowerCase(), null, false, false);
      });
      ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a) {
        z[a] = new v(a, 2, false, a, null, false, false);
      });
      "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a) {
        z[a] = new v(a, 3, false, a.toLowerCase(), null, false, false);
      });
      ["checked", "multiple", "muted", "selected"].forEach(function(a) {
        z[a] = new v(a, 3, true, a, null, false, false);
      });
      ["capture", "download"].forEach(function(a) {
        z[a] = new v(a, 4, false, a, null, false, false);
      });
      ["cols", "rows", "size", "span"].forEach(function(a) {
        z[a] = new v(a, 6, false, a, null, false, false);
      });
      ["rowSpan", "start"].forEach(function(a) {
        z[a] = new v(a, 5, false, a.toLowerCase(), null, false, false);
      });
      var ra = /[\-:]([a-z])/g;
      function sa(a) {
        return a[1].toUpperCase();
      }
      "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a) {
        var b = a.replace(
          ra,
          sa
        );
        z[b] = new v(b, 1, false, a, null, false, false);
      });
      "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a) {
        var b = a.replace(ra, sa);
        z[b] = new v(b, 1, false, a, "http://www.w3.org/1999/xlink", false, false);
      });
      ["xml:base", "xml:lang", "xml:space"].forEach(function(a) {
        var b = a.replace(ra, sa);
        z[b] = new v(b, 1, false, a, "http://www.w3.org/XML/1998/namespace", false, false);
      });
      ["tabIndex", "crossOrigin"].forEach(function(a) {
        z[a] = new v(a, 1, false, a.toLowerCase(), null, false, false);
      });
      z.xlinkHref = new v("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
      ["src", "href", "action", "formAction"].forEach(function(a) {
        z[a] = new v(a, 1, false, a.toLowerCase(), null, true, true);
      });
      function ta(a, b, c, d) {
        var e = z.hasOwnProperty(b) ? z[b] : null;
        if (null !== e ? 0 !== e.type : d || !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1]) qa(b, c, e, d) && (c = null), d || null === e ? oa(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? false : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && true === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c)));
      }
      var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      var va = Symbol.for("react.element");
      var wa = Symbol.for("react.portal");
      var ya = Symbol.for("react.fragment");
      var za = Symbol.for("react.strict_mode");
      var Aa = Symbol.for("react.profiler");
      var Ba = Symbol.for("react.provider");
      var Ca = Symbol.for("react.context");
      var Da = Symbol.for("react.forward_ref");
      var Ea = Symbol.for("react.suspense");
      var Fa = Symbol.for("react.suspense_list");
      var Ga = Symbol.for("react.memo");
      var Ha = Symbol.for("react.lazy");
      Symbol.for("react.scope");
      Symbol.for("react.debug_trace_mode");
      var Ia = Symbol.for("react.offscreen");
      Symbol.for("react.legacy_hidden");
      Symbol.for("react.cache");
      Symbol.for("react.tracing_marker");
      var Ja = Symbol.iterator;
      function Ka(a) {
        if (null === a || "object" !== typeof a) return null;
        a = Ja && a[Ja] || a["@@iterator"];
        return "function" === typeof a ? a : null;
      }
      var A = Object.assign;
      var La;
      function Ma(a) {
        if (void 0 === La) try {
          throw Error();
        } catch (c) {
          var b = c.stack.trim().match(/\n( *(at )?)/);
          La = b && b[1] || "";
        }
        return "\n" + La + a;
      }
      var Na = false;
      function Oa(a, b) {
        if (!a || Na) return "";
        Na = true;
        var c = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        try {
          if (b) if (b = function() {
            throw Error();
          }, Object.defineProperty(b.prototype, "props", { set: function() {
            throw Error();
          } }), "object" === typeof Reflect && Reflect.construct) {
            try {
              Reflect.construct(b, []);
            } catch (l) {
              var d = l;
            }
            Reflect.construct(a, [], b);
          } else {
            try {
              b.call();
            } catch (l) {
              d = l;
            }
            a.call(b.prototype);
          }
          else {
            try {
              throw Error();
            } catch (l) {
              d = l;
            }
            a();
          }
        } catch (l) {
          if (l && d && "string" === typeof l.stack) {
            for (var e = l.stack.split("\n"), f = d.stack.split("\n"), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h]; ) h--;
            for (; 1 <= g && 0 <= h; g--, h--) if (e[g] !== f[h]) {
              if (1 !== g || 1 !== h) {
                do
                  if (g--, h--, 0 > h || e[g] !== f[h]) {
                    var k = "\n" + e[g].replace(" at new ", " at ");
                    a.displayName && k.includes("<anonymous>") && (k = k.replace("<anonymous>", a.displayName));
                    return k;
                  }
                while (1 <= g && 0 <= h);
              }
              break;
            }
          }
        } finally {
          Na = false, Error.prepareStackTrace = c;
        }
        return (a = a ? a.displayName || a.name : "") ? Ma(a) : "";
      }
      function Pa(a) {
        switch (a.tag) {
          case 5:
            return Ma(a.type);
          case 16:
            return Ma("Lazy");
          case 13:
            return Ma("Suspense");
          case 19:
            return Ma("SuspenseList");
          case 0:
          case 2:
          case 15:
            return a = Oa(a.type, false), a;
          case 11:
            return a = Oa(a.type.render, false), a;
          case 1:
            return a = Oa(a.type, true), a;
          default:
            return "";
        }
      }
      function Qa(a) {
        if (null == a) return null;
        if ("function" === typeof a) return a.displayName || a.name || null;
        if ("string" === typeof a) return a;
        switch (a) {
          case ya:
            return "Fragment";
          case wa:
            return "Portal";
          case Aa:
            return "Profiler";
          case za:
            return "StrictMode";
          case Ea:
            return "Suspense";
          case Fa:
            return "SuspenseList";
        }
        if ("object" === typeof a) switch (a.$$typeof) {
          case Ca:
            return (a.displayName || "Context") + ".Consumer";
          case Ba:
            return (a._context.displayName || "Context") + ".Provider";
          case Da:
            var b = a.render;
            a = a.displayName;
            a || (a = b.displayName || b.name || "", a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
            return a;
          case Ga:
            return b = a.displayName || null, null !== b ? b : Qa(a.type) || "Memo";
          case Ha:
            b = a._payload;
            a = a._init;
            try {
              return Qa(a(b));
            } catch (c) {
            }
        }
        return null;
      }
      function Ra(a) {
        var b = a.type;
        switch (a.tag) {
          case 24:
            return "Cache";
          case 9:
            return (b.displayName || "Context") + ".Consumer";
          case 10:
            return (b._context.displayName || "Context") + ".Provider";
          case 18:
            return "DehydratedFragment";
          case 11:
            return a = b.render, a = a.displayName || a.name || "", b.displayName || ("" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
          case 7:
            return "Fragment";
          case 5:
            return b;
          case 4:
            return "Portal";
          case 3:
            return "Root";
          case 6:
            return "Text";
          case 16:
            return Qa(b);
          case 8:
            return b === za ? "StrictMode" : "Mode";
          case 22:
            return "Offscreen";
          case 12:
            return "Profiler";
          case 21:
            return "Scope";
          case 13:
            return "Suspense";
          case 19:
            return "SuspenseList";
          case 25:
            return "TracingMarker";
          case 1:
          case 0:
          case 17:
          case 2:
          case 14:
          case 15:
            if ("function" === typeof b) return b.displayName || b.name || null;
            if ("string" === typeof b) return b;
        }
        return null;
      }
      function Sa(a) {
        switch (typeof a) {
          case "boolean":
          case "number":
          case "string":
          case "undefined":
            return a;
          case "object":
            return a;
          default:
            return "";
        }
      }
      function Ta(a) {
        var b = a.type;
        return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);
      }
      function Ua(a) {
        var b = Ta(a) ? "checked" : "value", c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b), d = "" + a[b];
        if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {
          var e = c.get, f = c.set;
          Object.defineProperty(a, b, { configurable: true, get: function() {
            return e.call(this);
          }, set: function(a2) {
            d = "" + a2;
            f.call(this, a2);
          } });
          Object.defineProperty(a, b, { enumerable: c.enumerable });
          return { getValue: function() {
            return d;
          }, setValue: function(a2) {
            d = "" + a2;
          }, stopTracking: function() {
            a._valueTracker = null;
            delete a[b];
          } };
        }
      }
      function Va(a) {
        a._valueTracker || (a._valueTracker = Ua(a));
      }
      function Wa(a) {
        if (!a) return false;
        var b = a._valueTracker;
        if (!b) return true;
        var c = b.getValue();
        var d = "";
        a && (d = Ta(a) ? a.checked ? "true" : "false" : a.value);
        a = d;
        return a !== c ? (b.setValue(a), true) : false;
      }
      function Xa(a) {
        a = a || ("undefined" !== typeof document ? document : void 0);
        if ("undefined" === typeof a) return null;
        try {
          return a.activeElement || a.body;
        } catch (b) {
          return a.body;
        }
      }
      function Ya(a, b) {
        var c = b.checked;
        return A({}, b, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c ? c : a._wrapperState.initialChecked });
      }
      function Za(a, b) {
        var c = null == b.defaultValue ? "" : b.defaultValue, d = null != b.checked ? b.checked : b.defaultChecked;
        c = Sa(null != b.value ? b.value : c);
        a._wrapperState = { initialChecked: d, initialValue: c, controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value };
      }
      function ab(a, b) {
        b = b.checked;
        null != b && ta(a, "checked", b, false);
      }
      function bb(a, b) {
        ab(a, b);
        var c = Sa(b.value), d = b.type;
        if (null != c) if ("number" === d) {
          if (0 === c && "" === a.value || a.value != c) a.value = "" + c;
        } else a.value !== "" + c && (a.value = "" + c);
        else if ("submit" === d || "reset" === d) {
          a.removeAttribute("value");
          return;
        }
        b.hasOwnProperty("value") ? cb(a, b.type, c) : b.hasOwnProperty("defaultValue") && cb(a, b.type, Sa(b.defaultValue));
        null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
      }
      function db(a, b, c) {
        if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
          var d = b.type;
          if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;
          b = "" + a._wrapperState.initialValue;
          c || b === a.value || (a.value = b);
          a.defaultValue = b;
        }
        c = a.name;
        "" !== c && (a.name = "");
        a.defaultChecked = !!a._wrapperState.initialChecked;
        "" !== c && (a.name = c);
      }
      function cb(a, b, c) {
        if ("number" !== b || Xa(a.ownerDocument) !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
      }
      var eb = Array.isArray;
      function fb(a, b, c, d) {
        a = a.options;
        if (b) {
          b = {};
          for (var e = 0; e < c.length; e++) b["$" + c[e]] = true;
          for (c = 0; c < a.length; c++) e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = true);
        } else {
          c = "" + Sa(c);
          b = null;
          for (e = 0; e < a.length; e++) {
            if (a[e].value === c) {
              a[e].selected = true;
              d && (a[e].defaultSelected = true);
              return;
            }
            null !== b || a[e].disabled || (b = a[e]);
          }
          null !== b && (b.selected = true);
        }
      }
      function gb(a, b) {
        if (null != b.dangerouslySetInnerHTML) throw Error(p(91));
        return A({}, b, { value: void 0, defaultValue: void 0, children: "" + a._wrapperState.initialValue });
      }
      function hb(a, b) {
        var c = b.value;
        if (null == c) {
          c = b.children;
          b = b.defaultValue;
          if (null != c) {
            if (null != b) throw Error(p(92));
            if (eb(c)) {
              if (1 < c.length) throw Error(p(93));
              c = c[0];
            }
            b = c;
          }
          null == b && (b = "");
          c = b;
        }
        a._wrapperState = { initialValue: Sa(c) };
      }
      function ib(a, b) {
        var c = Sa(b.value), d = Sa(b.defaultValue);
        null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));
        null != d && (a.defaultValue = "" + d);
      }
      function jb(a) {
        var b = a.textContent;
        b === a._wrapperState.initialValue && "" !== b && null !== b && (a.value = b);
      }
      function kb(a) {
        switch (a) {
          case "svg":
            return "http://www.w3.org/2000/svg";
          case "math":
            return "http://www.w3.org/1998/Math/MathML";
          default:
            return "http://www.w3.org/1999/xhtml";
        }
      }
      function lb(a, b) {
        return null == a || "http://www.w3.org/1999/xhtml" === a ? kb(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;
      }
      var mb;
      var nb = function(a) {
        return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b, c, d, e) {
          MSApp.execUnsafeLocalFunction(function() {
            return a(b, c, d, e);
          });
        } : a;
      }(function(a, b) {
        if ("http://www.w3.org/2000/svg" !== a.namespaceURI || "innerHTML" in a) a.innerHTML = b;
        else {
          mb = mb || document.createElement("div");
          mb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";
          for (b = mb.firstChild; a.firstChild; ) a.removeChild(a.firstChild);
          for (; b.firstChild; ) a.appendChild(b.firstChild);
        }
      });
      function ob(a, b) {
        if (b) {
          var c = a.firstChild;
          if (c && c === a.lastChild && 3 === c.nodeType) {
            c.nodeValue = b;
            return;
          }
        }
        a.textContent = b;
      }
      var pb = {
        animationIterationCount: true,
        aspectRatio: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
      };
      var qb = ["Webkit", "ms", "Moz", "O"];
      Object.keys(pb).forEach(function(a) {
        qb.forEach(function(b) {
          b = b + a.charAt(0).toUpperCase() + a.substring(1);
          pb[b] = pb[a];
        });
      });
      function rb(a, b, c) {
        return null == b || "boolean" === typeof b || "" === b ? "" : c || "number" !== typeof b || 0 === b || pb.hasOwnProperty(a) && pb[a] ? ("" + b).trim() : b + "px";
      }
      function sb(a, b) {
        a = a.style;
        for (var c in b) if (b.hasOwnProperty(c)) {
          var d = 0 === c.indexOf("--"), e = rb(c, b[c], d);
          "float" === c && (c = "cssFloat");
          d ? a.setProperty(c, e) : a[c] = e;
        }
      }
      var tb = A({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
      function ub(a, b) {
        if (b) {
          if (tb[a] && (null != b.children || null != b.dangerouslySetInnerHTML)) throw Error(p(137, a));
          if (null != b.dangerouslySetInnerHTML) {
            if (null != b.children) throw Error(p(60));
            if ("object" !== typeof b.dangerouslySetInnerHTML || !("__html" in b.dangerouslySetInnerHTML)) throw Error(p(61));
          }
          if (null != b.style && "object" !== typeof b.style) throw Error(p(62));
        }
      }
      function vb(a, b) {
        if (-1 === a.indexOf("-")) return "string" === typeof b.is;
        switch (a) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return false;
          default:
            return true;
        }
      }
      var wb = null;
      function xb(a) {
        a = a.target || a.srcElement || window;
        a.correspondingUseElement && (a = a.correspondingUseElement);
        return 3 === a.nodeType ? a.parentNode : a;
      }
      var yb = null;
      var zb = null;
      var Ab = null;
      function Bb(a) {
        if (a = Cb(a)) {
          if ("function" !== typeof yb) throw Error(p(280));
          var b = a.stateNode;
          b && (b = Db(b), yb(a.stateNode, a.type, b));
        }
      }
      function Eb(a) {
        zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;
      }
      function Fb() {
        if (zb) {
          var a = zb, b = Ab;
          Ab = zb = null;
          Bb(a);
          if (b) for (a = 0; a < b.length; a++) Bb(b[a]);
        }
      }
      function Gb(a, b) {
        return a(b);
      }
      function Hb() {
      }
      var Ib = false;
      function Jb(a, b, c) {
        if (Ib) return a(b, c);
        Ib = true;
        try {
          return Gb(a, b, c);
        } finally {
          if (Ib = false, null !== zb || null !== Ab) Hb(), Fb();
        }
      }
      function Kb(a, b) {
        var c = a.stateNode;
        if (null === c) return null;
        var d = Db(c);
        if (null === d) return null;
        c = d[b];
        a: switch (b) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));
            a = !d;
            break a;
          default:
            a = false;
        }
        if (a) return null;
        if (c && "function" !== typeof c) throw Error(p(231, b, typeof c));
        return c;
      }
      var Lb = false;
      if (ia) try {
        Mb = {};
        Object.defineProperty(Mb, "passive", { get: function() {
          Lb = true;
        } });
        window.addEventListener("test", Mb, Mb);
        window.removeEventListener("test", Mb, Mb);
      } catch (a) {
        Lb = false;
      }
      var Mb;
      function Nb(a, b, c, d, e, f, g, h, k) {
        var l = Array.prototype.slice.call(arguments, 3);
        try {
          b.apply(c, l);
        } catch (m) {
          this.onError(m);
        }
      }
      var Ob = false;
      var Pb = null;
      var Qb = false;
      var Rb = null;
      var Sb = { onError: function(a) {
        Ob = true;
        Pb = a;
      } };
      function Tb(a, b, c, d, e, f, g, h, k) {
        Ob = false;
        Pb = null;
        Nb.apply(Sb, arguments);
      }
      function Ub(a, b, c, d, e, f, g, h, k) {
        Tb.apply(this, arguments);
        if (Ob) {
          if (Ob) {
            var l = Pb;
            Ob = false;
            Pb = null;
          } else throw Error(p(198));
          Qb || (Qb = true, Rb = l);
        }
      }
      function Vb(a) {
        var b = a, c = a;
        if (a.alternate) for (; b.return; ) b = b.return;
        else {
          a = b;
          do
            b = a, 0 !== (b.flags & 4098) && (c = b.return), a = b.return;
          while (a);
        }
        return 3 === b.tag ? c : null;
      }
      function Wb(a) {
        if (13 === a.tag) {
          var b = a.memoizedState;
          null === b && (a = a.alternate, null !== a && (b = a.memoizedState));
          if (null !== b) return b.dehydrated;
        }
        return null;
      }
      function Xb(a) {
        if (Vb(a) !== a) throw Error(p(188));
      }
      function Yb(a) {
        var b = a.alternate;
        if (!b) {
          b = Vb(a);
          if (null === b) throw Error(p(188));
          return b !== a ? null : a;
        }
        for (var c = a, d = b; ; ) {
          var e = c.return;
          if (null === e) break;
          var f = e.alternate;
          if (null === f) {
            d = e.return;
            if (null !== d) {
              c = d;
              continue;
            }
            break;
          }
          if (e.child === f.child) {
            for (f = e.child; f; ) {
              if (f === c) return Xb(e), a;
              if (f === d) return Xb(e), b;
              f = f.sibling;
            }
            throw Error(p(188));
          }
          if (c.return !== d.return) c = e, d = f;
          else {
            for (var g = false, h = e.child; h; ) {
              if (h === c) {
                g = true;
                c = e;
                d = f;
                break;
              }
              if (h === d) {
                g = true;
                d = e;
                c = f;
                break;
              }
              h = h.sibling;
            }
            if (!g) {
              for (h = f.child; h; ) {
                if (h === c) {
                  g = true;
                  c = f;
                  d = e;
                  break;
                }
                if (h === d) {
                  g = true;
                  d = f;
                  c = e;
                  break;
                }
                h = h.sibling;
              }
              if (!g) throw Error(p(189));
            }
          }
          if (c.alternate !== d) throw Error(p(190));
        }
        if (3 !== c.tag) throw Error(p(188));
        return c.stateNode.current === c ? a : b;
      }
      function Zb(a) {
        a = Yb(a);
        return null !== a ? $b(a) : null;
      }
      function $b(a) {
        if (5 === a.tag || 6 === a.tag) return a;
        for (a = a.child; null !== a; ) {
          var b = $b(a);
          if (null !== b) return b;
          a = a.sibling;
        }
        return null;
      }
      var ac = ca.unstable_scheduleCallback;
      var bc = ca.unstable_cancelCallback;
      var cc = ca.unstable_shouldYield;
      var dc = ca.unstable_requestPaint;
      var B = ca.unstable_now;
      var ec = ca.unstable_getCurrentPriorityLevel;
      var fc = ca.unstable_ImmediatePriority;
      var gc = ca.unstable_UserBlockingPriority;
      var hc = ca.unstable_NormalPriority;
      var ic = ca.unstable_LowPriority;
      var jc = ca.unstable_IdlePriority;
      var kc = null;
      var lc = null;
      function mc(a) {
        if (lc && "function" === typeof lc.onCommitFiberRoot) try {
          lc.onCommitFiberRoot(kc, a, void 0, 128 === (a.current.flags & 128));
        } catch (b) {
        }
      }
      var oc = Math.clz32 ? Math.clz32 : nc;
      var pc = Math.log;
      var qc = Math.LN2;
      function nc(a) {
        a >>>= 0;
        return 0 === a ? 32 : 31 - (pc(a) / qc | 0) | 0;
      }
      var rc = 64;
      var sc = 4194304;
      function tc(a) {
        switch (a & -a) {
          case 1:
            return 1;
          case 2:
            return 2;
          case 4:
            return 4;
          case 8:
            return 8;
          case 16:
            return 16;
          case 32:
            return 32;
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return a & 4194240;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
          case 67108864:
            return a & 130023424;
          case 134217728:
            return 134217728;
          case 268435456:
            return 268435456;
          case 536870912:
            return 536870912;
          case 1073741824:
            return 1073741824;
          default:
            return a;
        }
      }
      function uc(a, b) {
        var c = a.pendingLanes;
        if (0 === c) return 0;
        var d = 0, e = a.suspendedLanes, f = a.pingedLanes, g = c & 268435455;
        if (0 !== g) {
          var h = g & ~e;
          0 !== h ? d = tc(h) : (f &= g, 0 !== f && (d = tc(f)));
        } else g = c & ~e, 0 !== g ? d = tc(g) : 0 !== f && (d = tc(f));
        if (0 === d) return 0;
        if (0 !== b && b !== d && 0 === (b & e) && (e = d & -d, f = b & -b, e >= f || 16 === e && 0 !== (f & 4194240))) return b;
        0 !== (d & 4) && (d |= c & 16);
        b = a.entangledLanes;
        if (0 !== b) for (a = a.entanglements, b &= d; 0 < b; ) c = 31 - oc(b), e = 1 << c, d |= a[c], b &= ~e;
        return d;
      }
      function vc(a, b) {
        switch (a) {
          case 1:
          case 2:
          case 4:
            return b + 250;
          case 8:
          case 16:
          case 32:
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return b + 5e3;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
          case 67108864:
            return -1;
          case 134217728:
          case 268435456:
          case 536870912:
          case 1073741824:
            return -1;
          default:
            return -1;
        }
      }
      function wc(a, b) {
        for (var c = a.suspendedLanes, d = a.pingedLanes, e = a.expirationTimes, f = a.pendingLanes; 0 < f; ) {
          var g = 31 - oc(f), h = 1 << g, k = e[g];
          if (-1 === k) {
            if (0 === (h & c) || 0 !== (h & d)) e[g] = vc(h, b);
          } else k <= b && (a.expiredLanes |= h);
          f &= ~h;
        }
      }
      function xc(a) {
        a = a.pendingLanes & -1073741825;
        return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
      }
      function yc() {
        var a = rc;
        rc <<= 1;
        0 === (rc & 4194240) && (rc = 64);
        return a;
      }
      function zc(a) {
        for (var b = [], c = 0; 31 > c; c++) b.push(a);
        return b;
      }
      function Ac(a, b, c) {
        a.pendingLanes |= b;
        536870912 !== b && (a.suspendedLanes = 0, a.pingedLanes = 0);
        a = a.eventTimes;
        b = 31 - oc(b);
        a[b] = c;
      }
      function Bc(a, b) {
        var c = a.pendingLanes & ~b;
        a.pendingLanes = b;
        a.suspendedLanes = 0;
        a.pingedLanes = 0;
        a.expiredLanes &= b;
        a.mutableReadLanes &= b;
        a.entangledLanes &= b;
        b = a.entanglements;
        var d = a.eventTimes;
        for (a = a.expirationTimes; 0 < c; ) {
          var e = 31 - oc(c), f = 1 << e;
          b[e] = 0;
          d[e] = -1;
          a[e] = -1;
          c &= ~f;
        }
      }
      function Cc(a, b) {
        var c = a.entangledLanes |= b;
        for (a = a.entanglements; c; ) {
          var d = 31 - oc(c), e = 1 << d;
          e & b | a[d] & b && (a[d] |= b);
          c &= ~e;
        }
      }
      var C = 0;
      function Dc(a) {
        a &= -a;
        return 1 < a ? 4 < a ? 0 !== (a & 268435455) ? 16 : 536870912 : 4 : 1;
      }
      var Ec;
      var Fc;
      var Gc;
      var Hc;
      var Ic;
      var Jc = false;
      var Kc = [];
      var Lc = null;
      var Mc = null;
      var Nc = null;
      var Oc = /* @__PURE__ */ new Map();
      var Pc = /* @__PURE__ */ new Map();
      var Qc = [];
      var Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
      function Sc(a, b) {
        switch (a) {
          case "focusin":
          case "focusout":
            Lc = null;
            break;
          case "dragenter":
          case "dragleave":
            Mc = null;
            break;
          case "mouseover":
          case "mouseout":
            Nc = null;
            break;
          case "pointerover":
          case "pointerout":
            Oc.delete(b.pointerId);
            break;
          case "gotpointercapture":
          case "lostpointercapture":
            Pc.delete(b.pointerId);
        }
      }
      function Tc(a, b, c, d, e, f) {
        if (null === a || a.nativeEvent !== f) return a = { blockedOn: b, domEventName: c, eventSystemFlags: d, nativeEvent: f, targetContainers: [e] }, null !== b && (b = Cb(b), null !== b && Fc(b)), a;
        a.eventSystemFlags |= d;
        b = a.targetContainers;
        null !== e && -1 === b.indexOf(e) && b.push(e);
        return a;
      }
      function Uc(a, b, c, d, e) {
        switch (b) {
          case "focusin":
            return Lc = Tc(Lc, a, b, c, d, e), true;
          case "dragenter":
            return Mc = Tc(Mc, a, b, c, d, e), true;
          case "mouseover":
            return Nc = Tc(Nc, a, b, c, d, e), true;
          case "pointerover":
            var f = e.pointerId;
            Oc.set(f, Tc(Oc.get(f) || null, a, b, c, d, e));
            return true;
          case "gotpointercapture":
            return f = e.pointerId, Pc.set(f, Tc(Pc.get(f) || null, a, b, c, d, e)), true;
        }
        return false;
      }
      function Vc(a) {
        var b = Wc(a.target);
        if (null !== b) {
          var c = Vb(b);
          if (null !== c) {
            if (b = c.tag, 13 === b) {
              if (b = Wb(c), null !== b) {
                a.blockedOn = b;
                Ic(a.priority, function() {
                  Gc(c);
                });
                return;
              }
            } else if (3 === b && c.stateNode.current.memoizedState.isDehydrated) {
              a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;
              return;
            }
          }
        }
        a.blockedOn = null;
      }
      function Xc(a) {
        if (null !== a.blockedOn) return false;
        for (var b = a.targetContainers; 0 < b.length; ) {
          var c = Yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);
          if (null === c) {
            c = a.nativeEvent;
            var d = new c.constructor(c.type, c);
            wb = d;
            c.target.dispatchEvent(d);
            wb = null;
          } else return b = Cb(c), null !== b && Fc(b), a.blockedOn = c, false;
          b.shift();
        }
        return true;
      }
      function Zc(a, b, c) {
        Xc(a) && c.delete(b);
      }
      function $c() {
        Jc = false;
        null !== Lc && Xc(Lc) && (Lc = null);
        null !== Mc && Xc(Mc) && (Mc = null);
        null !== Nc && Xc(Nc) && (Nc = null);
        Oc.forEach(Zc);
        Pc.forEach(Zc);
      }
      function ad(a, b) {
        a.blockedOn === b && (a.blockedOn = null, Jc || (Jc = true, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
      }
      function bd(a) {
        function b(b2) {
          return ad(b2, a);
        }
        if (0 < Kc.length) {
          ad(Kc[0], a);
          for (var c = 1; c < Kc.length; c++) {
            var d = Kc[c];
            d.blockedOn === a && (d.blockedOn = null);
          }
        }
        null !== Lc && ad(Lc, a);
        null !== Mc && ad(Mc, a);
        null !== Nc && ad(Nc, a);
        Oc.forEach(b);
        Pc.forEach(b);
        for (c = 0; c < Qc.length; c++) d = Qc[c], d.blockedOn === a && (d.blockedOn = null);
        for (; 0 < Qc.length && (c = Qc[0], null === c.blockedOn); ) Vc(c), null === c.blockedOn && Qc.shift();
      }
      var cd = ua.ReactCurrentBatchConfig;
      var dd = true;
      function ed(a, b, c, d) {
        var e = C, f = cd.transition;
        cd.transition = null;
        try {
          C = 1, fd(a, b, c, d);
        } finally {
          C = e, cd.transition = f;
        }
      }
      function gd(a, b, c, d) {
        var e = C, f = cd.transition;
        cd.transition = null;
        try {
          C = 4, fd(a, b, c, d);
        } finally {
          C = e, cd.transition = f;
        }
      }
      function fd(a, b, c, d) {
        if (dd) {
          var e = Yc(a, b, c, d);
          if (null === e) hd(a, b, d, id, c), Sc(a, d);
          else if (Uc(e, a, b, c, d)) d.stopPropagation();
          else if (Sc(a, d), b & 4 && -1 < Rc.indexOf(a)) {
            for (; null !== e; ) {
              var f = Cb(e);
              null !== f && Ec(f);
              f = Yc(a, b, c, d);
              null === f && hd(a, b, d, id, c);
              if (f === e) break;
              e = f;
            }
            null !== e && d.stopPropagation();
          } else hd(a, b, d, null, c);
        }
      }
      var id = null;
      function Yc(a, b, c, d) {
        id = null;
        a = xb(d);
        a = Wc(a);
        if (null !== a) if (b = Vb(a), null === b) a = null;
        else if (c = b.tag, 13 === c) {
          a = Wb(b);
          if (null !== a) return a;
          a = null;
        } else if (3 === c) {
          if (b.stateNode.current.memoizedState.isDehydrated) return 3 === b.tag ? b.stateNode.containerInfo : null;
          a = null;
        } else b !== a && (a = null);
        id = a;
        return null;
      }
      function jd(a) {
        switch (a) {
          case "cancel":
          case "click":
          case "close":
          case "contextmenu":
          case "copy":
          case "cut":
          case "auxclick":
          case "dblclick":
          case "dragend":
          case "dragstart":
          case "drop":
          case "focusin":
          case "focusout":
          case "input":
          case "invalid":
          case "keydown":
          case "keypress":
          case "keyup":
          case "mousedown":
          case "mouseup":
          case "paste":
          case "pause":
          case "play":
          case "pointercancel":
          case "pointerdown":
          case "pointerup":
          case "ratechange":
          case "reset":
          case "resize":
          case "seeked":
          case "submit":
          case "touchcancel":
          case "touchend":
          case "touchstart":
          case "volumechange":
          case "change":
          case "selectionchange":
          case "textInput":
          case "compositionstart":
          case "compositionend":
          case "compositionupdate":
          case "beforeblur":
          case "afterblur":
          case "beforeinput":
          case "blur":
          case "fullscreenchange":
          case "focus":
          case "hashchange":
          case "popstate":
          case "select":
          case "selectstart":
            return 1;
          case "drag":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "mousemove":
          case "mouseout":
          case "mouseover":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "scroll":
          case "toggle":
          case "touchmove":
          case "wheel":
          case "mouseenter":
          case "mouseleave":
          case "pointerenter":
          case "pointerleave":
            return 4;
          case "message":
            switch (ec()) {
              case fc:
                return 1;
              case gc:
                return 4;
              case hc:
              case ic:
                return 16;
              case jc:
                return 536870912;
              default:
                return 16;
            }
          default:
            return 16;
        }
      }
      var kd = null;
      var ld = null;
      var md = null;
      function nd() {
        if (md) return md;
        var a, b = ld, c = b.length, d, e = "value" in kd ? kd.value : kd.textContent, f = e.length;
        for (a = 0; a < c && b[a] === e[a]; a++) ;
        var g = c - a;
        for (d = 1; d <= g && b[c - d] === e[f - d]; d++) ;
        return md = e.slice(a, 1 < d ? 1 - d : void 0);
      }
      function od(a) {
        var b = a.keyCode;
        "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;
        10 === a && (a = 13);
        return 32 <= a || 13 === a ? a : 0;
      }
      function pd() {
        return true;
      }
      function qd() {
        return false;
      }
      function rd(a) {
        function b(b2, d, e, f, g) {
          this._reactName = b2;
          this._targetInst = e;
          this.type = d;
          this.nativeEvent = f;
          this.target = g;
          this.currentTarget = null;
          for (var c in a) a.hasOwnProperty(c) && (b2 = a[c], this[c] = b2 ? b2(f) : f[c]);
          this.isDefaultPrevented = (null != f.defaultPrevented ? f.defaultPrevented : false === f.returnValue) ? pd : qd;
          this.isPropagationStopped = qd;
          return this;
        }
        A(b.prototype, { preventDefault: function() {
          this.defaultPrevented = true;
          var a2 = this.nativeEvent;
          a2 && (a2.preventDefault ? a2.preventDefault() : "unknown" !== typeof a2.returnValue && (a2.returnValue = false), this.isDefaultPrevented = pd);
        }, stopPropagation: function() {
          var a2 = this.nativeEvent;
          a2 && (a2.stopPropagation ? a2.stopPropagation() : "unknown" !== typeof a2.cancelBubble && (a2.cancelBubble = true), this.isPropagationStopped = pd);
        }, persist: function() {
        }, isPersistent: pd });
        return b;
      }
      var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a) {
        return a.timeStamp || Date.now();
      }, defaultPrevented: 0, isTrusted: 0 };
      var td = rd(sd);
      var ud = A({}, sd, { view: 0, detail: 0 });
      var vd = rd(ud);
      var wd;
      var xd;
      var yd;
      var Ad = A({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a) {
        return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
      }, movementX: function(a) {
        if ("movementX" in a) return a.movementX;
        a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);
        return wd;
      }, movementY: function(a) {
        return "movementY" in a ? a.movementY : xd;
      } });
      var Bd = rd(Ad);
      var Cd = A({}, Ad, { dataTransfer: 0 });
      var Dd = rd(Cd);
      var Ed = A({}, ud, { relatedTarget: 0 });
      var Fd = rd(Ed);
      var Gd = A({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 });
      var Hd = rd(Gd);
      var Id = A({}, sd, { clipboardData: function(a) {
        return "clipboardData" in a ? a.clipboardData : window.clipboardData;
      } });
      var Jd = rd(Id);
      var Kd = A({}, sd, { data: 0 });
      var Ld = rd(Kd);
      var Md = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
      };
      var Nd = {
        8: "Backspace",
        9: "Tab",
        12: "Clear",
        13: "Enter",
        16: "Shift",
        17: "Control",
        18: "Alt",
        19: "Pause",
        20: "CapsLock",
        27: "Escape",
        32: " ",
        33: "PageUp",
        34: "PageDown",
        35: "End",
        36: "Home",
        37: "ArrowLeft",
        38: "ArrowUp",
        39: "ArrowRight",
        40: "ArrowDown",
        45: "Insert",
        46: "Delete",
        112: "F1",
        113: "F2",
        114: "F3",
        115: "F4",
        116: "F5",
        117: "F6",
        118: "F7",
        119: "F8",
        120: "F9",
        121: "F10",
        122: "F11",
        123: "F12",
        144: "NumLock",
        145: "ScrollLock",
        224: "Meta"
      };
      var Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
      function Pd(a) {
        var b = this.nativeEvent;
        return b.getModifierState ? b.getModifierState(a) : (a = Od[a]) ? !!b[a] : false;
      }
      function zd() {
        return Pd;
      }
      var Qd = A({}, ud, { key: function(a) {
        if (a.key) {
          var b = Md[a.key] || a.key;
          if ("Unidentified" !== b) return b;
        }
        return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";
      }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a) {
        return "keypress" === a.type ? od(a) : 0;
      }, keyCode: function(a) {
        return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
      }, which: function(a) {
        return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
      } });
      var Rd = rd(Qd);
      var Sd = A({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 });
      var Td = rd(Sd);
      var Ud = A({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd });
      var Vd = rd(Ud);
      var Wd = A({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 });
      var Xd = rd(Wd);
      var Yd = A({}, Ad, {
        deltaX: function(a) {
          return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
        },
        deltaY: function(a) {
          return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
        },
        deltaZ: 0,
        deltaMode: 0
      });
      var Zd = rd(Yd);
      var $d = [9, 13, 27, 32];
      var ae = ia && "CompositionEvent" in window;
      var be = null;
      ia && "documentMode" in document && (be = document.documentMode);
      var ce = ia && "TextEvent" in window && !be;
      var de = ia && (!ae || be && 8 < be && 11 >= be);
      var ee = String.fromCharCode(32);
      var fe = false;
      function ge(a, b) {
        switch (a) {
          case "keyup":
            return -1 !== $d.indexOf(b.keyCode);
          case "keydown":
            return 229 !== b.keyCode;
          case "keypress":
          case "mousedown":
          case "focusout":
            return true;
          default:
            return false;
        }
      }
      function he(a) {
        a = a.detail;
        return "object" === typeof a && "data" in a ? a.data : null;
      }
      var ie = false;
      function je(a, b) {
        switch (a) {
          case "compositionend":
            return he(b);
          case "keypress":
            if (32 !== b.which) return null;
            fe = true;
            return ee;
          case "textInput":
            return a = b.data, a === ee && fe ? null : a;
          default:
            return null;
        }
      }
      function ke(a, b) {
        if (ie) return "compositionend" === a || !ae && ge(a, b) ? (a = nd(), md = ld = kd = null, ie = false, a) : null;
        switch (a) {
          case "paste":
            return null;
          case "keypress":
            if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
              if (b.char && 1 < b.char.length) return b.char;
              if (b.which) return String.fromCharCode(b.which);
            }
            return null;
          case "compositionend":
            return de && "ko" !== b.locale ? null : b.data;
          default:
            return null;
        }
      }
      var le = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
      function me(a) {
        var b = a && a.nodeName && a.nodeName.toLowerCase();
        return "input" === b ? !!le[a.type] : "textarea" === b ? true : false;
      }
      function ne(a, b, c, d) {
        Eb(d);
        b = oe(b, "onChange");
        0 < b.length && (c = new td("onChange", "change", null, c, d), a.push({ event: c, listeners: b }));
      }
      var pe = null;
      var qe = null;
      function re(a) {
        se(a, 0);
      }
      function te(a) {
        var b = ue(a);
        if (Wa(b)) return a;
      }
      function ve(a, b) {
        if ("change" === a) return b;
      }
      var we = false;
      if (ia) {
        if (ia) {
          ye = "oninput" in document;
          if (!ye) {
            ze = document.createElement("div");
            ze.setAttribute("oninput", "return;");
            ye = "function" === typeof ze.oninput;
          }
          xe = ye;
        } else xe = false;
        we = xe && (!document.documentMode || 9 < document.documentMode);
      }
      var xe;
      var ye;
      var ze;
      function Ae() {
        pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
      }
      function Be(a) {
        if ("value" === a.propertyName && te(qe)) {
          var b = [];
          ne(b, qe, a, xb(a));
          Jb(re, b);
        }
      }
      function Ce(a, b, c) {
        "focusin" === a ? (Ae(), pe = b, qe = c, pe.attachEvent("onpropertychange", Be)) : "focusout" === a && Ae();
      }
      function De(a) {
        if ("selectionchange" === a || "keyup" === a || "keydown" === a) return te(qe);
      }
      function Ee(a, b) {
        if ("click" === a) return te(b);
      }
      function Fe(a, b) {
        if ("input" === a || "change" === a) return te(b);
      }
      function Ge(a, b) {
        return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
      }
      var He = "function" === typeof Object.is ? Object.is : Ge;
      function Ie(a, b) {
        if (He(a, b)) return true;
        if ("object" !== typeof a || null === a || "object" !== typeof b || null === b) return false;
        var c = Object.keys(a), d = Object.keys(b);
        if (c.length !== d.length) return false;
        for (d = 0; d < c.length; d++) {
          var e = c[d];
          if (!ja.call(b, e) || !He(a[e], b[e])) return false;
        }
        return true;
      }
      function Je(a) {
        for (; a && a.firstChild; ) a = a.firstChild;
        return a;
      }
      function Ke(a, b) {
        var c = Je(a);
        a = 0;
        for (var d; c; ) {
          if (3 === c.nodeType) {
            d = a + c.textContent.length;
            if (a <= b && d >= b) return { node: c, offset: b - a };
            a = d;
          }
          a: {
            for (; c; ) {
              if (c.nextSibling) {
                c = c.nextSibling;
                break a;
              }
              c = c.parentNode;
            }
            c = void 0;
          }
          c = Je(c);
        }
      }
      function Le(a, b) {
        return a && b ? a === b ? true : a && 3 === a.nodeType ? false : b && 3 === b.nodeType ? Le(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : false : false;
      }
      function Me() {
        for (var a = window, b = Xa(); b instanceof a.HTMLIFrameElement; ) {
          try {
            var c = "string" === typeof b.contentWindow.location.href;
          } catch (d) {
            c = false;
          }
          if (c) a = b.contentWindow;
          else break;
          b = Xa(a.document);
        }
        return b;
      }
      function Ne(a) {
        var b = a && a.nodeName && a.nodeName.toLowerCase();
        return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);
      }
      function Oe(a) {
        var b = Me(), c = a.focusedElem, d = a.selectionRange;
        if (b !== c && c && c.ownerDocument && Le(c.ownerDocument.documentElement, c)) {
          if (null !== d && Ne(c)) {
            if (b = d.start, a = d.end, void 0 === a && (a = b), "selectionStart" in c) c.selectionStart = b, c.selectionEnd = Math.min(a, c.value.length);
            else if (a = (b = c.ownerDocument || document) && b.defaultView || window, a.getSelection) {
              a = a.getSelection();
              var e = c.textContent.length, f = Math.min(d.start, e);
              d = void 0 === d.end ? f : Math.min(d.end, e);
              !a.extend && f > d && (e = d, d = f, f = e);
              e = Ke(c, f);
              var g = Ke(
                c,
                d
              );
              e && g && (1 !== a.rangeCount || a.anchorNode !== e.node || a.anchorOffset !== e.offset || a.focusNode !== g.node || a.focusOffset !== g.offset) && (b = b.createRange(), b.setStart(e.node, e.offset), a.removeAllRanges(), f > d ? (a.addRange(b), a.extend(g.node, g.offset)) : (b.setEnd(g.node, g.offset), a.addRange(b)));
            }
          }
          b = [];
          for (a = c; a = a.parentNode; ) 1 === a.nodeType && b.push({ element: a, left: a.scrollLeft, top: a.scrollTop });
          "function" === typeof c.focus && c.focus();
          for (c = 0; c < b.length; c++) a = b[c], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;
        }
      }
      var Pe = ia && "documentMode" in document && 11 >= document.documentMode;
      var Qe = null;
      var Re = null;
      var Se = null;
      var Te = false;
      function Ue(a, b, c) {
        var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;
        Te || null == Qe || Qe !== Xa(d) || (d = Qe, "selectionStart" in d && Ne(d) ? d = { start: d.selectionStart, end: d.selectionEnd } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = { anchorNode: d.anchorNode, anchorOffset: d.anchorOffset, focusNode: d.focusNode, focusOffset: d.focusOffset }), Se && Ie(Se, d) || (Se = d, d = oe(Re, "onSelect"), 0 < d.length && (b = new td("onSelect", "select", null, b, c), a.push({ event: b, listeners: d }), b.target = Qe)));
      }
      function Ve(a, b) {
        var c = {};
        c[a.toLowerCase()] = b.toLowerCase();
        c["Webkit" + a] = "webkit" + b;
        c["Moz" + a] = "moz" + b;
        return c;
      }
      var We = { animationend: Ve("Animation", "AnimationEnd"), animationiteration: Ve("Animation", "AnimationIteration"), animationstart: Ve("Animation", "AnimationStart"), transitionend: Ve("Transition", "TransitionEnd") };
      var Xe = {};
      var Ye = {};
      ia && (Ye = document.createElement("div").style, "AnimationEvent" in window || (delete We.animationend.animation, delete We.animationiteration.animation, delete We.animationstart.animation), "TransitionEvent" in window || delete We.transitionend.transition);
      function Ze(a) {
        if (Xe[a]) return Xe[a];
        if (!We[a]) return a;
        var b = We[a], c;
        for (c in b) if (b.hasOwnProperty(c) && c in Ye) return Xe[a] = b[c];
        return a;
      }
      var $e = Ze("animationend");
      var af = Ze("animationiteration");
      var bf = Ze("animationstart");
      var cf = Ze("transitionend");
      var df = /* @__PURE__ */ new Map();
      var ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
      function ff(a, b) {
        df.set(a, b);
        fa(b, [a]);
      }
      for (gf = 0; gf < ef.length; gf++) {
        hf = ef[gf], jf = hf.toLowerCase(), kf = hf[0].toUpperCase() + hf.slice(1);
        ff(jf, "on" + kf);
      }
      var hf;
      var jf;
      var kf;
      var gf;
      ff($e, "onAnimationEnd");
      ff(af, "onAnimationIteration");
      ff(bf, "onAnimationStart");
      ff("dblclick", "onDoubleClick");
      ff("focusin", "onFocus");
      ff("focusout", "onBlur");
      ff(cf, "onTransitionEnd");
      ha("onMouseEnter", ["mouseout", "mouseover"]);
      ha("onMouseLeave", ["mouseout", "mouseover"]);
      ha("onPointerEnter", ["pointerout", "pointerover"]);
      ha("onPointerLeave", ["pointerout", "pointerover"]);
      fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
      fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
      fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
      fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
      fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
      fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
      var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");
      var mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
      function nf(a, b, c) {
        var d = a.type || "unknown-event";
        a.currentTarget = c;
        Ub(d, b, void 0, a);
        a.currentTarget = null;
      }
      function se(a, b) {
        b = 0 !== (b & 4);
        for (var c = 0; c < a.length; c++) {
          var d = a[c], e = d.event;
          d = d.listeners;
          a: {
            var f = void 0;
            if (b) for (var g = d.length - 1; 0 <= g; g--) {
              var h = d[g], k = h.instance, l = h.currentTarget;
              h = h.listener;
              if (k !== f && e.isPropagationStopped()) break a;
              nf(e, h, l);
              f = k;
            }
            else for (g = 0; g < d.length; g++) {
              h = d[g];
              k = h.instance;
              l = h.currentTarget;
              h = h.listener;
              if (k !== f && e.isPropagationStopped()) break a;
              nf(e, h, l);
              f = k;
            }
          }
        }
        if (Qb) throw a = Rb, Qb = false, Rb = null, a;
      }
      function D(a, b) {
        var c = b[of];
        void 0 === c && (c = b[of] = /* @__PURE__ */ new Set());
        var d = a + "__bubble";
        c.has(d) || (pf(b, a, 2, false), c.add(d));
      }
      function qf(a, b, c) {
        var d = 0;
        b && (d |= 4);
        pf(c, a, d, b);
      }
      var rf = "_reactListening" + Math.random().toString(36).slice(2);
      function sf(a) {
        if (!a[rf]) {
          a[rf] = true;
          da.forEach(function(b2) {
            "selectionchange" !== b2 && (mf.has(b2) || qf(b2, false, a), qf(b2, true, a));
          });
          var b = 9 === a.nodeType ? a : a.ownerDocument;
          null === b || b[rf] || (b[rf] = true, qf("selectionchange", false, b));
        }
      }
      function pf(a, b, c, d) {
        switch (jd(b)) {
          case 1:
            var e = ed;
            break;
          case 4:
            e = gd;
            break;
          default:
            e = fd;
        }
        c = e.bind(null, b, c, a);
        e = void 0;
        !Lb || "touchstart" !== b && "touchmove" !== b && "wheel" !== b || (e = true);
        d ? void 0 !== e ? a.addEventListener(b, c, { capture: true, passive: e }) : a.addEventListener(b, c, true) : void 0 !== e ? a.addEventListener(b, c, { passive: e }) : a.addEventListener(b, c, false);
      }
      function hd(a, b, c, d, e) {
        var f = d;
        if (0 === (b & 1) && 0 === (b & 2) && null !== d) a: for (; ; ) {
          if (null === d) return;
          var g = d.tag;
          if (3 === g || 4 === g) {
            var h = d.stateNode.containerInfo;
            if (h === e || 8 === h.nodeType && h.parentNode === e) break;
            if (4 === g) for (g = d.return; null !== g; ) {
              var k = g.tag;
              if (3 === k || 4 === k) {
                if (k = g.stateNode.containerInfo, k === e || 8 === k.nodeType && k.parentNode === e) return;
              }
              g = g.return;
            }
            for (; null !== h; ) {
              g = Wc(h);
              if (null === g) return;
              k = g.tag;
              if (5 === k || 6 === k) {
                d = f = g;
                continue a;
              }
              h = h.parentNode;
            }
          }
          d = d.return;
        }
        Jb(function() {
          var d2 = f, e2 = xb(c), g2 = [];
          a: {
            var h2 = df.get(a);
            if (void 0 !== h2) {
              var k2 = td, n = a;
              switch (a) {
                case "keypress":
                  if (0 === od(c)) break a;
                case "keydown":
                case "keyup":
                  k2 = Rd;
                  break;
                case "focusin":
                  n = "focus";
                  k2 = Fd;
                  break;
                case "focusout":
                  n = "blur";
                  k2 = Fd;
                  break;
                case "beforeblur":
                case "afterblur":
                  k2 = Fd;
                  break;
                case "click":
                  if (2 === c.button) break a;
                case "auxclick":
                case "dblclick":
                case "mousedown":
                case "mousemove":
                case "mouseup":
                case "mouseout":
                case "mouseover":
                case "contextmenu":
                  k2 = Bd;
                  break;
                case "drag":
                case "dragend":
                case "dragenter":
                case "dragexit":
                case "dragleave":
                case "dragover":
                case "dragstart":
                case "drop":
                  k2 = Dd;
                  break;
                case "touchcancel":
                case "touchend":
                case "touchmove":
                case "touchstart":
                  k2 = Vd;
                  break;
                case $e:
                case af:
                case bf:
                  k2 = Hd;
                  break;
                case cf:
                  k2 = Xd;
                  break;
                case "scroll":
                  k2 = vd;
                  break;
                case "wheel":
                  k2 = Zd;
                  break;
                case "copy":
                case "cut":
                case "paste":
                  k2 = Jd;
                  break;
                case "gotpointercapture":
                case "lostpointercapture":
                case "pointercancel":
                case "pointerdown":
                case "pointermove":
                case "pointerout":
                case "pointerover":
                case "pointerup":
                  k2 = Td;
              }
              var t = 0 !== (b & 4), J = !t && "scroll" === a, x = t ? null !== h2 ? h2 + "Capture" : null : h2;
              t = [];
              for (var w = d2, u; null !== w; ) {
                u = w;
                var F = u.stateNode;
                5 === u.tag && null !== F && (u = F, null !== x && (F = Kb(w, x), null != F && t.push(tf(w, F, u))));
                if (J) break;
                w = w.return;
              }
              0 < t.length && (h2 = new k2(h2, n, null, c, e2), g2.push({ event: h2, listeners: t }));
            }
          }
          if (0 === (b & 7)) {
            a: {
              h2 = "mouseover" === a || "pointerover" === a;
              k2 = "mouseout" === a || "pointerout" === a;
              if (h2 && c !== wb && (n = c.relatedTarget || c.fromElement) && (Wc(n) || n[uf])) break a;
              if (k2 || h2) {
                h2 = e2.window === e2 ? e2 : (h2 = e2.ownerDocument) ? h2.defaultView || h2.parentWindow : window;
                if (k2) {
                  if (n = c.relatedTarget || c.toElement, k2 = d2, n = n ? Wc(n) : null, null !== n && (J = Vb(n), n !== J || 5 !== n.tag && 6 !== n.tag)) n = null;
                } else k2 = null, n = d2;
                if (k2 !== n) {
                  t = Bd;
                  F = "onMouseLeave";
                  x = "onMouseEnter";
                  w = "mouse";
                  if ("pointerout" === a || "pointerover" === a) t = Td, F = "onPointerLeave", x = "onPointerEnter", w = "pointer";
                  J = null == k2 ? h2 : ue(k2);
                  u = null == n ? h2 : ue(n);
                  h2 = new t(F, w + "leave", k2, c, e2);
                  h2.target = J;
                  h2.relatedTarget = u;
                  F = null;
                  Wc(e2) === d2 && (t = new t(x, w + "enter", n, c, e2), t.target = u, t.relatedTarget = J, F = t);
                  J = F;
                  if (k2 && n) b: {
                    t = k2;
                    x = n;
                    w = 0;
                    for (u = t; u; u = vf(u)) w++;
                    u = 0;
                    for (F = x; F; F = vf(F)) u++;
                    for (; 0 < w - u; ) t = vf(t), w--;
                    for (; 0 < u - w; ) x = vf(x), u--;
                    for (; w--; ) {
                      if (t === x || null !== x && t === x.alternate) break b;
                      t = vf(t);
                      x = vf(x);
                    }
                    t = null;
                  }
                  else t = null;
                  null !== k2 && wf(g2, h2, k2, t, false);
                  null !== n && null !== J && wf(g2, J, n, t, true);
                }
              }
            }
            a: {
              h2 = d2 ? ue(d2) : window;
              k2 = h2.nodeName && h2.nodeName.toLowerCase();
              if ("select" === k2 || "input" === k2 && "file" === h2.type) var na = ve;
              else if (me(h2)) if (we) na = Fe;
              else {
                na = De;
                var xa = Ce;
              }
              else (k2 = h2.nodeName) && "input" === k2.toLowerCase() && ("checkbox" === h2.type || "radio" === h2.type) && (na = Ee);
              if (na && (na = na(a, d2))) {
                ne(g2, na, c, e2);
                break a;
              }
              xa && xa(a, h2, d2);
              "focusout" === a && (xa = h2._wrapperState) && xa.controlled && "number" === h2.type && cb(h2, "number", h2.value);
            }
            xa = d2 ? ue(d2) : window;
            switch (a) {
              case "focusin":
                if (me(xa) || "true" === xa.contentEditable) Qe = xa, Re = d2, Se = null;
                break;
              case "focusout":
                Se = Re = Qe = null;
                break;
              case "mousedown":
                Te = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                Te = false;
                Ue(g2, c, e2);
                break;
              case "selectionchange":
                if (Pe) break;
              case "keydown":
              case "keyup":
                Ue(g2, c, e2);
            }
            var $a;
            if (ae) b: {
              switch (a) {
                case "compositionstart":
                  var ba = "onCompositionStart";
                  break b;
                case "compositionend":
                  ba = "onCompositionEnd";
                  break b;
                case "compositionupdate":
                  ba = "onCompositionUpdate";
                  break b;
              }
              ba = void 0;
            }
            else ie ? ge(a, c) && (ba = "onCompositionEnd") : "keydown" === a && 229 === c.keyCode && (ba = "onCompositionStart");
            ba && (de && "ko" !== c.locale && (ie || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie && ($a = nd()) : (kd = e2, ld = "value" in kd ? kd.value : kd.textContent, ie = true)), xa = oe(d2, ba), 0 < xa.length && (ba = new Ld(ba, a, null, c, e2), g2.push({ event: ba, listeners: xa }), $a ? ba.data = $a : ($a = he(c), null !== $a && (ba.data = $a))));
            if ($a = ce ? je(a, c) : ke(a, c)) d2 = oe(d2, "onBeforeInput"), 0 < d2.length && (e2 = new Ld("onBeforeInput", "beforeinput", null, c, e2), g2.push({ event: e2, listeners: d2 }), e2.data = $a);
          }
          se(g2, b);
        });
      }
      function tf(a, b, c) {
        return { instance: a, listener: b, currentTarget: c };
      }
      function oe(a, b) {
        for (var c = b + "Capture", d = []; null !== a; ) {
          var e = a, f = e.stateNode;
          5 === e.tag && null !== f && (e = f, f = Kb(a, c), null != f && d.unshift(tf(a, f, e)), f = Kb(a, b), null != f && d.push(tf(a, f, e)));
          a = a.return;
        }
        return d;
      }
      function vf(a) {
        if (null === a) return null;
        do
          a = a.return;
        while (a && 5 !== a.tag);
        return a ? a : null;
      }
      function wf(a, b, c, d, e) {
        for (var f = b._reactName, g = []; null !== c && c !== d; ) {
          var h = c, k = h.alternate, l = h.stateNode;
          if (null !== k && k === d) break;
          5 === h.tag && null !== l && (h = l, e ? (k = Kb(c, f), null != k && g.unshift(tf(c, k, h))) : e || (k = Kb(c, f), null != k && g.push(tf(c, k, h))));
          c = c.return;
        }
        0 !== g.length && a.push({ event: b, listeners: g });
      }
      var xf = /\r\n?/g;
      var yf = /\u0000|\uFFFD/g;
      function zf(a) {
        return ("string" === typeof a ? a : "" + a).replace(xf, "\n").replace(yf, "");
      }
      function Af(a, b, c) {
        b = zf(b);
        if (zf(a) !== b && c) throw Error(p(425));
      }
      function Bf() {
      }
      var Cf = null;
      var Df = null;
      function Ef(a, b) {
        return "textarea" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;
      }
      var Ff = "function" === typeof setTimeout ? setTimeout : void 0;
      var Gf = "function" === typeof clearTimeout ? clearTimeout : void 0;
      var Hf = "function" === typeof Promise ? Promise : void 0;
      var Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function(a) {
        return Hf.resolve(null).then(a).catch(If);
      } : Ff;
      function If(a) {
        setTimeout(function() {
          throw a;
        });
      }
      function Kf(a, b) {
        var c = b, d = 0;
        do {
          var e = c.nextSibling;
          a.removeChild(c);
          if (e && 8 === e.nodeType) if (c = e.data, "/$" === c) {
            if (0 === d) {
              a.removeChild(e);
              bd(b);
              return;
            }
            d--;
          } else "$" !== c && "$?" !== c && "$!" !== c || d++;
          c = e;
        } while (c);
        bd(b);
      }
      function Lf(a) {
        for (; null != a; a = a.nextSibling) {
          var b = a.nodeType;
          if (1 === b || 3 === b) break;
          if (8 === b) {
            b = a.data;
            if ("$" === b || "$!" === b || "$?" === b) break;
            if ("/$" === b) return null;
          }
        }
        return a;
      }
      function Mf(a) {
        a = a.previousSibling;
        for (var b = 0; a; ) {
          if (8 === a.nodeType) {
            var c = a.data;
            if ("$" === c || "$!" === c || "$?" === c) {
              if (0 === b) return a;
              b--;
            } else "/$" === c && b++;
          }
          a = a.previousSibling;
        }
        return null;
      }
      var Nf = Math.random().toString(36).slice(2);
      var Of = "__reactFiber$" + Nf;
      var Pf = "__reactProps$" + Nf;
      var uf = "__reactContainer$" + Nf;
      var of = "__reactEvents$" + Nf;
      var Qf = "__reactListeners$" + Nf;
      var Rf = "__reactHandles$" + Nf;
      function Wc(a) {
        var b = a[Of];
        if (b) return b;
        for (var c = a.parentNode; c; ) {
          if (b = c[uf] || c[Of]) {
            c = b.alternate;
            if (null !== b.child || null !== c && null !== c.child) for (a = Mf(a); null !== a; ) {
              if (c = a[Of]) return c;
              a = Mf(a);
            }
            return b;
          }
          a = c;
          c = a.parentNode;
        }
        return null;
      }
      function Cb(a) {
        a = a[Of] || a[uf];
        return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
      }
      function ue(a) {
        if (5 === a.tag || 6 === a.tag) return a.stateNode;
        throw Error(p(33));
      }
      function Db(a) {
        return a[Pf] || null;
      }
      var Sf = [];
      var Tf = -1;
      function Uf(a) {
        return { current: a };
      }
      function E(a) {
        0 > Tf || (a.current = Sf[Tf], Sf[Tf] = null, Tf--);
      }
      function G(a, b) {
        Tf++;
        Sf[Tf] = a.current;
        a.current = b;
      }
      var Vf = {};
      var H = Uf(Vf);
      var Wf = Uf(false);
      var Xf = Vf;
      function Yf(a, b) {
        var c = a.type.contextTypes;
        if (!c) return Vf;
        var d = a.stateNode;
        if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;
        var e = {}, f;
        for (f in c) e[f] = b[f];
        d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);
        return e;
      }
      function Zf(a) {
        a = a.childContextTypes;
        return null !== a && void 0 !== a;
      }
      function $f() {
        E(Wf);
        E(H);
      }
      function ag(a, b, c) {
        if (H.current !== Vf) throw Error(p(168));
        G(H, b);
        G(Wf, c);
      }
      function bg(a, b, c) {
        var d = a.stateNode;
        b = b.childContextTypes;
        if ("function" !== typeof d.getChildContext) return c;
        d = d.getChildContext();
        for (var e in d) if (!(e in b)) throw Error(p(108, Ra(a) || "Unknown", e));
        return A({}, c, d);
      }
      function cg(a) {
        a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Vf;
        Xf = H.current;
        G(H, a);
        G(Wf, Wf.current);
        return true;
      }
      function dg(a, b, c) {
        var d = a.stateNode;
        if (!d) throw Error(p(169));
        c ? (a = bg(a, b, Xf), d.__reactInternalMemoizedMergedChildContext = a, E(Wf), E(H), G(H, a)) : E(Wf);
        G(Wf, c);
      }
      var eg = null;
      var fg = false;
      var gg = false;
      function hg(a) {
        null === eg ? eg = [a] : eg.push(a);
      }
      function ig(a) {
        fg = true;
        hg(a);
      }
      function jg() {
        if (!gg && null !== eg) {
          gg = true;
          var a = 0, b = C;
          try {
            var c = eg;
            for (C = 1; a < c.length; a++) {
              var d = c[a];
              do
                d = d(true);
              while (null !== d);
            }
            eg = null;
            fg = false;
          } catch (e) {
            throw null !== eg && (eg = eg.slice(a + 1)), ac(fc, jg), e;
          } finally {
            C = b, gg = false;
          }
        }
        return null;
      }
      var kg = [];
      var lg = 0;
      var mg = null;
      var ng = 0;
      var og = [];
      var pg = 0;
      var qg = null;
      var rg = 1;
      var sg = "";
      function tg(a, b) {
        kg[lg++] = ng;
        kg[lg++] = mg;
        mg = a;
        ng = b;
      }
      function ug(a, b, c) {
        og[pg++] = rg;
        og[pg++] = sg;
        og[pg++] = qg;
        qg = a;
        var d = rg;
        a = sg;
        var e = 32 - oc(d) - 1;
        d &= ~(1 << e);
        c += 1;
        var f = 32 - oc(b) + e;
        if (30 < f) {
          var g = e - e % 5;
          f = (d & (1 << g) - 1).toString(32);
          d >>= g;
          e -= g;
          rg = 1 << 32 - oc(b) + e | c << e | d;
          sg = f + a;
        } else rg = 1 << f | c << e | d, sg = a;
      }
      function vg(a) {
        null !== a.return && (tg(a, 1), ug(a, 1, 0));
      }
      function wg(a) {
        for (; a === mg; ) mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;
        for (; a === qg; ) qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
      }
      var xg = null;
      var yg = null;
      var I = false;
      var zg = null;
      function Ag(a, b) {
        var c = Bg(5, null, null, 0);
        c.elementType = "DELETED";
        c.stateNode = b;
        c.return = a;
        b = a.deletions;
        null === b ? (a.deletions = [c], a.flags |= 16) : b.push(c);
      }
      function Cg(a, b) {
        switch (a.tag) {
          case 5:
            var c = a.type;
            b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;
            return null !== b ? (a.stateNode = b, xg = a, yg = Lf(b.firstChild), true) : false;
          case 6:
            return b = "" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, xg = a, yg = null, true) : false;
          case 13:
            return b = 8 !== b.nodeType ? null : b, null !== b ? (c = null !== qg ? { id: rg, overflow: sg } : null, a.memoizedState = { dehydrated: b, treeContext: c, retryLane: 1073741824 }, c = Bg(18, null, null, 0), c.stateNode = b, c.return = a, a.child = c, xg = a, yg = null, true) : false;
          default:
            return false;
        }
      }
      function Dg(a) {
        return 0 !== (a.mode & 1) && 0 === (a.flags & 128);
      }
      function Eg(a) {
        if (I) {
          var b = yg;
          if (b) {
            var c = b;
            if (!Cg(a, b)) {
              if (Dg(a)) throw Error(p(418));
              b = Lf(c.nextSibling);
              var d = xg;
              b && Cg(a, b) ? Ag(d, c) : (a.flags = a.flags & -4097 | 2, I = false, xg = a);
            }
          } else {
            if (Dg(a)) throw Error(p(418));
            a.flags = a.flags & -4097 | 2;
            I = false;
            xg = a;
          }
        }
      }
      function Fg(a) {
        for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag; ) a = a.return;
        xg = a;
      }
      function Gg(a) {
        if (a !== xg) return false;
        if (!I) return Fg(a), I = true, false;
        var b;
        (b = 3 !== a.tag) && !(b = 5 !== a.tag) && (b = a.type, b = "head" !== b && "body" !== b && !Ef(a.type, a.memoizedProps));
        if (b && (b = yg)) {
          if (Dg(a)) throw Hg(), Error(p(418));
          for (; b; ) Ag(a, b), b = Lf(b.nextSibling);
        }
        Fg(a);
        if (13 === a.tag) {
          a = a.memoizedState;
          a = null !== a ? a.dehydrated : null;
          if (!a) throw Error(p(317));
          a: {
            a = a.nextSibling;
            for (b = 0; a; ) {
              if (8 === a.nodeType) {
                var c = a.data;
                if ("/$" === c) {
                  if (0 === b) {
                    yg = Lf(a.nextSibling);
                    break a;
                  }
                  b--;
                } else "$" !== c && "$!" !== c && "$?" !== c || b++;
              }
              a = a.nextSibling;
            }
            yg = null;
          }
        } else yg = xg ? Lf(a.stateNode.nextSibling) : null;
        return true;
      }
      function Hg() {
        for (var a = yg; a; ) a = Lf(a.nextSibling);
      }
      function Ig() {
        yg = xg = null;
        I = false;
      }
      function Jg(a) {
        null === zg ? zg = [a] : zg.push(a);
      }
      var Kg = ua.ReactCurrentBatchConfig;
      function Lg(a, b, c) {
        a = c.ref;
        if (null !== a && "function" !== typeof a && "object" !== typeof a) {
          if (c._owner) {
            c = c._owner;
            if (c) {
              if (1 !== c.tag) throw Error(p(309));
              var d = c.stateNode;
            }
            if (!d) throw Error(p(147, a));
            var e = d, f = "" + a;
            if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === f) return b.ref;
            b = function(a2) {
              var b2 = e.refs;
              null === a2 ? delete b2[f] : b2[f] = a2;
            };
            b._stringRef = f;
            return b;
          }
          if ("string" !== typeof a) throw Error(p(284));
          if (!c._owner) throw Error(p(290, a));
        }
        return a;
      }
      function Mg(a, b) {
        a = Object.prototype.toString.call(b);
        throw Error(p(31, "[object Object]" === a ? "object with keys {" + Object.keys(b).join(", ") + "}" : a));
      }
      function Ng(a) {
        var b = a._init;
        return b(a._payload);
      }
      function Og(a) {
        function b(b2, c2) {
          if (a) {
            var d2 = b2.deletions;
            null === d2 ? (b2.deletions = [c2], b2.flags |= 16) : d2.push(c2);
          }
        }
        function c(c2, d2) {
          if (!a) return null;
          for (; null !== d2; ) b(c2, d2), d2 = d2.sibling;
          return null;
        }
        function d(a2, b2) {
          for (a2 = /* @__PURE__ */ new Map(); null !== b2; ) null !== b2.key ? a2.set(b2.key, b2) : a2.set(b2.index, b2), b2 = b2.sibling;
          return a2;
        }
        function e(a2, b2) {
          a2 = Pg(a2, b2);
          a2.index = 0;
          a2.sibling = null;
          return a2;
        }
        function f(b2, c2, d2) {
          b2.index = d2;
          if (!a) return b2.flags |= 1048576, c2;
          d2 = b2.alternate;
          if (null !== d2) return d2 = d2.index, d2 < c2 ? (b2.flags |= 2, c2) : d2;
          b2.flags |= 2;
          return c2;
        }
        function g(b2) {
          a && null === b2.alternate && (b2.flags |= 2);
          return b2;
        }
        function h(a2, b2, c2, d2) {
          if (null === b2 || 6 !== b2.tag) return b2 = Qg(c2, a2.mode, d2), b2.return = a2, b2;
          b2 = e(b2, c2);
          b2.return = a2;
          return b2;
        }
        function k(a2, b2, c2, d2) {
          var f2 = c2.type;
          if (f2 === ya) return m(a2, b2, c2.props.children, d2, c2.key);
          if (null !== b2 && (b2.elementType === f2 || "object" === typeof f2 && null !== f2 && f2.$$typeof === Ha && Ng(f2) === b2.type)) return d2 = e(b2, c2.props), d2.ref = Lg(a2, b2, c2), d2.return = a2, d2;
          d2 = Rg(c2.type, c2.key, c2.props, null, a2.mode, d2);
          d2.ref = Lg(a2, b2, c2);
          d2.return = a2;
          return d2;
        }
        function l(a2, b2, c2, d2) {
          if (null === b2 || 4 !== b2.tag || b2.stateNode.containerInfo !== c2.containerInfo || b2.stateNode.implementation !== c2.implementation) return b2 = Sg(c2, a2.mode, d2), b2.return = a2, b2;
          b2 = e(b2, c2.children || []);
          b2.return = a2;
          return b2;
        }
        function m(a2, b2, c2, d2, f2) {
          if (null === b2 || 7 !== b2.tag) return b2 = Tg(c2, a2.mode, d2, f2), b2.return = a2, b2;
          b2 = e(b2, c2);
          b2.return = a2;
          return b2;
        }
        function q(a2, b2, c2) {
          if ("string" === typeof b2 && "" !== b2 || "number" === typeof b2) return b2 = Qg("" + b2, a2.mode, c2), b2.return = a2, b2;
          if ("object" === typeof b2 && null !== b2) {
            switch (b2.$$typeof) {
              case va:
                return c2 = Rg(b2.type, b2.key, b2.props, null, a2.mode, c2), c2.ref = Lg(a2, null, b2), c2.return = a2, c2;
              case wa:
                return b2 = Sg(b2, a2.mode, c2), b2.return = a2, b2;
              case Ha:
                var d2 = b2._init;
                return q(a2, d2(b2._payload), c2);
            }
            if (eb(b2) || Ka(b2)) return b2 = Tg(b2, a2.mode, c2, null), b2.return = a2, b2;
            Mg(a2, b2);
          }
          return null;
        }
        function r(a2, b2, c2, d2) {
          var e2 = null !== b2 ? b2.key : null;
          if ("string" === typeof c2 && "" !== c2 || "number" === typeof c2) return null !== e2 ? null : h(a2, b2, "" + c2, d2);
          if ("object" === typeof c2 && null !== c2) {
            switch (c2.$$typeof) {
              case va:
                return c2.key === e2 ? k(a2, b2, c2, d2) : null;
              case wa:
                return c2.key === e2 ? l(a2, b2, c2, d2) : null;
              case Ha:
                return e2 = c2._init, r(
                  a2,
                  b2,
                  e2(c2._payload),
                  d2
                );
            }
            if (eb(c2) || Ka(c2)) return null !== e2 ? null : m(a2, b2, c2, d2, null);
            Mg(a2, c2);
          }
          return null;
        }
        function y(a2, b2, c2, d2, e2) {
          if ("string" === typeof d2 && "" !== d2 || "number" === typeof d2) return a2 = a2.get(c2) || null, h(b2, a2, "" + d2, e2);
          if ("object" === typeof d2 && null !== d2) {
            switch (d2.$$typeof) {
              case va:
                return a2 = a2.get(null === d2.key ? c2 : d2.key) || null, k(b2, a2, d2, e2);
              case wa:
                return a2 = a2.get(null === d2.key ? c2 : d2.key) || null, l(b2, a2, d2, e2);
              case Ha:
                var f2 = d2._init;
                return y(a2, b2, c2, f2(d2._payload), e2);
            }
            if (eb(d2) || Ka(d2)) return a2 = a2.get(c2) || null, m(b2, a2, d2, e2, null);
            Mg(b2, d2);
          }
          return null;
        }
        function n(e2, g2, h2, k2) {
          for (var l2 = null, m2 = null, u = g2, w = g2 = 0, x = null; null !== u && w < h2.length; w++) {
            u.index > w ? (x = u, u = null) : x = u.sibling;
            var n2 = r(e2, u, h2[w], k2);
            if (null === n2) {
              null === u && (u = x);
              break;
            }
            a && u && null === n2.alternate && b(e2, u);
            g2 = f(n2, g2, w);
            null === m2 ? l2 = n2 : m2.sibling = n2;
            m2 = n2;
            u = x;
          }
          if (w === h2.length) return c(e2, u), I && tg(e2, w), l2;
          if (null === u) {
            for (; w < h2.length; w++) u = q(e2, h2[w], k2), null !== u && (g2 = f(u, g2, w), null === m2 ? l2 = u : m2.sibling = u, m2 = u);
            I && tg(e2, w);
            return l2;
          }
          for (u = d(e2, u); w < h2.length; w++) x = y(u, e2, w, h2[w], k2), null !== x && (a && null !== x.alternate && u.delete(null === x.key ? w : x.key), g2 = f(x, g2, w), null === m2 ? l2 = x : m2.sibling = x, m2 = x);
          a && u.forEach(function(a2) {
            return b(e2, a2);
          });
          I && tg(e2, w);
          return l2;
        }
        function t(e2, g2, h2, k2) {
          var l2 = Ka(h2);
          if ("function" !== typeof l2) throw Error(p(150));
          h2 = l2.call(h2);
          if (null == h2) throw Error(p(151));
          for (var u = l2 = null, m2 = g2, w = g2 = 0, x = null, n2 = h2.next(); null !== m2 && !n2.done; w++, n2 = h2.next()) {
            m2.index > w ? (x = m2, m2 = null) : x = m2.sibling;
            var t2 = r(e2, m2, n2.value, k2);
            if (null === t2) {
              null === m2 && (m2 = x);
              break;
            }
            a && m2 && null === t2.alternate && b(e2, m2);
            g2 = f(t2, g2, w);
            null === u ? l2 = t2 : u.sibling = t2;
            u = t2;
            m2 = x;
          }
          if (n2.done) return c(
            e2,
            m2
          ), I && tg(e2, w), l2;
          if (null === m2) {
            for (; !n2.done; w++, n2 = h2.next()) n2 = q(e2, n2.value, k2), null !== n2 && (g2 = f(n2, g2, w), null === u ? l2 = n2 : u.sibling = n2, u = n2);
            I && tg(e2, w);
            return l2;
          }
          for (m2 = d(e2, m2); !n2.done; w++, n2 = h2.next()) n2 = y(m2, e2, w, n2.value, k2), null !== n2 && (a && null !== n2.alternate && m2.delete(null === n2.key ? w : n2.key), g2 = f(n2, g2, w), null === u ? l2 = n2 : u.sibling = n2, u = n2);
          a && m2.forEach(function(a2) {
            return b(e2, a2);
          });
          I && tg(e2, w);
          return l2;
        }
        function J(a2, d2, f2, h2) {
          "object" === typeof f2 && null !== f2 && f2.type === ya && null === f2.key && (f2 = f2.props.children);
          if ("object" === typeof f2 && null !== f2) {
            switch (f2.$$typeof) {
              case va:
                a: {
                  for (var k2 = f2.key, l2 = d2; null !== l2; ) {
                    if (l2.key === k2) {
                      k2 = f2.type;
                      if (k2 === ya) {
                        if (7 === l2.tag) {
                          c(a2, l2.sibling);
                          d2 = e(l2, f2.props.children);
                          d2.return = a2;
                          a2 = d2;
                          break a;
                        }
                      } else if (l2.elementType === k2 || "object" === typeof k2 && null !== k2 && k2.$$typeof === Ha && Ng(k2) === l2.type) {
                        c(a2, l2.sibling);
                        d2 = e(l2, f2.props);
                        d2.ref = Lg(a2, l2, f2);
                        d2.return = a2;
                        a2 = d2;
                        break a;
                      }
                      c(a2, l2);
                      break;
                    } else b(a2, l2);
                    l2 = l2.sibling;
                  }
                  f2.type === ya ? (d2 = Tg(f2.props.children, a2.mode, h2, f2.key), d2.return = a2, a2 = d2) : (h2 = Rg(f2.type, f2.key, f2.props, null, a2.mode, h2), h2.ref = Lg(a2, d2, f2), h2.return = a2, a2 = h2);
                }
                return g(a2);
              case wa:
                a: {
                  for (l2 = f2.key; null !== d2; ) {
                    if (d2.key === l2) if (4 === d2.tag && d2.stateNode.containerInfo === f2.containerInfo && d2.stateNode.implementation === f2.implementation) {
                      c(a2, d2.sibling);
                      d2 = e(d2, f2.children || []);
                      d2.return = a2;
                      a2 = d2;
                      break a;
                    } else {
                      c(a2, d2);
                      break;
                    }
                    else b(a2, d2);
                    d2 = d2.sibling;
                  }
                  d2 = Sg(f2, a2.mode, h2);
                  d2.return = a2;
                  a2 = d2;
                }
                return g(a2);
              case Ha:
                return l2 = f2._init, J(a2, d2, l2(f2._payload), h2);
            }
            if (eb(f2)) return n(a2, d2, f2, h2);
            if (Ka(f2)) return t(a2, d2, f2, h2);
            Mg(a2, f2);
          }
          return "string" === typeof f2 && "" !== f2 || "number" === typeof f2 ? (f2 = "" + f2, null !== d2 && 6 === d2.tag ? (c(a2, d2.sibling), d2 = e(d2, f2), d2.return = a2, a2 = d2) : (c(a2, d2), d2 = Qg(f2, a2.mode, h2), d2.return = a2, a2 = d2), g(a2)) : c(a2, d2);
        }
        return J;
      }
      var Ug = Og(true);
      var Vg = Og(false);
      var Wg = Uf(null);
      var Xg = null;
      var Yg = null;
      var Zg = null;
      function $g() {
        Zg = Yg = Xg = null;
      }
      function ah(a) {
        var b = Wg.current;
        E(Wg);
        a._currentValue = b;
      }
      function bh(a, b, c) {
        for (; null !== a; ) {
          var d = a.alternate;
          (a.childLanes & b) !== b ? (a.childLanes |= b, null !== d && (d.childLanes |= b)) : null !== d && (d.childLanes & b) !== b && (d.childLanes |= b);
          if (a === c) break;
          a = a.return;
        }
      }
      function ch(a, b) {
        Xg = a;
        Zg = Yg = null;
        a = a.dependencies;
        null !== a && null !== a.firstContext && (0 !== (a.lanes & b) && (dh = true), a.firstContext = null);
      }
      function eh(a) {
        var b = a._currentValue;
        if (Zg !== a) if (a = { context: a, memoizedValue: b, next: null }, null === Yg) {
          if (null === Xg) throw Error(p(308));
          Yg = a;
          Xg.dependencies = { lanes: 0, firstContext: a };
        } else Yg = Yg.next = a;
        return b;
      }
      var fh = null;
      function gh(a) {
        null === fh ? fh = [a] : fh.push(a);
      }
      function hh(a, b, c, d) {
        var e = b.interleaved;
        null === e ? (c.next = c, gh(b)) : (c.next = e.next, e.next = c);
        b.interleaved = c;
        return ih(a, d);
      }
      function ih(a, b) {
        a.lanes |= b;
        var c = a.alternate;
        null !== c && (c.lanes |= b);
        c = a;
        for (a = a.return; null !== a; ) a.childLanes |= b, c = a.alternate, null !== c && (c.childLanes |= b), c = a, a = a.return;
        return 3 === c.tag ? c.stateNode : null;
      }
      var jh = false;
      function kh(a) {
        a.updateQueue = { baseState: a.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
      }
      function lh(a, b) {
        a = a.updateQueue;
        b.updateQueue === a && (b.updateQueue = { baseState: a.baseState, firstBaseUpdate: a.firstBaseUpdate, lastBaseUpdate: a.lastBaseUpdate, shared: a.shared, effects: a.effects });
      }
      function mh(a, b) {
        return { eventTime: a, lane: b, tag: 0, payload: null, callback: null, next: null };
      }
      function nh(a, b, c) {
        var d = a.updateQueue;
        if (null === d) return null;
        d = d.shared;
        if (0 !== (K & 2)) {
          var e = d.pending;
          null === e ? b.next = b : (b.next = e.next, e.next = b);
          d.pending = b;
          return ih(a, c);
        }
        e = d.interleaved;
        null === e ? (b.next = b, gh(d)) : (b.next = e.next, e.next = b);
        d.interleaved = b;
        return ih(a, c);
      }
      function oh(a, b, c) {
        b = b.updateQueue;
        if (null !== b && (b = b.shared, 0 !== (c & 4194240))) {
          var d = b.lanes;
          d &= a.pendingLanes;
          c |= d;
          b.lanes = c;
          Cc(a, c);
        }
      }
      function ph(a, b) {
        var c = a.updateQueue, d = a.alternate;
        if (null !== d && (d = d.updateQueue, c === d)) {
          var e = null, f = null;
          c = c.firstBaseUpdate;
          if (null !== c) {
            do {
              var g = { eventTime: c.eventTime, lane: c.lane, tag: c.tag, payload: c.payload, callback: c.callback, next: null };
              null === f ? e = f = g : f = f.next = g;
              c = c.next;
            } while (null !== c);
            null === f ? e = f = b : f = f.next = b;
          } else e = f = b;
          c = { baseState: d.baseState, firstBaseUpdate: e, lastBaseUpdate: f, shared: d.shared, effects: d.effects };
          a.updateQueue = c;
          return;
        }
        a = c.lastBaseUpdate;
        null === a ? c.firstBaseUpdate = b : a.next = b;
        c.lastBaseUpdate = b;
      }
      function qh(a, b, c, d) {
        var e = a.updateQueue;
        jh = false;
        var f = e.firstBaseUpdate, g = e.lastBaseUpdate, h = e.shared.pending;
        if (null !== h) {
          e.shared.pending = null;
          var k = h, l = k.next;
          k.next = null;
          null === g ? f = l : g.next = l;
          g = k;
          var m = a.alternate;
          null !== m && (m = m.updateQueue, h = m.lastBaseUpdate, h !== g && (null === h ? m.firstBaseUpdate = l : h.next = l, m.lastBaseUpdate = k));
        }
        if (null !== f) {
          var q = e.baseState;
          g = 0;
          m = l = k = null;
          h = f;
          do {
            var r = h.lane, y = h.eventTime;
            if ((d & r) === r) {
              null !== m && (m = m.next = {
                eventTime: y,
                lane: 0,
                tag: h.tag,
                payload: h.payload,
                callback: h.callback,
                next: null
              });
              a: {
                var n = a, t = h;
                r = b;
                y = c;
                switch (t.tag) {
                  case 1:
                    n = t.payload;
                    if ("function" === typeof n) {
                      q = n.call(y, q, r);
                      break a;
                    }
                    q = n;
                    break a;
                  case 3:
                    n.flags = n.flags & -65537 | 128;
                  case 0:
                    n = t.payload;
                    r = "function" === typeof n ? n.call(y, q, r) : n;
                    if (null === r || void 0 === r) break a;
                    q = A({}, q, r);
                    break a;
                  case 2:
                    jh = true;
                }
              }
              null !== h.callback && 0 !== h.lane && (a.flags |= 64, r = e.effects, null === r ? e.effects = [h] : r.push(h));
            } else y = { eventTime: y, lane: r, tag: h.tag, payload: h.payload, callback: h.callback, next: null }, null === m ? (l = m = y, k = q) : m = m.next = y, g |= r;
            h = h.next;
            if (null === h) if (h = e.shared.pending, null === h) break;
            else r = h, h = r.next, r.next = null, e.lastBaseUpdate = r, e.shared.pending = null;
          } while (1);
          null === m && (k = q);
          e.baseState = k;
          e.firstBaseUpdate = l;
          e.lastBaseUpdate = m;
          b = e.shared.interleaved;
          if (null !== b) {
            e = b;
            do
              g |= e.lane, e = e.next;
            while (e !== b);
          } else null === f && (e.shared.lanes = 0);
          rh |= g;
          a.lanes = g;
          a.memoizedState = q;
        }
      }
      function sh(a, b, c) {
        a = b.effects;
        b.effects = null;
        if (null !== a) for (b = 0; b < a.length; b++) {
          var d = a[b], e = d.callback;
          if (null !== e) {
            d.callback = null;
            d = c;
            if ("function" !== typeof e) throw Error(p(191, e));
            e.call(d);
          }
        }
      }
      var th = {};
      var uh = Uf(th);
      var vh = Uf(th);
      var wh = Uf(th);
      function xh(a) {
        if (a === th) throw Error(p(174));
        return a;
      }
      function yh(a, b) {
        G(wh, b);
        G(vh, a);
        G(uh, th);
        a = b.nodeType;
        switch (a) {
          case 9:
          case 11:
            b = (b = b.documentElement) ? b.namespaceURI : lb(null, "");
            break;
          default:
            a = 8 === a ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = lb(b, a);
        }
        E(uh);
        G(uh, b);
      }
      function zh() {
        E(uh);
        E(vh);
        E(wh);
      }
      function Ah(a) {
        xh(wh.current);
        var b = xh(uh.current);
        var c = lb(b, a.type);
        b !== c && (G(vh, a), G(uh, c));
      }
      function Bh(a) {
        vh.current === a && (E(uh), E(vh));
      }
      var L = Uf(0);
      function Ch(a) {
        for (var b = a; null !== b; ) {
          if (13 === b.tag) {
            var c = b.memoizedState;
            if (null !== c && (c = c.dehydrated, null === c || "$?" === c.data || "$!" === c.data)) return b;
          } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {
            if (0 !== (b.flags & 128)) return b;
          } else if (null !== b.child) {
            b.child.return = b;
            b = b.child;
            continue;
          }
          if (b === a) break;
          for (; null === b.sibling; ) {
            if (null === b.return || b.return === a) return null;
            b = b.return;
          }
          b.sibling.return = b.return;
          b = b.sibling;
        }
        return null;
      }
      var Dh = [];
      function Eh() {
        for (var a = 0; a < Dh.length; a++) Dh[a]._workInProgressVersionPrimary = null;
        Dh.length = 0;
      }
      var Fh = ua.ReactCurrentDispatcher;
      var Gh = ua.ReactCurrentBatchConfig;
      var Hh = 0;
      var M = null;
      var N = null;
      var O = null;
      var Ih = false;
      var Jh = false;
      var Kh = 0;
      var Lh = 0;
      function P() {
        throw Error(p(321));
      }
      function Mh(a, b) {
        if (null === b) return false;
        for (var c = 0; c < b.length && c < a.length; c++) if (!He(a[c], b[c])) return false;
        return true;
      }
      function Nh(a, b, c, d, e, f) {
        Hh = f;
        M = b;
        b.memoizedState = null;
        b.updateQueue = null;
        b.lanes = 0;
        Fh.current = null === a || null === a.memoizedState ? Oh : Ph;
        a = c(d, e);
        if (Jh) {
          f = 0;
          do {
            Jh = false;
            Kh = 0;
            if (25 <= f) throw Error(p(301));
            f += 1;
            O = N = null;
            b.updateQueue = null;
            Fh.current = Qh;
            a = c(d, e);
          } while (Jh);
        }
        Fh.current = Rh;
        b = null !== N && null !== N.next;
        Hh = 0;
        O = N = M = null;
        Ih = false;
        if (b) throw Error(p(300));
        return a;
      }
      function Sh() {
        var a = 0 !== Kh;
        Kh = 0;
        return a;
      }
      function Th() {
        var a = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
        null === O ? M.memoizedState = O = a : O = O.next = a;
        return O;
      }
      function Uh() {
        if (null === N) {
          var a = M.alternate;
          a = null !== a ? a.memoizedState : null;
        } else a = N.next;
        var b = null === O ? M.memoizedState : O.next;
        if (null !== b) O = b, N = a;
        else {
          if (null === a) throw Error(p(310));
          N = a;
          a = { memoizedState: N.memoizedState, baseState: N.baseState, baseQueue: N.baseQueue, queue: N.queue, next: null };
          null === O ? M.memoizedState = O = a : O = O.next = a;
        }
        return O;
      }
      function Vh(a, b) {
        return "function" === typeof b ? b(a) : b;
      }
      function Wh(a) {
        var b = Uh(), c = b.queue;
        if (null === c) throw Error(p(311));
        c.lastRenderedReducer = a;
        var d = N, e = d.baseQueue, f = c.pending;
        if (null !== f) {
          if (null !== e) {
            var g = e.next;
            e.next = f.next;
            f.next = g;
          }
          d.baseQueue = e = f;
          c.pending = null;
        }
        if (null !== e) {
          f = e.next;
          d = d.baseState;
          var h = g = null, k = null, l = f;
          do {
            var m = l.lane;
            if ((Hh & m) === m) null !== k && (k = k.next = { lane: 0, action: l.action, hasEagerState: l.hasEagerState, eagerState: l.eagerState, next: null }), d = l.hasEagerState ? l.eagerState : a(d, l.action);
            else {
              var q = {
                lane: m,
                action: l.action,
                hasEagerState: l.hasEagerState,
                eagerState: l.eagerState,
                next: null
              };
              null === k ? (h = k = q, g = d) : k = k.next = q;
              M.lanes |= m;
              rh |= m;
            }
            l = l.next;
          } while (null !== l && l !== f);
          null === k ? g = d : k.next = h;
          He(d, b.memoizedState) || (dh = true);
          b.memoizedState = d;
          b.baseState = g;
          b.baseQueue = k;
          c.lastRenderedState = d;
        }
        a = c.interleaved;
        if (null !== a) {
          e = a;
          do
            f = e.lane, M.lanes |= f, rh |= f, e = e.next;
          while (e !== a);
        } else null === e && (c.lanes = 0);
        return [b.memoizedState, c.dispatch];
      }
      function Xh(a) {
        var b = Uh(), c = b.queue;
        if (null === c) throw Error(p(311));
        c.lastRenderedReducer = a;
        var d = c.dispatch, e = c.pending, f = b.memoizedState;
        if (null !== e) {
          c.pending = null;
          var g = e = e.next;
          do
            f = a(f, g.action), g = g.next;
          while (g !== e);
          He(f, b.memoizedState) || (dh = true);
          b.memoizedState = f;
          null === b.baseQueue && (b.baseState = f);
          c.lastRenderedState = f;
        }
        return [f, d];
      }
      function Yh() {
      }
      function Zh(a, b) {
        var c = M, d = Uh(), e = b(), f = !He(d.memoizedState, e);
        f && (d.memoizedState = e, dh = true);
        d = d.queue;
        $h(ai.bind(null, c, d, a), [a]);
        if (d.getSnapshot !== b || f || null !== O && O.memoizedState.tag & 1) {
          c.flags |= 2048;
          bi(9, ci.bind(null, c, d, e, b), void 0, null);
          if (null === Q) throw Error(p(349));
          0 !== (Hh & 30) || di(c, b, e);
        }
        return e;
      }
      function di(a, b, c) {
        a.flags |= 16384;
        a = { getSnapshot: b, value: c };
        b = M.updateQueue;
        null === b ? (b = { lastEffect: null, stores: null }, M.updateQueue = b, b.stores = [a]) : (c = b.stores, null === c ? b.stores = [a] : c.push(a));
      }
      function ci(a, b, c, d) {
        b.value = c;
        b.getSnapshot = d;
        ei(b) && fi(a);
      }
      function ai(a, b, c) {
        return c(function() {
          ei(b) && fi(a);
        });
      }
      function ei(a) {
        var b = a.getSnapshot;
        a = a.value;
        try {
          var c = b();
          return !He(a, c);
        } catch (d) {
          return true;
        }
      }
      function fi(a) {
        var b = ih(a, 1);
        null !== b && gi(b, a, 1, -1);
      }
      function hi(a) {
        var b = Th();
        "function" === typeof a && (a = a());
        b.memoizedState = b.baseState = a;
        a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: Vh, lastRenderedState: a };
        b.queue = a;
        a = a.dispatch = ii.bind(null, M, a);
        return [b.memoizedState, a];
      }
      function bi(a, b, c, d) {
        a = { tag: a, create: b, destroy: c, deps: d, next: null };
        b = M.updateQueue;
        null === b ? (b = { lastEffect: null, stores: null }, M.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, null === c ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));
        return a;
      }
      function ji() {
        return Uh().memoizedState;
      }
      function ki(a, b, c, d) {
        var e = Th();
        M.flags |= a;
        e.memoizedState = bi(1 | b, c, void 0, void 0 === d ? null : d);
      }
      function li(a, b, c, d) {
        var e = Uh();
        d = void 0 === d ? null : d;
        var f = void 0;
        if (null !== N) {
          var g = N.memoizedState;
          f = g.destroy;
          if (null !== d && Mh(d, g.deps)) {
            e.memoizedState = bi(b, c, f, d);
            return;
          }
        }
        M.flags |= a;
        e.memoizedState = bi(1 | b, c, f, d);
      }
      function mi(a, b) {
        return ki(8390656, 8, a, b);
      }
      function $h(a, b) {
        return li(2048, 8, a, b);
      }
      function ni(a, b) {
        return li(4, 2, a, b);
      }
      function oi(a, b) {
        return li(4, 4, a, b);
      }
      function pi(a, b) {
        if ("function" === typeof b) return a = a(), b(a), function() {
          b(null);
        };
        if (null !== b && void 0 !== b) return a = a(), b.current = a, function() {
          b.current = null;
        };
      }
      function qi(a, b, c) {
        c = null !== c && void 0 !== c ? c.concat([a]) : null;
        return li(4, 4, pi.bind(null, b, a), c);
      }
      function ri() {
      }
      function si(a, b) {
        var c = Uh();
        b = void 0 === b ? null : b;
        var d = c.memoizedState;
        if (null !== d && null !== b && Mh(b, d[1])) return d[0];
        c.memoizedState = [a, b];
        return a;
      }
      function ti(a, b) {
        var c = Uh();
        b = void 0 === b ? null : b;
        var d = c.memoizedState;
        if (null !== d && null !== b && Mh(b, d[1])) return d[0];
        a = a();
        c.memoizedState = [a, b];
        return a;
      }
      function ui(a, b, c) {
        if (0 === (Hh & 21)) return a.baseState && (a.baseState = false, dh = true), a.memoizedState = c;
        He(c, b) || (c = yc(), M.lanes |= c, rh |= c, a.baseState = true);
        return b;
      }
      function vi(a, b) {
        var c = C;
        C = 0 !== c && 4 > c ? c : 4;
        a(true);
        var d = Gh.transition;
        Gh.transition = {};
        try {
          a(false), b();
        } finally {
          C = c, Gh.transition = d;
        }
      }
      function wi() {
        return Uh().memoizedState;
      }
      function xi(a, b, c) {
        var d = yi(a);
        c = { lane: d, action: c, hasEagerState: false, eagerState: null, next: null };
        if (zi(a)) Ai(b, c);
        else if (c = hh(a, b, c, d), null !== c) {
          var e = R();
          gi(c, a, d, e);
          Bi(c, b, d);
        }
      }
      function ii(a, b, c) {
        var d = yi(a), e = { lane: d, action: c, hasEagerState: false, eagerState: null, next: null };
        if (zi(a)) Ai(b, e);
        else {
          var f = a.alternate;
          if (0 === a.lanes && (null === f || 0 === f.lanes) && (f = b.lastRenderedReducer, null !== f)) try {
            var g = b.lastRenderedState, h = f(g, c);
            e.hasEagerState = true;
            e.eagerState = h;
            if (He(h, g)) {
              var k = b.interleaved;
              null === k ? (e.next = e, gh(b)) : (e.next = k.next, k.next = e);
              b.interleaved = e;
              return;
            }
          } catch (l) {
          } finally {
          }
          c = hh(a, b, e, d);
          null !== c && (e = R(), gi(c, a, d, e), Bi(c, b, d));
        }
      }
      function zi(a) {
        var b = a.alternate;
        return a === M || null !== b && b === M;
      }
      function Ai(a, b) {
        Jh = Ih = true;
        var c = a.pending;
        null === c ? b.next = b : (b.next = c.next, c.next = b);
        a.pending = b;
      }
      function Bi(a, b, c) {
        if (0 !== (c & 4194240)) {
          var d = b.lanes;
          d &= a.pendingLanes;
          c |= d;
          b.lanes = c;
          Cc(a, c);
        }
      }
      var Rh = { readContext: eh, useCallback: P, useContext: P, useEffect: P, useImperativeHandle: P, useInsertionEffect: P, useLayoutEffect: P, useMemo: P, useReducer: P, useRef: P, useState: P, useDebugValue: P, useDeferredValue: P, useTransition: P, useMutableSource: P, useSyncExternalStore: P, useId: P, unstable_isNewReconciler: false };
      var Oh = { readContext: eh, useCallback: function(a, b) {
        Th().memoizedState = [a, void 0 === b ? null : b];
        return a;
      }, useContext: eh, useEffect: mi, useImperativeHandle: function(a, b, c) {
        c = null !== c && void 0 !== c ? c.concat([a]) : null;
        return ki(
          4194308,
          4,
          pi.bind(null, b, a),
          c
        );
      }, useLayoutEffect: function(a, b) {
        return ki(4194308, 4, a, b);
      }, useInsertionEffect: function(a, b) {
        return ki(4, 2, a, b);
      }, useMemo: function(a, b) {
        var c = Th();
        b = void 0 === b ? null : b;
        a = a();
        c.memoizedState = [a, b];
        return a;
      }, useReducer: function(a, b, c) {
        var d = Th();
        b = void 0 !== c ? c(b) : b;
        d.memoizedState = d.baseState = b;
        a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: a, lastRenderedState: b };
        d.queue = a;
        a = a.dispatch = xi.bind(null, M, a);
        return [d.memoizedState, a];
      }, useRef: function(a) {
        var b = Th();
        a = { current: a };
        return b.memoizedState = a;
      }, useState: hi, useDebugValue: ri, useDeferredValue: function(a) {
        return Th().memoizedState = a;
      }, useTransition: function() {
        var a = hi(false), b = a[0];
        a = vi.bind(null, a[1]);
        Th().memoizedState = a;
        return [b, a];
      }, useMutableSource: function() {
      }, useSyncExternalStore: function(a, b, c) {
        var d = M, e = Th();
        if (I) {
          if (void 0 === c) throw Error(p(407));
          c = c();
        } else {
          c = b();
          if (null === Q) throw Error(p(349));
          0 !== (Hh & 30) || di(d, b, c);
        }
        e.memoizedState = c;
        var f = { value: c, getSnapshot: b };
        e.queue = f;
        mi(ai.bind(
          null,
          d,
          f,
          a
        ), [a]);
        d.flags |= 2048;
        bi(9, ci.bind(null, d, f, c, b), void 0, null);
        return c;
      }, useId: function() {
        var a = Th(), b = Q.identifierPrefix;
        if (I) {
          var c = sg;
          var d = rg;
          c = (d & ~(1 << 32 - oc(d) - 1)).toString(32) + c;
          b = ":" + b + "R" + c;
          c = Kh++;
          0 < c && (b += "H" + c.toString(32));
          b += ":";
        } else c = Lh++, b = ":" + b + "r" + c.toString(32) + ":";
        return a.memoizedState = b;
      }, unstable_isNewReconciler: false };
      var Ph = {
        readContext: eh,
        useCallback: si,
        useContext: eh,
        useEffect: $h,
        useImperativeHandle: qi,
        useInsertionEffect: ni,
        useLayoutEffect: oi,
        useMemo: ti,
        useReducer: Wh,
        useRef: ji,
        useState: function() {
          return Wh(Vh);
        },
        useDebugValue: ri,
        useDeferredValue: function(a) {
          var b = Uh();
          return ui(b, N.memoizedState, a);
        },
        useTransition: function() {
          var a = Wh(Vh)[0], b = Uh().memoizedState;
          return [a, b];
        },
        useMutableSource: Yh,
        useSyncExternalStore: Zh,
        useId: wi,
        unstable_isNewReconciler: false
      };
      var Qh = { readContext: eh, useCallback: si, useContext: eh, useEffect: $h, useImperativeHandle: qi, useInsertionEffect: ni, useLayoutEffect: oi, useMemo: ti, useReducer: Xh, useRef: ji, useState: function() {
        return Xh(Vh);
      }, useDebugValue: ri, useDeferredValue: function(a) {
        var b = Uh();
        return null === N ? b.memoizedState = a : ui(b, N.memoizedState, a);
      }, useTransition: function() {
        var a = Xh(Vh)[0], b = Uh().memoizedState;
        return [a, b];
      }, useMutableSource: Yh, useSyncExternalStore: Zh, useId: wi, unstable_isNewReconciler: false };
      function Ci(a, b) {
        if (a && a.defaultProps) {
          b = A({}, b);
          a = a.defaultProps;
          for (var c in a) void 0 === b[c] && (b[c] = a[c]);
          return b;
        }
        return b;
      }
      function Di(a, b, c, d) {
        b = a.memoizedState;
        c = c(d, b);
        c = null === c || void 0 === c ? b : A({}, b, c);
        a.memoizedState = c;
        0 === a.lanes && (a.updateQueue.baseState = c);
      }
      var Ei = { isMounted: function(a) {
        return (a = a._reactInternals) ? Vb(a) === a : false;
      }, enqueueSetState: function(a, b, c) {
        a = a._reactInternals;
        var d = R(), e = yi(a), f = mh(d, e);
        f.payload = b;
        void 0 !== c && null !== c && (f.callback = c);
        b = nh(a, f, e);
        null !== b && (gi(b, a, e, d), oh(b, a, e));
      }, enqueueReplaceState: function(a, b, c) {
        a = a._reactInternals;
        var d = R(), e = yi(a), f = mh(d, e);
        f.tag = 1;
        f.payload = b;
        void 0 !== c && null !== c && (f.callback = c);
        b = nh(a, f, e);
        null !== b && (gi(b, a, e, d), oh(b, a, e));
      }, enqueueForceUpdate: function(a, b) {
        a = a._reactInternals;
        var c = R(), d = yi(a), e = mh(c, d);
        e.tag = 2;
        void 0 !== b && null !== b && (e.callback = b);
        b = nh(a, e, d);
        null !== b && (gi(b, a, d, c), oh(b, a, d));
      } };
      function Fi(a, b, c, d, e, f, g) {
        a = a.stateNode;
        return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !Ie(c, d) || !Ie(e, f) : true;
      }
      function Gi(a, b, c) {
        var d = false, e = Vf;
        var f = b.contextType;
        "object" === typeof f && null !== f ? f = eh(f) : (e = Zf(b) ? Xf : H.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Yf(a, e) : Vf);
        b = new b(c, f);
        a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;
        b.updater = Ei;
        a.stateNode = b;
        b._reactInternals = a;
        d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);
        return b;
      }
      function Hi(a, b, c, d) {
        a = b.state;
        "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);
        "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);
        b.state !== a && Ei.enqueueReplaceState(b, b.state, null);
      }
      function Ii(a, b, c, d) {
        var e = a.stateNode;
        e.props = c;
        e.state = a.memoizedState;
        e.refs = {};
        kh(a);
        var f = b.contextType;
        "object" === typeof f && null !== f ? e.context = eh(f) : (f = Zf(b) ? Xf : H.current, e.context = Yf(a, f));
        e.state = a.memoizedState;
        f = b.getDerivedStateFromProps;
        "function" === typeof f && (Di(a, b, f, c), e.state = a.memoizedState);
        "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && Ei.enqueueReplaceState(e, e.state, null), qh(a, c, e, d), e.state = a.memoizedState);
        "function" === typeof e.componentDidMount && (a.flags |= 4194308);
      }
      function Ji(a, b) {
        try {
          var c = "", d = b;
          do
            c += Pa(d), d = d.return;
          while (d);
          var e = c;
        } catch (f) {
          e = "\nError generating stack: " + f.message + "\n" + f.stack;
        }
        return { value: a, source: b, stack: e, digest: null };
      }
      function Ki(a, b, c) {
        return { value: a, source: null, stack: null != c ? c : null, digest: null != b ? b : null };
      }
      function Li(a, b) {
        try {
          console.error(b.value);
        } catch (c) {
          setTimeout(function() {
            throw c;
          });
        }
      }
      var Mi = "function" === typeof WeakMap ? WeakMap : Map;
      function Ni(a, b, c) {
        c = mh(-1, c);
        c.tag = 3;
        c.payload = { element: null };
        var d = b.value;
        c.callback = function() {
          Oi || (Oi = true, Pi = d);
          Li(a, b);
        };
        return c;
      }
      function Qi(a, b, c) {
        c = mh(-1, c);
        c.tag = 3;
        var d = a.type.getDerivedStateFromError;
        if ("function" === typeof d) {
          var e = b.value;
          c.payload = function() {
            return d(e);
          };
          c.callback = function() {
            Li(a, b);
          };
        }
        var f = a.stateNode;
        null !== f && "function" === typeof f.componentDidCatch && (c.callback = function() {
          Li(a, b);
          "function" !== typeof d && (null === Ri ? Ri = /* @__PURE__ */ new Set([this]) : Ri.add(this));
          var c2 = b.stack;
          this.componentDidCatch(b.value, { componentStack: null !== c2 ? c2 : "" });
        });
        return c;
      }
      function Si(a, b, c) {
        var d = a.pingCache;
        if (null === d) {
          d = a.pingCache = new Mi();
          var e = /* @__PURE__ */ new Set();
          d.set(b, e);
        } else e = d.get(b), void 0 === e && (e = /* @__PURE__ */ new Set(), d.set(b, e));
        e.has(c) || (e.add(c), a = Ti.bind(null, a, b, c), b.then(a, a));
      }
      function Ui(a) {
        do {
          var b;
          if (b = 13 === a.tag) b = a.memoizedState, b = null !== b ? null !== b.dehydrated ? true : false : true;
          if (b) return a;
          a = a.return;
        } while (null !== a);
        return null;
      }
      function Vi(a, b, c, d, e) {
        if (0 === (a.mode & 1)) return a === b ? a.flags |= 65536 : (a.flags |= 128, c.flags |= 131072, c.flags &= -52805, 1 === c.tag && (null === c.alternate ? c.tag = 17 : (b = mh(-1, 1), b.tag = 2, nh(c, b, 1))), c.lanes |= 1), a;
        a.flags |= 65536;
        a.lanes = e;
        return a;
      }
      var Wi = ua.ReactCurrentOwner;
      var dh = false;
      function Xi(a, b, c, d) {
        b.child = null === a ? Vg(b, null, c, d) : Ug(b, a.child, c, d);
      }
      function Yi(a, b, c, d, e) {
        c = c.render;
        var f = b.ref;
        ch(b, e);
        d = Nh(a, b, c, d, f, e);
        c = Sh();
        if (null !== a && !dh) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, Zi(a, b, e);
        I && c && vg(b);
        b.flags |= 1;
        Xi(a, b, d, e);
        return b.child;
      }
      function $i(a, b, c, d, e) {
        if (null === a) {
          var f = c.type;
          if ("function" === typeof f && !aj(f) && void 0 === f.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = f, bj(a, b, f, d, e);
          a = Rg(c.type, null, d, b, b.mode, e);
          a.ref = b.ref;
          a.return = b;
          return b.child = a;
        }
        f = a.child;
        if (0 === (a.lanes & e)) {
          var g = f.memoizedProps;
          c = c.compare;
          c = null !== c ? c : Ie;
          if (c(g, d) && a.ref === b.ref) return Zi(a, b, e);
        }
        b.flags |= 1;
        a = Pg(f, d);
        a.ref = b.ref;
        a.return = b;
        return b.child = a;
      }
      function bj(a, b, c, d, e) {
        if (null !== a) {
          var f = a.memoizedProps;
          if (Ie(f, d) && a.ref === b.ref) if (dh = false, b.pendingProps = d = f, 0 !== (a.lanes & e)) 0 !== (a.flags & 131072) && (dh = true);
          else return b.lanes = a.lanes, Zi(a, b, e);
        }
        return cj(a, b, c, d, e);
      }
      function dj(a, b, c) {
        var d = b.pendingProps, e = d.children, f = null !== a ? a.memoizedState : null;
        if ("hidden" === d.mode) if (0 === (b.mode & 1)) b.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, G(ej, fj), fj |= c;
        else {
          if (0 === (c & 1073741824)) return a = null !== f ? f.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = { baseLanes: a, cachePool: null, transitions: null }, b.updateQueue = null, G(ej, fj), fj |= a, null;
          b.memoizedState = { baseLanes: 0, cachePool: null, transitions: null };
          d = null !== f ? f.baseLanes : c;
          G(ej, fj);
          fj |= d;
        }
        else null !== f ? (d = f.baseLanes | c, b.memoizedState = null) : d = c, G(ej, fj), fj |= d;
        Xi(a, b, e, c);
        return b.child;
      }
      function gj(a, b) {
        var c = b.ref;
        if (null === a && null !== c || null !== a && a.ref !== c) b.flags |= 512, b.flags |= 2097152;
      }
      function cj(a, b, c, d, e) {
        var f = Zf(c) ? Xf : H.current;
        f = Yf(b, f);
        ch(b, e);
        c = Nh(a, b, c, d, f, e);
        d = Sh();
        if (null !== a && !dh) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, Zi(a, b, e);
        I && d && vg(b);
        b.flags |= 1;
        Xi(a, b, c, e);
        return b.child;
      }
      function hj(a, b, c, d, e) {
        if (Zf(c)) {
          var f = true;
          cg(b);
        } else f = false;
        ch(b, e);
        if (null === b.stateNode) ij(a, b), Gi(b, c, d), Ii(b, c, d, e), d = true;
        else if (null === a) {
          var g = b.stateNode, h = b.memoizedProps;
          g.props = h;
          var k = g.context, l = c.contextType;
          "object" === typeof l && null !== l ? l = eh(l) : (l = Zf(c) ? Xf : H.current, l = Yf(b, l));
          var m = c.getDerivedStateFromProps, q = "function" === typeof m || "function" === typeof g.getSnapshotBeforeUpdate;
          q || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && Hi(b, g, d, l);
          jh = false;
          var r = b.memoizedState;
          g.state = r;
          qh(b, d, g, e);
          k = b.memoizedState;
          h !== d || r !== k || Wf.current || jh ? ("function" === typeof m && (Di(b, c, m, d), k = b.memoizedState), (h = jh || Fi(b, c, h, d, r, k, l)) ? (q || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.flags |= 4194308)) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), d = false);
        } else {
          g = b.stateNode;
          lh(a, b);
          h = b.memoizedProps;
          l = b.type === b.elementType ? h : Ci(b.type, h);
          g.props = l;
          q = b.pendingProps;
          r = g.context;
          k = c.contextType;
          "object" === typeof k && null !== k ? k = eh(k) : (k = Zf(c) ? Xf : H.current, k = Yf(b, k));
          var y = c.getDerivedStateFromProps;
          (m = "function" === typeof y || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== q || r !== k) && Hi(b, g, d, k);
          jh = false;
          r = b.memoizedState;
          g.state = r;
          qh(b, d, g, e);
          var n = b.memoizedState;
          h !== q || r !== n || Wf.current || jh ? ("function" === typeof y && (Di(b, c, y, d), n = b.memoizedState), (l = jh || Fi(b, c, l, d, r, n, k) || false) ? (m || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, n, k), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, n, k)), "function" === typeof g.componentDidUpdate && (b.flags |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.flags |= 1024)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 1024), b.memoizedProps = d, b.memoizedState = n), g.props = d, g.state = n, g.context = k, d = l) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 1024), d = false);
        }
        return jj(a, b, c, d, f, e);
      }
      function jj(a, b, c, d, e, f) {
        gj(a, b);
        var g = 0 !== (b.flags & 128);
        if (!d && !g) return e && dg(b, c, false), Zi(a, b, f);
        d = b.stateNode;
        Wi.current = b;
        var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();
        b.flags |= 1;
        null !== a && g ? (b.child = Ug(b, a.child, null, f), b.child = Ug(b, null, h, f)) : Xi(a, b, h, f);
        b.memoizedState = d.state;
        e && dg(b, c, true);
        return b.child;
      }
      function kj(a) {
        var b = a.stateNode;
        b.pendingContext ? ag(a, b.pendingContext, b.pendingContext !== b.context) : b.context && ag(a, b.context, false);
        yh(a, b.containerInfo);
      }
      function lj(a, b, c, d, e) {
        Ig();
        Jg(e);
        b.flags |= 256;
        Xi(a, b, c, d);
        return b.child;
      }
      var mj = { dehydrated: null, treeContext: null, retryLane: 0 };
      function nj(a) {
        return { baseLanes: a, cachePool: null, transitions: null };
      }
      function oj(a, b, c) {
        var d = b.pendingProps, e = L.current, f = false, g = 0 !== (b.flags & 128), h;
        (h = g) || (h = null !== a && null === a.memoizedState ? false : 0 !== (e & 2));
        if (h) f = true, b.flags &= -129;
        else if (null === a || null !== a.memoizedState) e |= 1;
        G(L, e & 1);
        if (null === a) {
          Eg(b);
          a = b.memoizedState;
          if (null !== a && (a = a.dehydrated, null !== a)) return 0 === (b.mode & 1) ? b.lanes = 1 : "$!" === a.data ? b.lanes = 8 : b.lanes = 1073741824, null;
          g = d.children;
          a = d.fallback;
          return f ? (d = b.mode, f = b.child, g = { mode: "hidden", children: g }, 0 === (d & 1) && null !== f ? (f.childLanes = 0, f.pendingProps = g) : f = pj(g, d, 0, null), a = Tg(a, d, c, null), f.return = b, a.return = b, f.sibling = a, b.child = f, b.child.memoizedState = nj(c), b.memoizedState = mj, a) : qj(b, g);
        }
        e = a.memoizedState;
        if (null !== e && (h = e.dehydrated, null !== h)) return rj(a, b, g, d, h, e, c);
        if (f) {
          f = d.fallback;
          g = b.mode;
          e = a.child;
          h = e.sibling;
          var k = { mode: "hidden", children: d.children };
          0 === (g & 1) && b.child !== e ? (d = b.child, d.childLanes = 0, d.pendingProps = k, b.deletions = null) : (d = Pg(e, k), d.subtreeFlags = e.subtreeFlags & 14680064);
          null !== h ? f = Pg(h, f) : (f = Tg(f, g, c, null), f.flags |= 2);
          f.return = b;
          d.return = b;
          d.sibling = f;
          b.child = d;
          d = f;
          f = b.child;
          g = a.child.memoizedState;
          g = null === g ? nj(c) : { baseLanes: g.baseLanes | c, cachePool: null, transitions: g.transitions };
          f.memoizedState = g;
          f.childLanes = a.childLanes & ~c;
          b.memoizedState = mj;
          return d;
        }
        f = a.child;
        a = f.sibling;
        d = Pg(f, { mode: "visible", children: d.children });
        0 === (b.mode & 1) && (d.lanes = c);
        d.return = b;
        d.sibling = null;
        null !== a && (c = b.deletions, null === c ? (b.deletions = [a], b.flags |= 16) : c.push(a));
        b.child = d;
        b.memoizedState = null;
        return d;
      }
      function qj(a, b) {
        b = pj({ mode: "visible", children: b }, a.mode, 0, null);
        b.return = a;
        return a.child = b;
      }
      function sj(a, b, c, d) {
        null !== d && Jg(d);
        Ug(b, a.child, null, c);
        a = qj(b, b.pendingProps.children);
        a.flags |= 2;
        b.memoizedState = null;
        return a;
      }
      function rj(a, b, c, d, e, f, g) {
        if (c) {
          if (b.flags & 256) return b.flags &= -257, d = Ki(Error(p(422))), sj(a, b, g, d);
          if (null !== b.memoizedState) return b.child = a.child, b.flags |= 128, null;
          f = d.fallback;
          e = b.mode;
          d = pj({ mode: "visible", children: d.children }, e, 0, null);
          f = Tg(f, e, g, null);
          f.flags |= 2;
          d.return = b;
          f.return = b;
          d.sibling = f;
          b.child = d;
          0 !== (b.mode & 1) && Ug(b, a.child, null, g);
          b.child.memoizedState = nj(g);
          b.memoizedState = mj;
          return f;
        }
        if (0 === (b.mode & 1)) return sj(a, b, g, null);
        if ("$!" === e.data) {
          d = e.nextSibling && e.nextSibling.dataset;
          if (d) var h = d.dgst;
          d = h;
          f = Error(p(419));
          d = Ki(f, d, void 0);
          return sj(a, b, g, d);
        }
        h = 0 !== (g & a.childLanes);
        if (dh || h) {
          d = Q;
          if (null !== d) {
            switch (g & -g) {
              case 4:
                e = 2;
                break;
              case 16:
                e = 8;
                break;
              case 64:
              case 128:
              case 256:
              case 512:
              case 1024:
              case 2048:
              case 4096:
              case 8192:
              case 16384:
              case 32768:
              case 65536:
              case 131072:
              case 262144:
              case 524288:
              case 1048576:
              case 2097152:
              case 4194304:
              case 8388608:
              case 16777216:
              case 33554432:
              case 67108864:
                e = 32;
                break;
              case 536870912:
                e = 268435456;
                break;
              default:
                e = 0;
            }
            e = 0 !== (e & (d.suspendedLanes | g)) ? 0 : e;
            0 !== e && e !== f.retryLane && (f.retryLane = e, ih(a, e), gi(d, a, e, -1));
          }
          tj();
          d = Ki(Error(p(421)));
          return sj(a, b, g, d);
        }
        if ("$?" === e.data) return b.flags |= 128, b.child = a.child, b = uj.bind(null, a), e._reactRetry = b, null;
        a = f.treeContext;
        yg = Lf(e.nextSibling);
        xg = b;
        I = true;
        zg = null;
        null !== a && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a.id, sg = a.overflow, qg = b);
        b = qj(b, d.children);
        b.flags |= 4096;
        return b;
      }
      function vj(a, b, c) {
        a.lanes |= b;
        var d = a.alternate;
        null !== d && (d.lanes |= b);
        bh(a.return, b, c);
      }
      function wj(a, b, c, d, e) {
        var f = a.memoizedState;
        null === f ? a.memoizedState = { isBackwards: b, rendering: null, renderingStartTime: 0, last: d, tail: c, tailMode: e } : (f.isBackwards = b, f.rendering = null, f.renderingStartTime = 0, f.last = d, f.tail = c, f.tailMode = e);
      }
      function xj(a, b, c) {
        var d = b.pendingProps, e = d.revealOrder, f = d.tail;
        Xi(a, b, d.children, c);
        d = L.current;
        if (0 !== (d & 2)) d = d & 1 | 2, b.flags |= 128;
        else {
          if (null !== a && 0 !== (a.flags & 128)) a: for (a = b.child; null !== a; ) {
            if (13 === a.tag) null !== a.memoizedState && vj(a, c, b);
            else if (19 === a.tag) vj(a, c, b);
            else if (null !== a.child) {
              a.child.return = a;
              a = a.child;
              continue;
            }
            if (a === b) break a;
            for (; null === a.sibling; ) {
              if (null === a.return || a.return === b) break a;
              a = a.return;
            }
            a.sibling.return = a.return;
            a = a.sibling;
          }
          d &= 1;
        }
        G(L, d);
        if (0 === (b.mode & 1)) b.memoizedState = null;
        else switch (e) {
          case "forwards":
            c = b.child;
            for (e = null; null !== c; ) a = c.alternate, null !== a && null === Ch(a) && (e = c), c = c.sibling;
            c = e;
            null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);
            wj(b, false, e, c, f);
            break;
          case "backwards":
            c = null;
            e = b.child;
            for (b.child = null; null !== e; ) {
              a = e.alternate;
              if (null !== a && null === Ch(a)) {
                b.child = e;
                break;
              }
              a = e.sibling;
              e.sibling = c;
              c = e;
              e = a;
            }
            wj(b, true, c, null, f);
            break;
          case "together":
            wj(b, false, null, null, void 0);
            break;
          default:
            b.memoizedState = null;
        }
        return b.child;
      }
      function ij(a, b) {
        0 === (b.mode & 1) && null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);
      }
      function Zi(a, b, c) {
        null !== a && (b.dependencies = a.dependencies);
        rh |= b.lanes;
        if (0 === (c & b.childLanes)) return null;
        if (null !== a && b.child !== a.child) throw Error(p(153));
        if (null !== b.child) {
          a = b.child;
          c = Pg(a, a.pendingProps);
          b.child = c;
          for (c.return = b; null !== a.sibling; ) a = a.sibling, c = c.sibling = Pg(a, a.pendingProps), c.return = b;
          c.sibling = null;
        }
        return b.child;
      }
      function yj(a, b, c) {
        switch (b.tag) {
          case 3:
            kj(b);
            Ig();
            break;
          case 5:
            Ah(b);
            break;
          case 1:
            Zf(b.type) && cg(b);
            break;
          case 4:
            yh(b, b.stateNode.containerInfo);
            break;
          case 10:
            var d = b.type._context, e = b.memoizedProps.value;
            G(Wg, d._currentValue);
            d._currentValue = e;
            break;
          case 13:
            d = b.memoizedState;
            if (null !== d) {
              if (null !== d.dehydrated) return G(L, L.current & 1), b.flags |= 128, null;
              if (0 !== (c & b.child.childLanes)) return oj(a, b, c);
              G(L, L.current & 1);
              a = Zi(a, b, c);
              return null !== a ? a.sibling : null;
            }
            G(L, L.current & 1);
            break;
          case 19:
            d = 0 !== (c & b.childLanes);
            if (0 !== (a.flags & 128)) {
              if (d) return xj(a, b, c);
              b.flags |= 128;
            }
            e = b.memoizedState;
            null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);
            G(L, L.current);
            if (d) break;
            else return null;
          case 22:
          case 23:
            return b.lanes = 0, dj(a, b, c);
        }
        return Zi(a, b, c);
      }
      var zj;
      var Aj;
      var Bj;
      var Cj;
      zj = function(a, b) {
        for (var c = b.child; null !== c; ) {
          if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);
          else if (4 !== c.tag && null !== c.child) {
            c.child.return = c;
            c = c.child;
            continue;
          }
          if (c === b) break;
          for (; null === c.sibling; ) {
            if (null === c.return || c.return === b) return;
            c = c.return;
          }
          c.sibling.return = c.return;
          c = c.sibling;
        }
      };
      Aj = function() {
      };
      Bj = function(a, b, c, d) {
        var e = a.memoizedProps;
        if (e !== d) {
          a = b.stateNode;
          xh(uh.current);
          var f = null;
          switch (c) {
            case "input":
              e = Ya(a, e);
              d = Ya(a, d);
              f = [];
              break;
            case "select":
              e = A({}, e, { value: void 0 });
              d = A({}, d, { value: void 0 });
              f = [];
              break;
            case "textarea":
              e = gb(a, e);
              d = gb(a, d);
              f = [];
              break;
            default:
              "function" !== typeof e.onClick && "function" === typeof d.onClick && (a.onclick = Bf);
          }
          ub(c, d);
          var g;
          c = null;
          for (l in e) if (!d.hasOwnProperty(l) && e.hasOwnProperty(l) && null != e[l]) if ("style" === l) {
            var h = e[l];
            for (g in h) h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");
          } else "dangerouslySetInnerHTML" !== l && "children" !== l && "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && "autoFocus" !== l && (ea.hasOwnProperty(l) ? f || (f = []) : (f = f || []).push(l, null));
          for (l in d) {
            var k = d[l];
            h = null != e ? e[l] : void 0;
            if (d.hasOwnProperty(l) && k !== h && (null != k || null != h)) if ("style" === l) if (h) {
              for (g in h) !h.hasOwnProperty(g) || k && k.hasOwnProperty(g) || (c || (c = {}), c[g] = "");
              for (g in k) k.hasOwnProperty(g) && h[g] !== k[g] && (c || (c = {}), c[g] = k[g]);
            } else c || (f || (f = []), f.push(
              l,
              c
            )), c = k;
            else "dangerouslySetInnerHTML" === l ? (k = k ? k.__html : void 0, h = h ? h.__html : void 0, null != k && h !== k && (f = f || []).push(l, k)) : "children" === l ? "string" !== typeof k && "number" !== typeof k || (f = f || []).push(l, "" + k) : "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && (ea.hasOwnProperty(l) ? (null != k && "onScroll" === l && D("scroll", a), f || h === k || (f = [])) : (f = f || []).push(l, k));
          }
          c && (f = f || []).push("style", c);
          var l = f;
          if (b.updateQueue = l) b.flags |= 4;
        }
      };
      Cj = function(a, b, c, d) {
        c !== d && (b.flags |= 4);
      };
      function Dj(a, b) {
        if (!I) switch (a.tailMode) {
          case "hidden":
            b = a.tail;
            for (var c = null; null !== b; ) null !== b.alternate && (c = b), b = b.sibling;
            null === c ? a.tail = null : c.sibling = null;
            break;
          case "collapsed":
            c = a.tail;
            for (var d = null; null !== c; ) null !== c.alternate && (d = c), c = c.sibling;
            null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;
        }
      }
      function S(a) {
        var b = null !== a.alternate && a.alternate.child === a.child, c = 0, d = 0;
        if (b) for (var e = a.child; null !== e; ) c |= e.lanes | e.childLanes, d |= e.subtreeFlags & 14680064, d |= e.flags & 14680064, e.return = a, e = e.sibling;
        else for (e = a.child; null !== e; ) c |= e.lanes | e.childLanes, d |= e.subtreeFlags, d |= e.flags, e.return = a, e = e.sibling;
        a.subtreeFlags |= d;
        a.childLanes = c;
        return b;
      }
      function Ej(a, b, c) {
        var d = b.pendingProps;
        wg(b);
        switch (b.tag) {
          case 2:
          case 16:
          case 15:
          case 0:
          case 11:
          case 7:
          case 8:
          case 12:
          case 9:
          case 14:
            return S(b), null;
          case 1:
            return Zf(b.type) && $f(), S(b), null;
          case 3:
            d = b.stateNode;
            zh();
            E(Wf);
            E(H);
            Eh();
            d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null);
            if (null === a || null === a.child) Gg(b) ? b.flags |= 4 : null === a || a.memoizedState.isDehydrated && 0 === (b.flags & 256) || (b.flags |= 1024, null !== zg && (Fj(zg), zg = null));
            Aj(a, b);
            S(b);
            return null;
          case 5:
            Bh(b);
            var e = xh(wh.current);
            c = b.type;
            if (null !== a && null != b.stateNode) Bj(a, b, c, d, e), a.ref !== b.ref && (b.flags |= 512, b.flags |= 2097152);
            else {
              if (!d) {
                if (null === b.stateNode) throw Error(p(166));
                S(b);
                return null;
              }
              a = xh(uh.current);
              if (Gg(b)) {
                d = b.stateNode;
                c = b.type;
                var f = b.memoizedProps;
                d[Of] = b;
                d[Pf] = f;
                a = 0 !== (b.mode & 1);
                switch (c) {
                  case "dialog":
                    D("cancel", d);
                    D("close", d);
                    break;
                  case "iframe":
                  case "object":
                  case "embed":
                    D("load", d);
                    break;
                  case "video":
                  case "audio":
                    for (e = 0; e < lf.length; e++) D(lf[e], d);
                    break;
                  case "source":
                    D("error", d);
                    break;
                  case "img":
                  case "image":
                  case "link":
                    D(
                      "error",
                      d
                    );
                    D("load", d);
                    break;
                  case "details":
                    D("toggle", d);
                    break;
                  case "input":
                    Za(d, f);
                    D("invalid", d);
                    break;
                  case "select":
                    d._wrapperState = { wasMultiple: !!f.multiple };
                    D("invalid", d);
                    break;
                  case "textarea":
                    hb(d, f), D("invalid", d);
                }
                ub(c, f);
                e = null;
                for (var g in f) if (f.hasOwnProperty(g)) {
                  var h = f[g];
                  "children" === g ? "string" === typeof h ? d.textContent !== h && (true !== f.suppressHydrationWarning && Af(d.textContent, h, a), e = ["children", h]) : "number" === typeof h && d.textContent !== "" + h && (true !== f.suppressHydrationWarning && Af(
                    d.textContent,
                    h,
                    a
                  ), e = ["children", "" + h]) : ea.hasOwnProperty(g) && null != h && "onScroll" === g && D("scroll", d);
                }
                switch (c) {
                  case "input":
                    Va(d);
                    db(d, f, true);
                    break;
                  case "textarea":
                    Va(d);
                    jb(d);
                    break;
                  case "select":
                  case "option":
                    break;
                  default:
                    "function" === typeof f.onClick && (d.onclick = Bf);
                }
                d = e;
                b.updateQueue = d;
                null !== d && (b.flags |= 4);
              } else {
                g = 9 === e.nodeType ? e : e.ownerDocument;
                "http://www.w3.org/1999/xhtml" === a && (a = kb(c));
                "http://www.w3.org/1999/xhtml" === a ? "script" === c ? (a = g.createElement("div"), a.innerHTML = "<script><\/script>", a = a.removeChild(a.firstChild)) : "string" === typeof d.is ? a = g.createElement(c, { is: d.is }) : (a = g.createElement(c), "select" === c && (g = a, d.multiple ? g.multiple = true : d.size && (g.size = d.size))) : a = g.createElementNS(a, c);
                a[Of] = b;
                a[Pf] = d;
                zj(a, b, false, false);
                b.stateNode = a;
                a: {
                  g = vb(c, d);
                  switch (c) {
                    case "dialog":
                      D("cancel", a);
                      D("close", a);
                      e = d;
                      break;
                    case "iframe":
                    case "object":
                    case "embed":
                      D("load", a);
                      e = d;
                      break;
                    case "video":
                    case "audio":
                      for (e = 0; e < lf.length; e++) D(lf[e], a);
                      e = d;
                      break;
                    case "source":
                      D("error", a);
                      e = d;
                      break;
                    case "img":
                    case "image":
                    case "link":
                      D(
                        "error",
                        a
                      );
                      D("load", a);
                      e = d;
                      break;
                    case "details":
                      D("toggle", a);
                      e = d;
                      break;
                    case "input":
                      Za(a, d);
                      e = Ya(a, d);
                      D("invalid", a);
                      break;
                    case "option":
                      e = d;
                      break;
                    case "select":
                      a._wrapperState = { wasMultiple: !!d.multiple };
                      e = A({}, d, { value: void 0 });
                      D("invalid", a);
                      break;
                    case "textarea":
                      hb(a, d);
                      e = gb(a, d);
                      D("invalid", a);
                      break;
                    default:
                      e = d;
                  }
                  ub(c, e);
                  h = e;
                  for (f in h) if (h.hasOwnProperty(f)) {
                    var k = h[f];
                    "style" === f ? sb(a, k) : "dangerouslySetInnerHTML" === f ? (k = k ? k.__html : void 0, null != k && nb(a, k)) : "children" === f ? "string" === typeof k ? ("textarea" !== c || "" !== k) && ob(a, k) : "number" === typeof k && ob(a, "" + k) : "suppressContentEditableWarning" !== f && "suppressHydrationWarning" !== f && "autoFocus" !== f && (ea.hasOwnProperty(f) ? null != k && "onScroll" === f && D("scroll", a) : null != k && ta(a, f, k, g));
                  }
                  switch (c) {
                    case "input":
                      Va(a);
                      db(a, d, false);
                      break;
                    case "textarea":
                      Va(a);
                      jb(a);
                      break;
                    case "option":
                      null != d.value && a.setAttribute("value", "" + Sa(d.value));
                      break;
                    case "select":
                      a.multiple = !!d.multiple;
                      f = d.value;
                      null != f ? fb(a, !!d.multiple, f, false) : null != d.defaultValue && fb(
                        a,
                        !!d.multiple,
                        d.defaultValue,
                        true
                      );
                      break;
                    default:
                      "function" === typeof e.onClick && (a.onclick = Bf);
                  }
                  switch (c) {
                    case "button":
                    case "input":
                    case "select":
                    case "textarea":
                      d = !!d.autoFocus;
                      break a;
                    case "img":
                      d = true;
                      break a;
                    default:
                      d = false;
                  }
                }
                d && (b.flags |= 4);
              }
              null !== b.ref && (b.flags |= 512, b.flags |= 2097152);
            }
            S(b);
            return null;
          case 6:
            if (a && null != b.stateNode) Cj(a, b, a.memoizedProps, d);
            else {
              if ("string" !== typeof d && null === b.stateNode) throw Error(p(166));
              c = xh(wh.current);
              xh(uh.current);
              if (Gg(b)) {
                d = b.stateNode;
                c = b.memoizedProps;
                d[Of] = b;
                if (f = d.nodeValue !== c) {
                  if (a = xg, null !== a) switch (a.tag) {
                    case 3:
                      Af(d.nodeValue, c, 0 !== (a.mode & 1));
                      break;
                    case 5:
                      true !== a.memoizedProps.suppressHydrationWarning && Af(d.nodeValue, c, 0 !== (a.mode & 1));
                  }
                }
                f && (b.flags |= 4);
              } else d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d), d[Of] = b, b.stateNode = d;
            }
            S(b);
            return null;
          case 13:
            E(L);
            d = b.memoizedState;
            if (null === a || null !== a.memoizedState && null !== a.memoizedState.dehydrated) {
              if (I && null !== yg && 0 !== (b.mode & 1) && 0 === (b.flags & 128)) Hg(), Ig(), b.flags |= 98560, f = false;
              else if (f = Gg(b), null !== d && null !== d.dehydrated) {
                if (null === a) {
                  if (!f) throw Error(p(318));
                  f = b.memoizedState;
                  f = null !== f ? f.dehydrated : null;
                  if (!f) throw Error(p(317));
                  f[Of] = b;
                } else Ig(), 0 === (b.flags & 128) && (b.memoizedState = null), b.flags |= 4;
                S(b);
                f = false;
              } else null !== zg && (Fj(zg), zg = null), f = true;
              if (!f) return b.flags & 65536 ? b : null;
            }
            if (0 !== (b.flags & 128)) return b.lanes = c, b;
            d = null !== d;
            d !== (null !== a && null !== a.memoizedState) && d && (b.child.flags |= 8192, 0 !== (b.mode & 1) && (null === a || 0 !== (L.current & 1) ? 0 === T && (T = 3) : tj()));
            null !== b.updateQueue && (b.flags |= 4);
            S(b);
            return null;
          case 4:
            return zh(), Aj(a, b), null === a && sf(b.stateNode.containerInfo), S(b), null;
          case 10:
            return ah(b.type._context), S(b), null;
          case 17:
            return Zf(b.type) && $f(), S(b), null;
          case 19:
            E(L);
            f = b.memoizedState;
            if (null === f) return S(b), null;
            d = 0 !== (b.flags & 128);
            g = f.rendering;
            if (null === g) if (d) Dj(f, false);
            else {
              if (0 !== T || null !== a && 0 !== (a.flags & 128)) for (a = b.child; null !== a; ) {
                g = Ch(a);
                if (null !== g) {
                  b.flags |= 128;
                  Dj(f, false);
                  d = g.updateQueue;
                  null !== d && (b.updateQueue = d, b.flags |= 4);
                  b.subtreeFlags = 0;
                  d = c;
                  for (c = b.child; null !== c; ) f = c, a = d, f.flags &= 14680066, g = f.alternate, null === g ? (f.childLanes = 0, f.lanes = a, f.child = null, f.subtreeFlags = 0, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null, f.stateNode = null) : (f.childLanes = g.childLanes, f.lanes = g.lanes, f.child = g.child, f.subtreeFlags = 0, f.deletions = null, f.memoizedProps = g.memoizedProps, f.memoizedState = g.memoizedState, f.updateQueue = g.updateQueue, f.type = g.type, a = g.dependencies, f.dependencies = null === a ? null : { lanes: a.lanes, firstContext: a.firstContext }), c = c.sibling;
                  G(L, L.current & 1 | 2);
                  return b.child;
                }
                a = a.sibling;
              }
              null !== f.tail && B() > Gj && (b.flags |= 128, d = true, Dj(f, false), b.lanes = 4194304);
            }
            else {
              if (!d) if (a = Ch(g), null !== a) {
                if (b.flags |= 128, d = true, c = a.updateQueue, null !== c && (b.updateQueue = c, b.flags |= 4), Dj(f, true), null === f.tail && "hidden" === f.tailMode && !g.alternate && !I) return S(b), null;
              } else 2 * B() - f.renderingStartTime > Gj && 1073741824 !== c && (b.flags |= 128, d = true, Dj(f, false), b.lanes = 4194304);
              f.isBackwards ? (g.sibling = b.child, b.child = g) : (c = f.last, null !== c ? c.sibling = g : b.child = g, f.last = g);
            }
            if (null !== f.tail) return b = f.tail, f.rendering = b, f.tail = b.sibling, f.renderingStartTime = B(), b.sibling = null, c = L.current, G(L, d ? c & 1 | 2 : c & 1), b;
            S(b);
            return null;
          case 22:
          case 23:
            return Hj(), d = null !== b.memoizedState, null !== a && null !== a.memoizedState !== d && (b.flags |= 8192), d && 0 !== (b.mode & 1) ? 0 !== (fj & 1073741824) && (S(b), b.subtreeFlags & 6 && (b.flags |= 8192)) : S(b), null;
          case 24:
            return null;
          case 25:
            return null;
        }
        throw Error(p(156, b.tag));
      }
      function Ij(a, b) {
        wg(b);
        switch (b.tag) {
          case 1:
            return Zf(b.type) && $f(), a = b.flags, a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
          case 3:
            return zh(), E(Wf), E(H), Eh(), a = b.flags, 0 !== (a & 65536) && 0 === (a & 128) ? (b.flags = a & -65537 | 128, b) : null;
          case 5:
            return Bh(b), null;
          case 13:
            E(L);
            a = b.memoizedState;
            if (null !== a && null !== a.dehydrated) {
              if (null === b.alternate) throw Error(p(340));
              Ig();
            }
            a = b.flags;
            return a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
          case 19:
            return E(L), null;
          case 4:
            return zh(), null;
          case 10:
            return ah(b.type._context), null;
          case 22:
          case 23:
            return Hj(), null;
          case 24:
            return null;
          default:
            return null;
        }
      }
      var Jj = false;
      var U = false;
      var Kj = "function" === typeof WeakSet ? WeakSet : Set;
      var V = null;
      function Lj(a, b) {
        var c = a.ref;
        if (null !== c) if ("function" === typeof c) try {
          c(null);
        } catch (d) {
          W(a, b, d);
        }
        else c.current = null;
      }
      function Mj(a, b, c) {
        try {
          c();
        } catch (d) {
          W(a, b, d);
        }
      }
      var Nj = false;
      function Oj(a, b) {
        Cf = dd;
        a = Me();
        if (Ne(a)) {
          if ("selectionStart" in a) var c = { start: a.selectionStart, end: a.selectionEnd };
          else a: {
            c = (c = a.ownerDocument) && c.defaultView || window;
            var d = c.getSelection && c.getSelection();
            if (d && 0 !== d.rangeCount) {
              c = d.anchorNode;
              var e = d.anchorOffset, f = d.focusNode;
              d = d.focusOffset;
              try {
                c.nodeType, f.nodeType;
              } catch (F) {
                c = null;
                break a;
              }
              var g = 0, h = -1, k = -1, l = 0, m = 0, q = a, r = null;
              b: for (; ; ) {
                for (var y; ; ) {
                  q !== c || 0 !== e && 3 !== q.nodeType || (h = g + e);
                  q !== f || 0 !== d && 3 !== q.nodeType || (k = g + d);
                  3 === q.nodeType && (g += q.nodeValue.length);
                  if (null === (y = q.firstChild)) break;
                  r = q;
                  q = y;
                }
                for (; ; ) {
                  if (q === a) break b;
                  r === c && ++l === e && (h = g);
                  r === f && ++m === d && (k = g);
                  if (null !== (y = q.nextSibling)) break;
                  q = r;
                  r = q.parentNode;
                }
                q = y;
              }
              c = -1 === h || -1 === k ? null : { start: h, end: k };
            } else c = null;
          }
          c = c || { start: 0, end: 0 };
        } else c = null;
        Df = { focusedElem: a, selectionRange: c };
        dd = false;
        for (V = b; null !== V; ) if (b = V, a = b.child, 0 !== (b.subtreeFlags & 1028) && null !== a) a.return = b, V = a;
        else for (; null !== V; ) {
          b = V;
          try {
            var n = b.alternate;
            if (0 !== (b.flags & 1024)) switch (b.tag) {
              case 0:
              case 11:
              case 15:
                break;
              case 1:
                if (null !== n) {
                  var t = n.memoizedProps, J = n.memoizedState, x = b.stateNode, w = x.getSnapshotBeforeUpdate(b.elementType === b.type ? t : Ci(b.type, t), J);
                  x.__reactInternalSnapshotBeforeUpdate = w;
                }
                break;
              case 3:
                var u = b.stateNode.containerInfo;
                1 === u.nodeType ? u.textContent = "" : 9 === u.nodeType && u.documentElement && u.removeChild(u.documentElement);
                break;
              case 5:
              case 6:
              case 4:
              case 17:
                break;
              default:
                throw Error(p(163));
            }
          } catch (F) {
            W(b, b.return, F);
          }
          a = b.sibling;
          if (null !== a) {
            a.return = b.return;
            V = a;
            break;
          }
          V = b.return;
        }
        n = Nj;
        Nj = false;
        return n;
      }
      function Pj(a, b, c) {
        var d = b.updateQueue;
        d = null !== d ? d.lastEffect : null;
        if (null !== d) {
          var e = d = d.next;
          do {
            if ((e.tag & a) === a) {
              var f = e.destroy;
              e.destroy = void 0;
              void 0 !== f && Mj(b, c, f);
            }
            e = e.next;
          } while (e !== d);
        }
      }
      function Qj(a, b) {
        b = b.updateQueue;
        b = null !== b ? b.lastEffect : null;
        if (null !== b) {
          var c = b = b.next;
          do {
            if ((c.tag & a) === a) {
              var d = c.create;
              c.destroy = d();
            }
            c = c.next;
          } while (c !== b);
        }
      }
      function Rj(a) {
        var b = a.ref;
        if (null !== b) {
          var c = a.stateNode;
          switch (a.tag) {
            case 5:
              a = c;
              break;
            default:
              a = c;
          }
          "function" === typeof b ? b(a) : b.current = a;
        }
      }
      function Sj(a) {
        var b = a.alternate;
        null !== b && (a.alternate = null, Sj(b));
        a.child = null;
        a.deletions = null;
        a.sibling = null;
        5 === a.tag && (b = a.stateNode, null !== b && (delete b[Of], delete b[Pf], delete b[of], delete b[Qf], delete b[Rf]));
        a.stateNode = null;
        a.return = null;
        a.dependencies = null;
        a.memoizedProps = null;
        a.memoizedState = null;
        a.pendingProps = null;
        a.stateNode = null;
        a.updateQueue = null;
      }
      function Tj(a) {
        return 5 === a.tag || 3 === a.tag || 4 === a.tag;
      }
      function Uj(a) {
        a: for (; ; ) {
          for (; null === a.sibling; ) {
            if (null === a.return || Tj(a.return)) return null;
            a = a.return;
          }
          a.sibling.return = a.return;
          for (a = a.sibling; 5 !== a.tag && 6 !== a.tag && 18 !== a.tag; ) {
            if (a.flags & 2) continue a;
            if (null === a.child || 4 === a.tag) continue a;
            else a.child.return = a, a = a.child;
          }
          if (!(a.flags & 2)) return a.stateNode;
        }
      }
      function Vj(a, b, c) {
        var d = a.tag;
        if (5 === d || 6 === d) a = a.stateNode, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (8 === c.nodeType ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b.onclick || (b.onclick = Bf));
        else if (4 !== d && (a = a.child, null !== a)) for (Vj(a, b, c), a = a.sibling; null !== a; ) Vj(a, b, c), a = a.sibling;
      }
      function Wj(a, b, c) {
        var d = a.tag;
        if (5 === d || 6 === d) a = a.stateNode, b ? c.insertBefore(a, b) : c.appendChild(a);
        else if (4 !== d && (a = a.child, null !== a)) for (Wj(a, b, c), a = a.sibling; null !== a; ) Wj(a, b, c), a = a.sibling;
      }
      var X = null;
      var Xj = false;
      function Yj(a, b, c) {
        for (c = c.child; null !== c; ) Zj(a, b, c), c = c.sibling;
      }
      function Zj(a, b, c) {
        if (lc && "function" === typeof lc.onCommitFiberUnmount) try {
          lc.onCommitFiberUnmount(kc, c);
        } catch (h) {
        }
        switch (c.tag) {
          case 5:
            U || Lj(c, b);
          case 6:
            var d = X, e = Xj;
            X = null;
            Yj(a, b, c);
            X = d;
            Xj = e;
            null !== X && (Xj ? (a = X, c = c.stateNode, 8 === a.nodeType ? a.parentNode.removeChild(c) : a.removeChild(c)) : X.removeChild(c.stateNode));
            break;
          case 18:
            null !== X && (Xj ? (a = X, c = c.stateNode, 8 === a.nodeType ? Kf(a.parentNode, c) : 1 === a.nodeType && Kf(a, c), bd(a)) : Kf(X, c.stateNode));
            break;
          case 4:
            d = X;
            e = Xj;
            X = c.stateNode.containerInfo;
            Xj = true;
            Yj(a, b, c);
            X = d;
            Xj = e;
            break;
          case 0:
          case 11:
          case 14:
          case 15:
            if (!U && (d = c.updateQueue, null !== d && (d = d.lastEffect, null !== d))) {
              e = d = d.next;
              do {
                var f = e, g = f.destroy;
                f = f.tag;
                void 0 !== g && (0 !== (f & 2) ? Mj(c, b, g) : 0 !== (f & 4) && Mj(c, b, g));
                e = e.next;
              } while (e !== d);
            }
            Yj(a, b, c);
            break;
          case 1:
            if (!U && (Lj(c, b), d = c.stateNode, "function" === typeof d.componentWillUnmount)) try {
              d.props = c.memoizedProps, d.state = c.memoizedState, d.componentWillUnmount();
            } catch (h) {
              W(c, b, h);
            }
            Yj(a, b, c);
            break;
          case 21:
            Yj(a, b, c);
            break;
          case 22:
            c.mode & 1 ? (U = (d = U) || null !== c.memoizedState, Yj(a, b, c), U = d) : Yj(a, b, c);
            break;
          default:
            Yj(a, b, c);
        }
      }
      function ak(a) {
        var b = a.updateQueue;
        if (null !== b) {
          a.updateQueue = null;
          var c = a.stateNode;
          null === c && (c = a.stateNode = new Kj());
          b.forEach(function(b2) {
            var d = bk.bind(null, a, b2);
            c.has(b2) || (c.add(b2), b2.then(d, d));
          });
        }
      }
      function ck(a, b) {
        var c = b.deletions;
        if (null !== c) for (var d = 0; d < c.length; d++) {
          var e = c[d];
          try {
            var f = a, g = b, h = g;
            a: for (; null !== h; ) {
              switch (h.tag) {
                case 5:
                  X = h.stateNode;
                  Xj = false;
                  break a;
                case 3:
                  X = h.stateNode.containerInfo;
                  Xj = true;
                  break a;
                case 4:
                  X = h.stateNode.containerInfo;
                  Xj = true;
                  break a;
              }
              h = h.return;
            }
            if (null === X) throw Error(p(160));
            Zj(f, g, e);
            X = null;
            Xj = false;
            var k = e.alternate;
            null !== k && (k.return = null);
            e.return = null;
          } catch (l) {
            W(e, b, l);
          }
        }
        if (b.subtreeFlags & 12854) for (b = b.child; null !== b; ) dk(b, a), b = b.sibling;
      }
      function dk(a, b) {
        var c = a.alternate, d = a.flags;
        switch (a.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
            ck(b, a);
            ek(a);
            if (d & 4) {
              try {
                Pj(3, a, a.return), Qj(3, a);
              } catch (t) {
                W(a, a.return, t);
              }
              try {
                Pj(5, a, a.return);
              } catch (t) {
                W(a, a.return, t);
              }
            }
            break;
          case 1:
            ck(b, a);
            ek(a);
            d & 512 && null !== c && Lj(c, c.return);
            break;
          case 5:
            ck(b, a);
            ek(a);
            d & 512 && null !== c && Lj(c, c.return);
            if (a.flags & 32) {
              var e = a.stateNode;
              try {
                ob(e, "");
              } catch (t) {
                W(a, a.return, t);
              }
            }
            if (d & 4 && (e = a.stateNode, null != e)) {
              var f = a.memoizedProps, g = null !== c ? c.memoizedProps : f, h = a.type, k = a.updateQueue;
              a.updateQueue = null;
              if (null !== k) try {
                "input" === h && "radio" === f.type && null != f.name && ab(e, f);
                vb(h, g);
                var l = vb(h, f);
                for (g = 0; g < k.length; g += 2) {
                  var m = k[g], q = k[g + 1];
                  "style" === m ? sb(e, q) : "dangerouslySetInnerHTML" === m ? nb(e, q) : "children" === m ? ob(e, q) : ta(e, m, q, l);
                }
                switch (h) {
                  case "input":
                    bb(e, f);
                    break;
                  case "textarea":
                    ib(e, f);
                    break;
                  case "select":
                    var r = e._wrapperState.wasMultiple;
                    e._wrapperState.wasMultiple = !!f.multiple;
                    var y = f.value;
                    null != y ? fb(e, !!f.multiple, y, false) : r !== !!f.multiple && (null != f.defaultValue ? fb(
                      e,
                      !!f.multiple,
                      f.defaultValue,
                      true
                    ) : fb(e, !!f.multiple, f.multiple ? [] : "", false));
                }
                e[Pf] = f;
              } catch (t) {
                W(a, a.return, t);
              }
            }
            break;
          case 6:
            ck(b, a);
            ek(a);
            if (d & 4) {
              if (null === a.stateNode) throw Error(p(162));
              e = a.stateNode;
              f = a.memoizedProps;
              try {
                e.nodeValue = f;
              } catch (t) {
                W(a, a.return, t);
              }
            }
            break;
          case 3:
            ck(b, a);
            ek(a);
            if (d & 4 && null !== c && c.memoizedState.isDehydrated) try {
              bd(b.containerInfo);
            } catch (t) {
              W(a, a.return, t);
            }
            break;
          case 4:
            ck(b, a);
            ek(a);
            break;
          case 13:
            ck(b, a);
            ek(a);
            e = a.child;
            e.flags & 8192 && (f = null !== e.memoizedState, e.stateNode.isHidden = f, !f || null !== e.alternate && null !== e.alternate.memoizedState || (fk = B()));
            d & 4 && ak(a);
            break;
          case 22:
            m = null !== c && null !== c.memoizedState;
            a.mode & 1 ? (U = (l = U) || m, ck(b, a), U = l) : ck(b, a);
            ek(a);
            if (d & 8192) {
              l = null !== a.memoizedState;
              if ((a.stateNode.isHidden = l) && !m && 0 !== (a.mode & 1)) for (V = a, m = a.child; null !== m; ) {
                for (q = V = m; null !== V; ) {
                  r = V;
                  y = r.child;
                  switch (r.tag) {
                    case 0:
                    case 11:
                    case 14:
                    case 15:
                      Pj(4, r, r.return);
                      break;
                    case 1:
                      Lj(r, r.return);
                      var n = r.stateNode;
                      if ("function" === typeof n.componentWillUnmount) {
                        d = r;
                        c = r.return;
                        try {
                          b = d, n.props = b.memoizedProps, n.state = b.memoizedState, n.componentWillUnmount();
                        } catch (t) {
                          W(d, c, t);
                        }
                      }
                      break;
                    case 5:
                      Lj(r, r.return);
                      break;
                    case 22:
                      if (null !== r.memoizedState) {
                        gk(q);
                        continue;
                      }
                  }
                  null !== y ? (y.return = r, V = y) : gk(q);
                }
                m = m.sibling;
              }
              a: for (m = null, q = a; ; ) {
                if (5 === q.tag) {
                  if (null === m) {
                    m = q;
                    try {
                      e = q.stateNode, l ? (f = e.style, "function" === typeof f.setProperty ? f.setProperty("display", "none", "important") : f.display = "none") : (h = q.stateNode, k = q.memoizedProps.style, g = void 0 !== k && null !== k && k.hasOwnProperty("display") ? k.display : null, h.style.display = rb("display", g));
                    } catch (t) {
                      W(a, a.return, t);
                    }
                  }
                } else if (6 === q.tag) {
                  if (null === m) try {
                    q.stateNode.nodeValue = l ? "" : q.memoizedProps;
                  } catch (t) {
                    W(a, a.return, t);
                  }
                } else if ((22 !== q.tag && 23 !== q.tag || null === q.memoizedState || q === a) && null !== q.child) {
                  q.child.return = q;
                  q = q.child;
                  continue;
                }
                if (q === a) break a;
                for (; null === q.sibling; ) {
                  if (null === q.return || q.return === a) break a;
                  m === q && (m = null);
                  q = q.return;
                }
                m === q && (m = null);
                q.sibling.return = q.return;
                q = q.sibling;
              }
            }
            break;
          case 19:
            ck(b, a);
            ek(a);
            d & 4 && ak(a);
            break;
          case 21:
            break;
          default:
            ck(
              b,
              a
            ), ek(a);
        }
      }
      function ek(a) {
        var b = a.flags;
        if (b & 2) {
          try {
            a: {
              for (var c = a.return; null !== c; ) {
                if (Tj(c)) {
                  var d = c;
                  break a;
                }
                c = c.return;
              }
              throw Error(p(160));
            }
            switch (d.tag) {
              case 5:
                var e = d.stateNode;
                d.flags & 32 && (ob(e, ""), d.flags &= -33);
                var f = Uj(a);
                Wj(a, f, e);
                break;
              case 3:
              case 4:
                var g = d.stateNode.containerInfo, h = Uj(a);
                Vj(a, h, g);
                break;
              default:
                throw Error(p(161));
            }
          } catch (k) {
            W(a, a.return, k);
          }
          a.flags &= -3;
        }
        b & 4096 && (a.flags &= -4097);
      }
      function hk(a, b, c) {
        V = a;
        ik(a, b, c);
      }
      function ik(a, b, c) {
        for (var d = 0 !== (a.mode & 1); null !== V; ) {
          var e = V, f = e.child;
          if (22 === e.tag && d) {
            var g = null !== e.memoizedState || Jj;
            if (!g) {
              var h = e.alternate, k = null !== h && null !== h.memoizedState || U;
              h = Jj;
              var l = U;
              Jj = g;
              if ((U = k) && !l) for (V = e; null !== V; ) g = V, k = g.child, 22 === g.tag && null !== g.memoizedState ? jk(e) : null !== k ? (k.return = g, V = k) : jk(e);
              for (; null !== f; ) V = f, ik(f, b, c), f = f.sibling;
              V = e;
              Jj = h;
              U = l;
            }
            kk(a, b, c);
          } else 0 !== (e.subtreeFlags & 8772) && null !== f ? (f.return = e, V = f) : kk(a, b, c);
        }
      }
      function kk(a) {
        for (; null !== V; ) {
          var b = V;
          if (0 !== (b.flags & 8772)) {
            var c = b.alternate;
            try {
              if (0 !== (b.flags & 8772)) switch (b.tag) {
                case 0:
                case 11:
                case 15:
                  U || Qj(5, b);
                  break;
                case 1:
                  var d = b.stateNode;
                  if (b.flags & 4 && !U) if (null === c) d.componentDidMount();
                  else {
                    var e = b.elementType === b.type ? c.memoizedProps : Ci(b.type, c.memoizedProps);
                    d.componentDidUpdate(e, c.memoizedState, d.__reactInternalSnapshotBeforeUpdate);
                  }
                  var f = b.updateQueue;
                  null !== f && sh(b, f, d);
                  break;
                case 3:
                  var g = b.updateQueue;
                  if (null !== g) {
                    c = null;
                    if (null !== b.child) switch (b.child.tag) {
                      case 5:
                        c = b.child.stateNode;
                        break;
                      case 1:
                        c = b.child.stateNode;
                    }
                    sh(b, g, c);
                  }
                  break;
                case 5:
                  var h = b.stateNode;
                  if (null === c && b.flags & 4) {
                    c = h;
                    var k = b.memoizedProps;
                    switch (b.type) {
                      case "button":
                      case "input":
                      case "select":
                      case "textarea":
                        k.autoFocus && c.focus();
                        break;
                      case "img":
                        k.src && (c.src = k.src);
                    }
                  }
                  break;
                case 6:
                  break;
                case 4:
                  break;
                case 12:
                  break;
                case 13:
                  if (null === b.memoizedState) {
                    var l = b.alternate;
                    if (null !== l) {
                      var m = l.memoizedState;
                      if (null !== m) {
                        var q = m.dehydrated;
                        null !== q && bd(q);
                      }
                    }
                  }
                  break;
                case 19:
                case 17:
                case 21:
                case 22:
                case 23:
                case 25:
                  break;
                default:
                  throw Error(p(163));
              }
              U || b.flags & 512 && Rj(b);
            } catch (r) {
              W(b, b.return, r);
            }
          }
          if (b === a) {
            V = null;
            break;
          }
          c = b.sibling;
          if (null !== c) {
            c.return = b.return;
            V = c;
            break;
          }
          V = b.return;
        }
      }
      function gk(a) {
        for (; null !== V; ) {
          var b = V;
          if (b === a) {
            V = null;
            break;
          }
          var c = b.sibling;
          if (null !== c) {
            c.return = b.return;
            V = c;
            break;
          }
          V = b.return;
        }
      }
      function jk(a) {
        for (; null !== V; ) {
          var b = V;
          try {
            switch (b.tag) {
              case 0:
              case 11:
              case 15:
                var c = b.return;
                try {
                  Qj(4, b);
                } catch (k) {
                  W(b, c, k);
                }
                break;
              case 1:
                var d = b.stateNode;
                if ("function" === typeof d.componentDidMount) {
                  var e = b.return;
                  try {
                    d.componentDidMount();
                  } catch (k) {
                    W(b, e, k);
                  }
                }
                var f = b.return;
                try {
                  Rj(b);
                } catch (k) {
                  W(b, f, k);
                }
                break;
              case 5:
                var g = b.return;
                try {
                  Rj(b);
                } catch (k) {
                  W(b, g, k);
                }
            }
          } catch (k) {
            W(b, b.return, k);
          }
          if (b === a) {
            V = null;
            break;
          }
          var h = b.sibling;
          if (null !== h) {
            h.return = b.return;
            V = h;
            break;
          }
          V = b.return;
        }
      }
      var lk = Math.ceil;
      var mk = ua.ReactCurrentDispatcher;
      var nk = ua.ReactCurrentOwner;
      var ok = ua.ReactCurrentBatchConfig;
      var K = 0;
      var Q = null;
      var Y = null;
      var Z = 0;
      var fj = 0;
      var ej = Uf(0);
      var T = 0;
      var pk = null;
      var rh = 0;
      var qk = 0;
      var rk = 0;
      var sk = null;
      var tk = null;
      var fk = 0;
      var Gj = Infinity;
      var uk = null;
      var Oi = false;
      var Pi = null;
      var Ri = null;
      var vk = false;
      var wk = null;
      var xk = 0;
      var yk = 0;
      var zk = null;
      var Ak = -1;
      var Bk = 0;
      function R() {
        return 0 !== (K & 6) ? B() : -1 !== Ak ? Ak : Ak = B();
      }
      function yi(a) {
        if (0 === (a.mode & 1)) return 1;
        if (0 !== (K & 2) && 0 !== Z) return Z & -Z;
        if (null !== Kg.transition) return 0 === Bk && (Bk = yc()), Bk;
        a = C;
        if (0 !== a) return a;
        a = window.event;
        a = void 0 === a ? 16 : jd(a.type);
        return a;
      }
      function gi(a, b, c, d) {
        if (50 < yk) throw yk = 0, zk = null, Error(p(185));
        Ac(a, c, d);
        if (0 === (K & 2) || a !== Q) a === Q && (0 === (K & 2) && (qk |= c), 4 === T && Ck(a, Z)), Dk(a, d), 1 === c && 0 === K && 0 === (b.mode & 1) && (Gj = B() + 500, fg && jg());
      }
      function Dk(a, b) {
        var c = a.callbackNode;
        wc(a, b);
        var d = uc(a, a === Q ? Z : 0);
        if (0 === d) null !== c && bc(c), a.callbackNode = null, a.callbackPriority = 0;
        else if (b = d & -d, a.callbackPriority !== b) {
          null != c && bc(c);
          if (1 === b) 0 === a.tag ? ig(Ek.bind(null, a)) : hg(Ek.bind(null, a)), Jf(function() {
            0 === (K & 6) && jg();
          }), c = null;
          else {
            switch (Dc(d)) {
              case 1:
                c = fc;
                break;
              case 4:
                c = gc;
                break;
              case 16:
                c = hc;
                break;
              case 536870912:
                c = jc;
                break;
              default:
                c = hc;
            }
            c = Fk(c, Gk.bind(null, a));
          }
          a.callbackPriority = b;
          a.callbackNode = c;
        }
      }
      function Gk(a, b) {
        Ak = -1;
        Bk = 0;
        if (0 !== (K & 6)) throw Error(p(327));
        var c = a.callbackNode;
        if (Hk() && a.callbackNode !== c) return null;
        var d = uc(a, a === Q ? Z : 0);
        if (0 === d) return null;
        if (0 !== (d & 30) || 0 !== (d & a.expiredLanes) || b) b = Ik(a, d);
        else {
          b = d;
          var e = K;
          K |= 2;
          var f = Jk();
          if (Q !== a || Z !== b) uk = null, Gj = B() + 500, Kk(a, b);
          do
            try {
              Lk();
              break;
            } catch (h) {
              Mk(a, h);
            }
          while (1);
          $g();
          mk.current = f;
          K = e;
          null !== Y ? b = 0 : (Q = null, Z = 0, b = T);
        }
        if (0 !== b) {
          2 === b && (e = xc(a), 0 !== e && (d = e, b = Nk(a, e)));
          if (1 === b) throw c = pk, Kk(a, 0), Ck(a, d), Dk(a, B()), c;
          if (6 === b) Ck(a, d);
          else {
            e = a.current.alternate;
            if (0 === (d & 30) && !Ok(e) && (b = Ik(a, d), 2 === b && (f = xc(a), 0 !== f && (d = f, b = Nk(a, f))), 1 === b)) throw c = pk, Kk(a, 0), Ck(a, d), Dk(a, B()), c;
            a.finishedWork = e;
            a.finishedLanes = d;
            switch (b) {
              case 0:
              case 1:
                throw Error(p(345));
              case 2:
                Pk(a, tk, uk);
                break;
              case 3:
                Ck(a, d);
                if ((d & 130023424) === d && (b = fk + 500 - B(), 10 < b)) {
                  if (0 !== uc(a, 0)) break;
                  e = a.suspendedLanes;
                  if ((e & d) !== d) {
                    R();
                    a.pingedLanes |= a.suspendedLanes & e;
                    break;
                  }
                  a.timeoutHandle = Ff(Pk.bind(null, a, tk, uk), b);
                  break;
                }
                Pk(a, tk, uk);
                break;
              case 4:
                Ck(a, d);
                if ((d & 4194240) === d) break;
                b = a.eventTimes;
                for (e = -1; 0 < d; ) {
                  var g = 31 - oc(d);
                  f = 1 << g;
                  g = b[g];
                  g > e && (e = g);
                  d &= ~f;
                }
                d = e;
                d = B() - d;
                d = (120 > d ? 120 : 480 > d ? 480 : 1080 > d ? 1080 : 1920 > d ? 1920 : 3e3 > d ? 3e3 : 4320 > d ? 4320 : 1960 * lk(d / 1960)) - d;
                if (10 < d) {
                  a.timeoutHandle = Ff(Pk.bind(null, a, tk, uk), d);
                  break;
                }
                Pk(a, tk, uk);
                break;
              case 5:
                Pk(a, tk, uk);
                break;
              default:
                throw Error(p(329));
            }
          }
        }
        Dk(a, B());
        return a.callbackNode === c ? Gk.bind(null, a) : null;
      }
      function Nk(a, b) {
        var c = sk;
        a.current.memoizedState.isDehydrated && (Kk(a, b).flags |= 256);
        a = Ik(a, b);
        2 !== a && (b = tk, tk = c, null !== b && Fj(b));
        return a;
      }
      function Fj(a) {
        null === tk ? tk = a : tk.push.apply(tk, a);
      }
      function Ok(a) {
        for (var b = a; ; ) {
          if (b.flags & 16384) {
            var c = b.updateQueue;
            if (null !== c && (c = c.stores, null !== c)) for (var d = 0; d < c.length; d++) {
              var e = c[d], f = e.getSnapshot;
              e = e.value;
              try {
                if (!He(f(), e)) return false;
              } catch (g) {
                return false;
              }
            }
          }
          c = b.child;
          if (b.subtreeFlags & 16384 && null !== c) c.return = b, b = c;
          else {
            if (b === a) break;
            for (; null === b.sibling; ) {
              if (null === b.return || b.return === a) return true;
              b = b.return;
            }
            b.sibling.return = b.return;
            b = b.sibling;
          }
        }
        return true;
      }
      function Ck(a, b) {
        b &= ~rk;
        b &= ~qk;
        a.suspendedLanes |= b;
        a.pingedLanes &= ~b;
        for (a = a.expirationTimes; 0 < b; ) {
          var c = 31 - oc(b), d = 1 << c;
          a[c] = -1;
          b &= ~d;
        }
      }
      function Ek(a) {
        if (0 !== (K & 6)) throw Error(p(327));
        Hk();
        var b = uc(a, 0);
        if (0 === (b & 1)) return Dk(a, B()), null;
        var c = Ik(a, b);
        if (0 !== a.tag && 2 === c) {
          var d = xc(a);
          0 !== d && (b = d, c = Nk(a, d));
        }
        if (1 === c) throw c = pk, Kk(a, 0), Ck(a, b), Dk(a, B()), c;
        if (6 === c) throw Error(p(345));
        a.finishedWork = a.current.alternate;
        a.finishedLanes = b;
        Pk(a, tk, uk);
        Dk(a, B());
        return null;
      }
      function Qk(a, b) {
        var c = K;
        K |= 1;
        try {
          return a(b);
        } finally {
          K = c, 0 === K && (Gj = B() + 500, fg && jg());
        }
      }
      function Rk(a) {
        null !== wk && 0 === wk.tag && 0 === (K & 6) && Hk();
        var b = K;
        K |= 1;
        var c = ok.transition, d = C;
        try {
          if (ok.transition = null, C = 1, a) return a();
        } finally {
          C = d, ok.transition = c, K = b, 0 === (K & 6) && jg();
        }
      }
      function Hj() {
        fj = ej.current;
        E(ej);
      }
      function Kk(a, b) {
        a.finishedWork = null;
        a.finishedLanes = 0;
        var c = a.timeoutHandle;
        -1 !== c && (a.timeoutHandle = -1, Gf(c));
        if (null !== Y) for (c = Y.return; null !== c; ) {
          var d = c;
          wg(d);
          switch (d.tag) {
            case 1:
              d = d.type.childContextTypes;
              null !== d && void 0 !== d && $f();
              break;
            case 3:
              zh();
              E(Wf);
              E(H);
              Eh();
              break;
            case 5:
              Bh(d);
              break;
            case 4:
              zh();
              break;
            case 13:
              E(L);
              break;
            case 19:
              E(L);
              break;
            case 10:
              ah(d.type._context);
              break;
            case 22:
            case 23:
              Hj();
          }
          c = c.return;
        }
        Q = a;
        Y = a = Pg(a.current, null);
        Z = fj = b;
        T = 0;
        pk = null;
        rk = qk = rh = 0;
        tk = sk = null;
        if (null !== fh) {
          for (b = 0; b < fh.length; b++) if (c = fh[b], d = c.interleaved, null !== d) {
            c.interleaved = null;
            var e = d.next, f = c.pending;
            if (null !== f) {
              var g = f.next;
              f.next = e;
              d.next = g;
            }
            c.pending = d;
          }
          fh = null;
        }
        return a;
      }
      function Mk(a, b) {
        do {
          var c = Y;
          try {
            $g();
            Fh.current = Rh;
            if (Ih) {
              for (var d = M.memoizedState; null !== d; ) {
                var e = d.queue;
                null !== e && (e.pending = null);
                d = d.next;
              }
              Ih = false;
            }
            Hh = 0;
            O = N = M = null;
            Jh = false;
            Kh = 0;
            nk.current = null;
            if (null === c || null === c.return) {
              T = 1;
              pk = b;
              Y = null;
              break;
            }
            a: {
              var f = a, g = c.return, h = c, k = b;
              b = Z;
              h.flags |= 32768;
              if (null !== k && "object" === typeof k && "function" === typeof k.then) {
                var l = k, m = h, q = m.tag;
                if (0 === (m.mode & 1) && (0 === q || 11 === q || 15 === q)) {
                  var r = m.alternate;
                  r ? (m.updateQueue = r.updateQueue, m.memoizedState = r.memoizedState, m.lanes = r.lanes) : (m.updateQueue = null, m.memoizedState = null);
                }
                var y = Ui(g);
                if (null !== y) {
                  y.flags &= -257;
                  Vi(y, g, h, f, b);
                  y.mode & 1 && Si(f, l, b);
                  b = y;
                  k = l;
                  var n = b.updateQueue;
                  if (null === n) {
                    var t = /* @__PURE__ */ new Set();
                    t.add(k);
                    b.updateQueue = t;
                  } else n.add(k);
                  break a;
                } else {
                  if (0 === (b & 1)) {
                    Si(f, l, b);
                    tj();
                    break a;
                  }
                  k = Error(p(426));
                }
              } else if (I && h.mode & 1) {
                var J = Ui(g);
                if (null !== J) {
                  0 === (J.flags & 65536) && (J.flags |= 256);
                  Vi(J, g, h, f, b);
                  Jg(Ji(k, h));
                  break a;
                }
              }
              f = k = Ji(k, h);
              4 !== T && (T = 2);
              null === sk ? sk = [f] : sk.push(f);
              f = g;
              do {
                switch (f.tag) {
                  case 3:
                    f.flags |= 65536;
                    b &= -b;
                    f.lanes |= b;
                    var x = Ni(f, k, b);
                    ph(f, x);
                    break a;
                  case 1:
                    h = k;
                    var w = f.type, u = f.stateNode;
                    if (0 === (f.flags & 128) && ("function" === typeof w.getDerivedStateFromError || null !== u && "function" === typeof u.componentDidCatch && (null === Ri || !Ri.has(u)))) {
                      f.flags |= 65536;
                      b &= -b;
                      f.lanes |= b;
                      var F = Qi(f, h, b);
                      ph(f, F);
                      break a;
                    }
                }
                f = f.return;
              } while (null !== f);
            }
            Sk(c);
          } catch (na) {
            b = na;
            Y === c && null !== c && (Y = c = c.return);
            continue;
          }
          break;
        } while (1);
      }
      function Jk() {
        var a = mk.current;
        mk.current = Rh;
        return null === a ? Rh : a;
      }
      function tj() {
        if (0 === T || 3 === T || 2 === T) T = 4;
        null === Q || 0 === (rh & 268435455) && 0 === (qk & 268435455) || Ck(Q, Z);
      }
      function Ik(a, b) {
        var c = K;
        K |= 2;
        var d = Jk();
        if (Q !== a || Z !== b) uk = null, Kk(a, b);
        do
          try {
            Tk();
            break;
          } catch (e) {
            Mk(a, e);
          }
        while (1);
        $g();
        K = c;
        mk.current = d;
        if (null !== Y) throw Error(p(261));
        Q = null;
        Z = 0;
        return T;
      }
      function Tk() {
        for (; null !== Y; ) Uk(Y);
      }
      function Lk() {
        for (; null !== Y && !cc(); ) Uk(Y);
      }
      function Uk(a) {
        var b = Vk(a.alternate, a, fj);
        a.memoizedProps = a.pendingProps;
        null === b ? Sk(a) : Y = b;
        nk.current = null;
      }
      function Sk(a) {
        var b = a;
        do {
          var c = b.alternate;
          a = b.return;
          if (0 === (b.flags & 32768)) {
            if (c = Ej(c, b, fj), null !== c) {
              Y = c;
              return;
            }
          } else {
            c = Ij(c, b);
            if (null !== c) {
              c.flags &= 32767;
              Y = c;
              return;
            }
            if (null !== a) a.flags |= 32768, a.subtreeFlags = 0, a.deletions = null;
            else {
              T = 6;
              Y = null;
              return;
            }
          }
          b = b.sibling;
          if (null !== b) {
            Y = b;
            return;
          }
          Y = b = a;
        } while (null !== b);
        0 === T && (T = 5);
      }
      function Pk(a, b, c) {
        var d = C, e = ok.transition;
        try {
          ok.transition = null, C = 1, Wk(a, b, c, d);
        } finally {
          ok.transition = e, C = d;
        }
        return null;
      }
      function Wk(a, b, c, d) {
        do
          Hk();
        while (null !== wk);
        if (0 !== (K & 6)) throw Error(p(327));
        c = a.finishedWork;
        var e = a.finishedLanes;
        if (null === c) return null;
        a.finishedWork = null;
        a.finishedLanes = 0;
        if (c === a.current) throw Error(p(177));
        a.callbackNode = null;
        a.callbackPriority = 0;
        var f = c.lanes | c.childLanes;
        Bc(a, f);
        a === Q && (Y = Q = null, Z = 0);
        0 === (c.subtreeFlags & 2064) && 0 === (c.flags & 2064) || vk || (vk = true, Fk(hc, function() {
          Hk();
          return null;
        }));
        f = 0 !== (c.flags & 15990);
        if (0 !== (c.subtreeFlags & 15990) || f) {
          f = ok.transition;
          ok.transition = null;
          var g = C;
          C = 1;
          var h = K;
          K |= 4;
          nk.current = null;
          Oj(a, c);
          dk(c, a);
          Oe(Df);
          dd = !!Cf;
          Df = Cf = null;
          a.current = c;
          hk(c, a, e);
          dc();
          K = h;
          C = g;
          ok.transition = f;
        } else a.current = c;
        vk && (vk = false, wk = a, xk = e);
        f = a.pendingLanes;
        0 === f && (Ri = null);
        mc(c.stateNode, d);
        Dk(a, B());
        if (null !== b) for (d = a.onRecoverableError, c = 0; c < b.length; c++) e = b[c], d(e.value, { componentStack: e.stack, digest: e.digest });
        if (Oi) throw Oi = false, a = Pi, Pi = null, a;
        0 !== (xk & 1) && 0 !== a.tag && Hk();
        f = a.pendingLanes;
        0 !== (f & 1) ? a === zk ? yk++ : (yk = 0, zk = a) : yk = 0;
        jg();
        return null;
      }
      function Hk() {
        if (null !== wk) {
          var a = Dc(xk), b = ok.transition, c = C;
          try {
            ok.transition = null;
            C = 16 > a ? 16 : a;
            if (null === wk) var d = false;
            else {
              a = wk;
              wk = null;
              xk = 0;
              if (0 !== (K & 6)) throw Error(p(331));
              var e = K;
              K |= 4;
              for (V = a.current; null !== V; ) {
                var f = V, g = f.child;
                if (0 !== (V.flags & 16)) {
                  var h = f.deletions;
                  if (null !== h) {
                    for (var k = 0; k < h.length; k++) {
                      var l = h[k];
                      for (V = l; null !== V; ) {
                        var m = V;
                        switch (m.tag) {
                          case 0:
                          case 11:
                          case 15:
                            Pj(8, m, f);
                        }
                        var q = m.child;
                        if (null !== q) q.return = m, V = q;
                        else for (; null !== V; ) {
                          m = V;
                          var r = m.sibling, y = m.return;
                          Sj(m);
                          if (m === l) {
                            V = null;
                            break;
                          }
                          if (null !== r) {
                            r.return = y;
                            V = r;
                            break;
                          }
                          V = y;
                        }
                      }
                    }
                    var n = f.alternate;
                    if (null !== n) {
                      var t = n.child;
                      if (null !== t) {
                        n.child = null;
                        do {
                          var J = t.sibling;
                          t.sibling = null;
                          t = J;
                        } while (null !== t);
                      }
                    }
                    V = f;
                  }
                }
                if (0 !== (f.subtreeFlags & 2064) && null !== g) g.return = f, V = g;
                else b: for (; null !== V; ) {
                  f = V;
                  if (0 !== (f.flags & 2048)) switch (f.tag) {
                    case 0:
                    case 11:
                    case 15:
                      Pj(9, f, f.return);
                  }
                  var x = f.sibling;
                  if (null !== x) {
                    x.return = f.return;
                    V = x;
                    break b;
                  }
                  V = f.return;
                }
              }
              var w = a.current;
              for (V = w; null !== V; ) {
                g = V;
                var u = g.child;
                if (0 !== (g.subtreeFlags & 2064) && null !== u) u.return = g, V = u;
                else b: for (g = w; null !== V; ) {
                  h = V;
                  if (0 !== (h.flags & 2048)) try {
                    switch (h.tag) {
                      case 0:
                      case 11:
                      case 15:
                        Qj(9, h);
                    }
                  } catch (na) {
                    W(h, h.return, na);
                  }
                  if (h === g) {
                    V = null;
                    break b;
                  }
                  var F = h.sibling;
                  if (null !== F) {
                    F.return = h.return;
                    V = F;
                    break b;
                  }
                  V = h.return;
                }
              }
              K = e;
              jg();
              if (lc && "function" === typeof lc.onPostCommitFiberRoot) try {
                lc.onPostCommitFiberRoot(kc, a);
              } catch (na) {
              }
              d = true;
            }
            return d;
          } finally {
            C = c, ok.transition = b;
          }
        }
        return false;
      }
      function Xk(a, b, c) {
        b = Ji(c, b);
        b = Ni(a, b, 1);
        a = nh(a, b, 1);
        b = R();
        null !== a && (Ac(a, 1, b), Dk(a, b));
      }
      function W(a, b, c) {
        if (3 === a.tag) Xk(a, a, c);
        else for (; null !== b; ) {
          if (3 === b.tag) {
            Xk(b, a, c);
            break;
          } else if (1 === b.tag) {
            var d = b.stateNode;
            if ("function" === typeof b.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === Ri || !Ri.has(d))) {
              a = Ji(c, a);
              a = Qi(b, a, 1);
              b = nh(b, a, 1);
              a = R();
              null !== b && (Ac(b, 1, a), Dk(b, a));
              break;
            }
          }
          b = b.return;
        }
      }
      function Ti(a, b, c) {
        var d = a.pingCache;
        null !== d && d.delete(b);
        b = R();
        a.pingedLanes |= a.suspendedLanes & c;
        Q === a && (Z & c) === c && (4 === T || 3 === T && (Z & 130023424) === Z && 500 > B() - fk ? Kk(a, 0) : rk |= c);
        Dk(a, b);
      }
      function Yk(a, b) {
        0 === b && (0 === (a.mode & 1) ? b = 1 : (b = sc, sc <<= 1, 0 === (sc & 130023424) && (sc = 4194304)));
        var c = R();
        a = ih(a, b);
        null !== a && (Ac(a, b, c), Dk(a, c));
      }
      function uj(a) {
        var b = a.memoizedState, c = 0;
        null !== b && (c = b.retryLane);
        Yk(a, c);
      }
      function bk(a, b) {
        var c = 0;
        switch (a.tag) {
          case 13:
            var d = a.stateNode;
            var e = a.memoizedState;
            null !== e && (c = e.retryLane);
            break;
          case 19:
            d = a.stateNode;
            break;
          default:
            throw Error(p(314));
        }
        null !== d && d.delete(b);
        Yk(a, c);
      }
      var Vk;
      Vk = function(a, b, c) {
        if (null !== a) if (a.memoizedProps !== b.pendingProps || Wf.current) dh = true;
        else {
          if (0 === (a.lanes & c) && 0 === (b.flags & 128)) return dh = false, yj(a, b, c);
          dh = 0 !== (a.flags & 131072) ? true : false;
        }
        else dh = false, I && 0 !== (b.flags & 1048576) && ug(b, ng, b.index);
        b.lanes = 0;
        switch (b.tag) {
          case 2:
            var d = b.type;
            ij(a, b);
            a = b.pendingProps;
            var e = Yf(b, H.current);
            ch(b, c);
            e = Nh(null, b, d, a, e, c);
            var f = Sh();
            b.flags |= 1;
            "object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof ? (b.tag = 1, b.memoizedState = null, b.updateQueue = null, Zf(d) ? (f = true, cg(b)) : f = false, b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null, kh(b), e.updater = Ei, b.stateNode = e, e._reactInternals = b, Ii(b, d, a, c), b = jj(null, b, d, true, f, c)) : (b.tag = 0, I && f && vg(b), Xi(null, b, e, c), b = b.child);
            return b;
          case 16:
            d = b.elementType;
            a: {
              ij(a, b);
              a = b.pendingProps;
              e = d._init;
              d = e(d._payload);
              b.type = d;
              e = b.tag = Zk(d);
              a = Ci(d, a);
              switch (e) {
                case 0:
                  b = cj(null, b, d, a, c);
                  break a;
                case 1:
                  b = hj(null, b, d, a, c);
                  break a;
                case 11:
                  b = Yi(null, b, d, a, c);
                  break a;
                case 14:
                  b = $i(null, b, d, Ci(d.type, a), c);
                  break a;
              }
              throw Error(p(
                306,
                d,
                ""
              ));
            }
            return b;
          case 0:
            return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), cj(a, b, d, e, c);
          case 1:
            return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), hj(a, b, d, e, c);
          case 3:
            a: {
              kj(b);
              if (null === a) throw Error(p(387));
              d = b.pendingProps;
              f = b.memoizedState;
              e = f.element;
              lh(a, b);
              qh(b, d, null, c);
              var g = b.memoizedState;
              d = g.element;
              if (f.isDehydrated) if (f = { element: d, isDehydrated: false, cache: g.cache, pendingSuspenseBoundaries: g.pendingSuspenseBoundaries, transitions: g.transitions }, b.updateQueue.baseState = f, b.memoizedState = f, b.flags & 256) {
                e = Ji(Error(p(423)), b);
                b = lj(a, b, d, c, e);
                break a;
              } else if (d !== e) {
                e = Ji(Error(p(424)), b);
                b = lj(a, b, d, c, e);
                break a;
              } else for (yg = Lf(b.stateNode.containerInfo.firstChild), xg = b, I = true, zg = null, c = Vg(b, null, d, c), b.child = c; c; ) c.flags = c.flags & -3 | 4096, c = c.sibling;
              else {
                Ig();
                if (d === e) {
                  b = Zi(a, b, c);
                  break a;
                }
                Xi(a, b, d, c);
              }
              b = b.child;
            }
            return b;
          case 5:
            return Ah(b), null === a && Eg(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, Ef(d, e) ? g = null : null !== f && Ef(d, f) && (b.flags |= 32), gj(a, b), Xi(a, b, g, c), b.child;
          case 6:
            return null === a && Eg(b), null;
          case 13:
            return oj(a, b, c);
          case 4:
            return yh(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = Ug(b, null, d, c) : Xi(a, b, d, c), b.child;
          case 11:
            return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), Yi(a, b, d, e, c);
          case 7:
            return Xi(a, b, b.pendingProps, c), b.child;
          case 8:
            return Xi(a, b, b.pendingProps.children, c), b.child;
          case 12:
            return Xi(a, b, b.pendingProps.children, c), b.child;
          case 10:
            a: {
              d = b.type._context;
              e = b.pendingProps;
              f = b.memoizedProps;
              g = e.value;
              G(Wg, d._currentValue);
              d._currentValue = g;
              if (null !== f) if (He(f.value, g)) {
                if (f.children === e.children && !Wf.current) {
                  b = Zi(a, b, c);
                  break a;
                }
              } else for (f = b.child, null !== f && (f.return = b); null !== f; ) {
                var h = f.dependencies;
                if (null !== h) {
                  g = f.child;
                  for (var k = h.firstContext; null !== k; ) {
                    if (k.context === d) {
                      if (1 === f.tag) {
                        k = mh(-1, c & -c);
                        k.tag = 2;
                        var l = f.updateQueue;
                        if (null !== l) {
                          l = l.shared;
                          var m = l.pending;
                          null === m ? k.next = k : (k.next = m.next, m.next = k);
                          l.pending = k;
                        }
                      }
                      f.lanes |= c;
                      k = f.alternate;
                      null !== k && (k.lanes |= c);
                      bh(
                        f.return,
                        c,
                        b
                      );
                      h.lanes |= c;
                      break;
                    }
                    k = k.next;
                  }
                } else if (10 === f.tag) g = f.type === b.type ? null : f.child;
                else if (18 === f.tag) {
                  g = f.return;
                  if (null === g) throw Error(p(341));
                  g.lanes |= c;
                  h = g.alternate;
                  null !== h && (h.lanes |= c);
                  bh(g, c, b);
                  g = f.sibling;
                } else g = f.child;
                if (null !== g) g.return = f;
                else for (g = f; null !== g; ) {
                  if (g === b) {
                    g = null;
                    break;
                  }
                  f = g.sibling;
                  if (null !== f) {
                    f.return = g.return;
                    g = f;
                    break;
                  }
                  g = g.return;
                }
                f = g;
              }
              Xi(a, b, e.children, c);
              b = b.child;
            }
            return b;
          case 9:
            return e = b.type, d = b.pendingProps.children, ch(b, c), e = eh(e), d = d(e), b.flags |= 1, Xi(a, b, d, c), b.child;
          case 14:
            return d = b.type, e = Ci(d, b.pendingProps), e = Ci(d.type, e), $i(a, b, d, e, c);
          case 15:
            return bj(a, b, b.type, b.pendingProps, c);
          case 17:
            return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), ij(a, b), b.tag = 1, Zf(d) ? (a = true, cg(b)) : a = false, ch(b, c), Gi(b, d, e), Ii(b, d, e, c), jj(null, b, d, true, a, c);
          case 19:
            return xj(a, b, c);
          case 22:
            return dj(a, b, c);
        }
        throw Error(p(156, b.tag));
      };
      function Fk(a, b) {
        return ac(a, b);
      }
      function $k(a, b, c, d) {
        this.tag = a;
        this.key = c;
        this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = b;
        this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
        this.mode = d;
        this.subtreeFlags = this.flags = 0;
        this.deletions = null;
        this.childLanes = this.lanes = 0;
        this.alternate = null;
      }
      function Bg(a, b, c, d) {
        return new $k(a, b, c, d);
      }
      function aj(a) {
        a = a.prototype;
        return !(!a || !a.isReactComponent);
      }
      function Zk(a) {
        if ("function" === typeof a) return aj(a) ? 1 : 0;
        if (void 0 !== a && null !== a) {
          a = a.$$typeof;
          if (a === Da) return 11;
          if (a === Ga) return 14;
        }
        return 2;
      }
      function Pg(a, b) {
        var c = a.alternate;
        null === c ? (c = Bg(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.subtreeFlags = 0, c.deletions = null);
        c.flags = a.flags & 14680064;
        c.childLanes = a.childLanes;
        c.lanes = a.lanes;
        c.child = a.child;
        c.memoizedProps = a.memoizedProps;
        c.memoizedState = a.memoizedState;
        c.updateQueue = a.updateQueue;
        b = a.dependencies;
        c.dependencies = null === b ? null : { lanes: b.lanes, firstContext: b.firstContext };
        c.sibling = a.sibling;
        c.index = a.index;
        c.ref = a.ref;
        return c;
      }
      function Rg(a, b, c, d, e, f) {
        var g = 2;
        d = a;
        if ("function" === typeof a) aj(a) && (g = 1);
        else if ("string" === typeof a) g = 5;
        else a: switch (a) {
          case ya:
            return Tg(c.children, e, f, b);
          case za:
            g = 8;
            e |= 8;
            break;
          case Aa:
            return a = Bg(12, c, b, e | 2), a.elementType = Aa, a.lanes = f, a;
          case Ea:
            return a = Bg(13, c, b, e), a.elementType = Ea, a.lanes = f, a;
          case Fa:
            return a = Bg(19, c, b, e), a.elementType = Fa, a.lanes = f, a;
          case Ia:
            return pj(c, e, f, b);
          default:
            if ("object" === typeof a && null !== a) switch (a.$$typeof) {
              case Ba:
                g = 10;
                break a;
              case Ca:
                g = 9;
                break a;
              case Da:
                g = 11;
                break a;
              case Ga:
                g = 14;
                break a;
              case Ha:
                g = 16;
                d = null;
                break a;
            }
            throw Error(p(130, null == a ? a : typeof a, ""));
        }
        b = Bg(g, c, b, e);
        b.elementType = a;
        b.type = d;
        b.lanes = f;
        return b;
      }
      function Tg(a, b, c, d) {
        a = Bg(7, a, d, b);
        a.lanes = c;
        return a;
      }
      function pj(a, b, c, d) {
        a = Bg(22, a, d, b);
        a.elementType = Ia;
        a.lanes = c;
        a.stateNode = { isHidden: false };
        return a;
      }
      function Qg(a, b, c) {
        a = Bg(6, a, null, b);
        a.lanes = c;
        return a;
      }
      function Sg(a, b, c) {
        b = Bg(4, null !== a.children ? a.children : [], a.key, b);
        b.lanes = c;
        b.stateNode = { containerInfo: a.containerInfo, pendingChildren: null, implementation: a.implementation };
        return b;
      }
      function al(a, b, c, d, e) {
        this.tag = b;
        this.containerInfo = a;
        this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
        this.timeoutHandle = -1;
        this.callbackNode = this.pendingContext = this.context = null;
        this.callbackPriority = 0;
        this.eventTimes = zc(0);
        this.expirationTimes = zc(-1);
        this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
        this.entanglements = zc(0);
        this.identifierPrefix = d;
        this.onRecoverableError = e;
        this.mutableSourceEagerHydrationData = null;
      }
      function bl(a, b, c, d, e, f, g, h, k) {
        a = new al(a, b, c, h, k);
        1 === b ? (b = 1, true === f && (b |= 8)) : b = 0;
        f = Bg(3, null, null, b);
        a.current = f;
        f.stateNode = a;
        f.memoizedState = { element: d, isDehydrated: c, cache: null, transitions: null, pendingSuspenseBoundaries: null };
        kh(f);
        return a;
      }
      function cl(a, b, c) {
        var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
        return { $$typeof: wa, key: null == d ? null : "" + d, children: a, containerInfo: b, implementation: c };
      }
      function dl(a) {
        if (!a) return Vf;
        a = a._reactInternals;
        a: {
          if (Vb(a) !== a || 1 !== a.tag) throw Error(p(170));
          var b = a;
          do {
            switch (b.tag) {
              case 3:
                b = b.stateNode.context;
                break a;
              case 1:
                if (Zf(b.type)) {
                  b = b.stateNode.__reactInternalMemoizedMergedChildContext;
                  break a;
                }
            }
            b = b.return;
          } while (null !== b);
          throw Error(p(171));
        }
        if (1 === a.tag) {
          var c = a.type;
          if (Zf(c)) return bg(a, c, b);
        }
        return b;
      }
      function el(a, b, c, d, e, f, g, h, k) {
        a = bl(c, d, true, a, e, f, g, h, k);
        a.context = dl(null);
        c = a.current;
        d = R();
        e = yi(c);
        f = mh(d, e);
        f.callback = void 0 !== b && null !== b ? b : null;
        nh(c, f, e);
        a.current.lanes = e;
        Ac(a, e, d);
        Dk(a, d);
        return a;
      }
      function fl(a, b, c, d) {
        var e = b.current, f = R(), g = yi(e);
        c = dl(c);
        null === b.context ? b.context = c : b.pendingContext = c;
        b = mh(f, g);
        b.payload = { element: a };
        d = void 0 === d ? null : d;
        null !== d && (b.callback = d);
        a = nh(e, b, g);
        null !== a && (gi(a, e, g, f), oh(a, e, g));
        return g;
      }
      function gl(a) {
        a = a.current;
        if (!a.child) return null;
        switch (a.child.tag) {
          case 5:
            return a.child.stateNode;
          default:
            return a.child.stateNode;
        }
      }
      function hl(a, b) {
        a = a.memoizedState;
        if (null !== a && null !== a.dehydrated) {
          var c = a.retryLane;
          a.retryLane = 0 !== c && c < b ? c : b;
        }
      }
      function il(a, b) {
        hl(a, b);
        (a = a.alternate) && hl(a, b);
      }
      function jl() {
        return null;
      }
      var kl = "function" === typeof reportError ? reportError : function(a) {
        console.error(a);
      };
      function ll(a) {
        this._internalRoot = a;
      }
      ml.prototype.render = ll.prototype.render = function(a) {
        var b = this._internalRoot;
        if (null === b) throw Error(p(409));
        fl(a, b, null, null);
      };
      ml.prototype.unmount = ll.prototype.unmount = function() {
        var a = this._internalRoot;
        if (null !== a) {
          this._internalRoot = null;
          var b = a.containerInfo;
          Rk(function() {
            fl(null, a, null, null);
          });
          b[uf] = null;
        }
      };
      function ml(a) {
        this._internalRoot = a;
      }
      ml.prototype.unstable_scheduleHydration = function(a) {
        if (a) {
          var b = Hc();
          a = { blockedOn: null, target: a, priority: b };
          for (var c = 0; c < Qc.length && 0 !== b && b < Qc[c].priority; c++) ;
          Qc.splice(c, 0, a);
          0 === c && Vc(a);
        }
      };
      function nl(a) {
        return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType);
      }
      function ol(a) {
        return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
      }
      function pl() {
      }
      function ql(a, b, c, d, e) {
        if (e) {
          if ("function" === typeof d) {
            var f = d;
            d = function() {
              var a2 = gl(g);
              f.call(a2);
            };
          }
          var g = el(b, d, a, 0, null, false, false, "", pl);
          a._reactRootContainer = g;
          a[uf] = g.current;
          sf(8 === a.nodeType ? a.parentNode : a);
          Rk();
          return g;
        }
        for (; e = a.lastChild; ) a.removeChild(e);
        if ("function" === typeof d) {
          var h = d;
          d = function() {
            var a2 = gl(k);
            h.call(a2);
          };
        }
        var k = bl(a, 0, false, null, null, false, false, "", pl);
        a._reactRootContainer = k;
        a[uf] = k.current;
        sf(8 === a.nodeType ? a.parentNode : a);
        Rk(function() {
          fl(b, k, c, d);
        });
        return k;
      }
      function rl(a, b, c, d, e) {
        var f = c._reactRootContainer;
        if (f) {
          var g = f;
          if ("function" === typeof e) {
            var h = e;
            e = function() {
              var a2 = gl(g);
              h.call(a2);
            };
          }
          fl(b, g, a, e);
        } else g = ql(c, b, a, e, d);
        return gl(g);
      }
      Ec = function(a) {
        switch (a.tag) {
          case 3:
            var b = a.stateNode;
            if (b.current.memoizedState.isDehydrated) {
              var c = tc(b.pendingLanes);
              0 !== c && (Cc(b, c | 1), Dk(b, B()), 0 === (K & 6) && (Gj = B() + 500, jg()));
            }
            break;
          case 13:
            Rk(function() {
              var b2 = ih(a, 1);
              if (null !== b2) {
                var c2 = R();
                gi(b2, a, 1, c2);
              }
            }), il(a, 1);
        }
      };
      Fc = function(a) {
        if (13 === a.tag) {
          var b = ih(a, 134217728);
          if (null !== b) {
            var c = R();
            gi(b, a, 134217728, c);
          }
          il(a, 134217728);
        }
      };
      Gc = function(a) {
        if (13 === a.tag) {
          var b = yi(a), c = ih(a, b);
          if (null !== c) {
            var d = R();
            gi(c, a, b, d);
          }
          il(a, b);
        }
      };
      Hc = function() {
        return C;
      };
      Ic = function(a, b) {
        var c = C;
        try {
          return C = a, b();
        } finally {
          C = c;
        }
      };
      yb = function(a, b, c) {
        switch (b) {
          case "input":
            bb(a, c);
            b = c.name;
            if ("radio" === c.type && null != b) {
              for (c = a; c.parentNode; ) c = c.parentNode;
              c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]');
              for (b = 0; b < c.length; b++) {
                var d = c[b];
                if (d !== a && d.form === a.form) {
                  var e = Db(d);
                  if (!e) throw Error(p(90));
                  Wa(d);
                  bb(d, e);
                }
              }
            }
            break;
          case "textarea":
            ib(a, c);
            break;
          case "select":
            b = c.value, null != b && fb(a, !!c.multiple, b, false);
        }
      };
      Gb = Qk;
      Hb = Rk;
      var sl = { usingClientEntryPoint: false, Events: [Cb, ue, Db, Eb, Fb, Qk] };
      var tl = { findFiberByHostInstance: Wc, bundleType: 0, version: "18.3.1", rendererPackageName: "react-dom" };
      var ul = { bundleType: tl.bundleType, version: tl.version, rendererPackageName: tl.rendererPackageName, rendererConfig: tl.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ua.ReactCurrentDispatcher, findHostInstanceByFiber: function(a) {
        a = Zb(a);
        return null === a ? null : a.stateNode;
      }, findFiberByHostInstance: tl.findFiberByHostInstance || jl, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.3.1-next-f1338f8080-20240426" };
      if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
        vl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (!vl.isDisabled && vl.supportsFiber) try {
          kc = vl.inject(ul), lc = vl;
        } catch (a) {
        }
      }
      var vl;
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = sl;
      exports.createPortal = function(a, b) {
        var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
        if (!nl(b)) throw Error(p(200));
        return cl(a, b, null, c);
      };
      exports.createRoot = function(a, b) {
        if (!nl(a)) throw Error(p(299));
        var c = false, d = "", e = kl;
        null !== b && void 0 !== b && (true === b.unstable_strictMode && (c = true), void 0 !== b.identifierPrefix && (d = b.identifierPrefix), void 0 !== b.onRecoverableError && (e = b.onRecoverableError));
        b = bl(a, 1, false, null, null, c, false, d, e);
        a[uf] = b.current;
        sf(8 === a.nodeType ? a.parentNode : a);
        return new ll(b);
      };
      exports.findDOMNode = function(a) {
        if (null == a) return null;
        if (1 === a.nodeType) return a;
        var b = a._reactInternals;
        if (void 0 === b) {
          if ("function" === typeof a.render) throw Error(p(188));
          a = Object.keys(a).join(",");
          throw Error(p(268, a));
        }
        a = Zb(b);
        a = null === a ? null : a.stateNode;
        return a;
      };
      exports.flushSync = function(a) {
        return Rk(a);
      };
      exports.hydrate = function(a, b, c) {
        if (!ol(b)) throw Error(p(200));
        return rl(null, a, b, true, c);
      };
      exports.hydrateRoot = function(a, b, c) {
        if (!nl(a)) throw Error(p(405));
        var d = null != c && c.hydratedSources || null, e = false, f = "", g = kl;
        null !== c && void 0 !== c && (true === c.unstable_strictMode && (e = true), void 0 !== c.identifierPrefix && (f = c.identifierPrefix), void 0 !== c.onRecoverableError && (g = c.onRecoverableError));
        b = el(b, null, a, 1, null != c ? c : null, e, false, f, g);
        a[uf] = b.current;
        sf(a);
        if (d) for (a = 0; a < d.length; a++) c = d[a], e = c._getVersion, e = e(c._source), null == b.mutableSourceEagerHydrationData ? b.mutableSourceEagerHydrationData = [c, e] : b.mutableSourceEagerHydrationData.push(
          c,
          e
        );
        return new ml(b);
      };
      exports.render = function(a, b, c) {
        if (!ol(b)) throw Error(p(200));
        return rl(null, a, b, false, c);
      };
      exports.unmountComponentAtNode = function(a) {
        if (!ol(a)) throw Error(p(40));
        return a._reactRootContainer ? (Rk(function() {
          rl(null, null, a, false, function() {
            a._reactRootContainer = null;
            a[uf] = null;
          });
        }), true) : false;
      };
      exports.unstable_batchedUpdates = Qk;
      exports.unstable_renderSubtreeIntoContainer = function(a, b, c, d) {
        if (!ol(c)) throw Error(p(200));
        if (null == a || void 0 === a._reactInternals) throw Error(p(38));
        return rl(a, b, c, false, d);
      };
      exports.version = "18.3.1-next-f1338f8080-20240426";
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      function checkDCE() {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
          return;
        }
        if (false) {
          throw new Error("^_^");
        }
        try {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
        } catch (err) {
          console.error(err);
        }
      }
      if (true) {
        checkDCE();
        module.exports = require_react_dom_production_min();
      } else {
        module.exports = null;
      }
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m = require_react_dom();
      if (true) {
        exports.createRoot = m.createRoot;
        exports.hydrateRoot = m.hydrateRoot;
      } else {
        i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.createRoot(c, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c, h, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.hydrateRoot(c, h, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
      }
      var i;
    }
  });

  // node_modules/@supabase/node-fetch/browser.js
  var browser_exports = {};
  __export(browser_exports, {
    Headers: () => Headers2,
    Request: () => Request2,
    Response: () => Response2,
    default: () => browser_default,
    fetch: () => fetch2
  });
  var getGlobal, globalObject, fetch2, browser_default, Headers2, Request2, Response2;
  var init_browser = __esm({
    "node_modules/@supabase/node-fetch/browser.js"() {
      "use strict";
      getGlobal = function() {
        if (typeof self !== "undefined") {
          return self;
        }
        if (typeof window !== "undefined") {
          return window;
        }
        if (typeof global !== "undefined") {
          return global;
        }
        throw new Error("unable to locate global object");
      };
      globalObject = getGlobal();
      fetch2 = globalObject.fetch;
      browser_default = globalObject.fetch.bind(globalObject);
      Headers2 = globalObject.Headers;
      Request2 = globalObject.Request;
      Response2 = globalObject.Response;
    }
  });

  // node_modules/@supabase/postgrest-js/dist/cjs/PostgrestError.js
  var require_PostgrestError = __commonJS({
    "node_modules/@supabase/postgrest-js/dist/cjs/PostgrestError.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var PostgrestError2 = class extends Error {
        constructor(context) {
          super(context.message);
          this.name = "PostgrestError";
          this.details = context.details;
          this.hint = context.hint;
          this.code = context.code;
        }
      };
      exports.default = PostgrestError2;
    }
  });

  // node_modules/@supabase/postgrest-js/dist/cjs/PostgrestBuilder.js
  var require_PostgrestBuilder = __commonJS({
    "node_modules/@supabase/postgrest-js/dist/cjs/PostgrestBuilder.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var node_fetch_1 = __importDefault((init_browser(), __toCommonJS(browser_exports)));
      var PostgrestError_1 = __importDefault(require_PostgrestError());
      var PostgrestBuilder2 = class {
        constructor(builder) {
          var _a, _b;
          this.shouldThrowOnError = false;
          this.method = builder.method;
          this.url = builder.url;
          this.headers = new Headers(builder.headers);
          this.schema = builder.schema;
          this.body = builder.body;
          this.shouldThrowOnError = (_a = builder.shouldThrowOnError) !== null && _a !== void 0 ? _a : false;
          this.signal = builder.signal;
          this.isMaybeSingle = (_b = builder.isMaybeSingle) !== null && _b !== void 0 ? _b : false;
          if (builder.fetch) {
            this.fetch = builder.fetch;
          } else if (typeof fetch === "undefined") {
            this.fetch = node_fetch_1.default;
          } else {
            this.fetch = fetch;
          }
        }
        /**
         * If there's an error with the query, throwOnError will reject the promise by
         * throwing the error instead of returning it as part of a successful response.
         *
         * {@link https://github.com/supabase/supabase-js/issues/92}
         */
        throwOnError() {
          this.shouldThrowOnError = true;
          return this;
        }
        /**
         * Set an HTTP header for the request.
         */
        setHeader(name, value) {
          this.headers = new Headers(this.headers);
          this.headers.set(name, value);
          return this;
        }
        then(onfulfilled, onrejected) {
          if (this.schema === void 0) {
          } else if (["GET", "HEAD"].includes(this.method)) {
            this.headers.set("Accept-Profile", this.schema);
          } else {
            this.headers.set("Content-Profile", this.schema);
          }
          if (this.method !== "GET" && this.method !== "HEAD") {
            this.headers.set("Content-Type", "application/json");
          }
          const _fetch = this.fetch;
          let res = _fetch(this.url.toString(), {
            method: this.method,
            headers: this.headers,
            body: JSON.stringify(this.body),
            signal: this.signal
          }).then(async (res2) => {
            var _a, _b, _c, _d;
            let error = null;
            let data = null;
            let count = null;
            let status = res2.status;
            let statusText = res2.statusText;
            if (res2.ok) {
              if (this.method !== "HEAD") {
                const body = await res2.text();
                if (body === "") {
                } else if (this.headers.get("Accept") === "text/csv") {
                  data = body;
                } else if (this.headers.get("Accept") && ((_a = this.headers.get("Accept")) === null || _a === void 0 ? void 0 : _a.includes("application/vnd.pgrst.plan+text"))) {
                  data = body;
                } else {
                  data = JSON.parse(body);
                }
              }
              const countHeader = (_b = this.headers.get("Prefer")) === null || _b === void 0 ? void 0 : _b.match(/count=(exact|planned|estimated)/);
              const contentRange = (_c = res2.headers.get("content-range")) === null || _c === void 0 ? void 0 : _c.split("/");
              if (countHeader && contentRange && contentRange.length > 1) {
                count = parseInt(contentRange[1]);
              }
              if (this.isMaybeSingle && this.method === "GET" && Array.isArray(data)) {
                if (data.length > 1) {
                  error = {
                    // https://github.com/PostgREST/postgrest/blob/a867d79c42419af16c18c3fb019eba8df992626f/src/PostgREST/Error.hs#L553
                    code: "PGRST116",
                    details: `Results contain ${data.length} rows, application/vnd.pgrst.object+json requires 1 row`,
                    hint: null,
                    message: "JSON object requested, multiple (or no) rows returned"
                  };
                  data = null;
                  count = null;
                  status = 406;
                  statusText = "Not Acceptable";
                } else if (data.length === 1) {
                  data = data[0];
                } else {
                  data = null;
                }
              }
            } else {
              const body = await res2.text();
              try {
                error = JSON.parse(body);
                if (Array.isArray(error) && res2.status === 404) {
                  data = [];
                  error = null;
                  status = 200;
                  statusText = "OK";
                }
              } catch (_e) {
                if (res2.status === 404 && body === "") {
                  status = 204;
                  statusText = "No Content";
                } else {
                  error = {
                    message: body
                  };
                }
              }
              if (error && this.isMaybeSingle && ((_d = error === null || error === void 0 ? void 0 : error.details) === null || _d === void 0 ? void 0 : _d.includes("0 rows"))) {
                error = null;
                status = 200;
                statusText = "OK";
              }
              if (error && this.shouldThrowOnError) {
                throw new PostgrestError_1.default(error);
              }
            }
            const postgrestResponse = {
              error,
              data,
              count,
              status,
              statusText
            };
            return postgrestResponse;
          });
          if (!this.shouldThrowOnError) {
            res = res.catch((fetchError) => {
              var _a, _b, _c;
              return {
                error: {
                  message: `${(_a = fetchError === null || fetchError === void 0 ? void 0 : fetchError.name) !== null && _a !== void 0 ? _a : "FetchError"}: ${fetchError === null || fetchError === void 0 ? void 0 : fetchError.message}`,
                  details: `${(_b = fetchError === null || fetchError === void 0 ? void 0 : fetchError.stack) !== null && _b !== void 0 ? _b : ""}`,
                  hint: "",
                  code: `${(_c = fetchError === null || fetchError === void 0 ? void 0 : fetchError.code) !== null && _c !== void 0 ? _c : ""}`
                },
                data: null,
                count: null,
                status: 0,
                statusText: ""
              };
            });
          }
          return res.then(onfulfilled, onrejected);
        }
        /**
         * Override the type of the returned `data`.
         *
         * @typeParam NewResult - The new result type to override with
         * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead
         */
        returns() {
          return this;
        }
        /**
         * Override the type of the returned `data` field in the response.
         *
         * @typeParam NewResult - The new type to cast the response data to
         * @typeParam Options - Optional type configuration (defaults to { merge: true })
         * @typeParam Options.merge - When true, merges the new type with existing return type. When false, replaces the existing types entirely (defaults to true)
         * @example
         * ```typescript
         * // Merge with existing types (default behavior)
         * const query = supabase
         *   .from('users')
         *   .select()
         *   .overrideTypes<{ custom_field: string }>()
         *
         * // Replace existing types completely
         * const replaceQuery = supabase
         *   .from('users')
         *   .select()
         *   .overrideTypes<{ id: number; name: string }, { merge: false }>()
         * ```
         * @returns A PostgrestBuilder instance with the new type
         */
        overrideTypes() {
          return this;
        }
      };
      exports.default = PostgrestBuilder2;
    }
  });

  // node_modules/@supabase/postgrest-js/dist/cjs/PostgrestTransformBuilder.js
  var require_PostgrestTransformBuilder = __commonJS({
    "node_modules/@supabase/postgrest-js/dist/cjs/PostgrestTransformBuilder.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var PostgrestBuilder_1 = __importDefault(require_PostgrestBuilder());
      var PostgrestTransformBuilder2 = class extends PostgrestBuilder_1.default {
        /**
         * Perform a SELECT on the query result.
         *
         * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not
         * return modified rows. By calling this method, modified rows are returned in
         * `data`.
         *
         * @param columns - The columns to retrieve, separated by commas
         */
        select(columns) {
          let quoted = false;
          const cleanedColumns = (columns !== null && columns !== void 0 ? columns : "*").split("").map((c) => {
            if (/\s/.test(c) && !quoted) {
              return "";
            }
            if (c === '"') {
              quoted = !quoted;
            }
            return c;
          }).join("");
          this.url.searchParams.set("select", cleanedColumns);
          this.headers.append("Prefer", "return=representation");
          return this;
        }
        /**
         * Order the query result by `column`.
         *
         * You can call this method multiple times to order by multiple columns.
         *
         * You can order referenced tables, but it only affects the ordering of the
         * parent table if you use `!inner` in the query.
         *
         * @param column - The column to order by
         * @param options - Named parameters
         * @param options.ascending - If `true`, the result will be in ascending order
         * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,
         * `null`s appear last.
         * @param options.referencedTable - Set this to order a referenced table by
         * its columns
         * @param options.foreignTable - Deprecated, use `options.referencedTable`
         * instead
         */
        order(column, { ascending = true, nullsFirst, foreignTable, referencedTable = foreignTable } = {}) {
          const key = referencedTable ? `${referencedTable}.order` : "order";
          const existingOrder = this.url.searchParams.get(key);
          this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ""}${column}.${ascending ? "asc" : "desc"}${nullsFirst === void 0 ? "" : nullsFirst ? ".nullsfirst" : ".nullslast"}`);
          return this;
        }
        /**
         * Limit the query result by `count`.
         *
         * @param count - The maximum number of rows to return
         * @param options - Named parameters
         * @param options.referencedTable - Set this to limit rows of referenced
         * tables instead of the parent table
         * @param options.foreignTable - Deprecated, use `options.referencedTable`
         * instead
         */
        limit(count, { foreignTable, referencedTable = foreignTable } = {}) {
          const key = typeof referencedTable === "undefined" ? "limit" : `${referencedTable}.limit`;
          this.url.searchParams.set(key, `${count}`);
          return this;
        }
        /**
         * Limit the query result by starting at an offset `from` and ending at the offset `to`.
         * Only records within this range are returned.
         * This respects the query order and if there is no order clause the range could behave unexpectedly.
         * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third
         * and fourth rows of the query.
         *
         * @param from - The starting index from which to limit the result
         * @param to - The last index to which to limit the result
         * @param options - Named parameters
         * @param options.referencedTable - Set this to limit rows of referenced
         * tables instead of the parent table
         * @param options.foreignTable - Deprecated, use `options.referencedTable`
         * instead
         */
        range(from, to, { foreignTable, referencedTable = foreignTable } = {}) {
          const keyOffset = typeof referencedTable === "undefined" ? "offset" : `${referencedTable}.offset`;
          const keyLimit = typeof referencedTable === "undefined" ? "limit" : `${referencedTable}.limit`;
          this.url.searchParams.set(keyOffset, `${from}`);
          this.url.searchParams.set(keyLimit, `${to - from + 1}`);
          return this;
        }
        /**
         * Set the AbortSignal for the fetch request.
         *
         * @param signal - The AbortSignal to use for the fetch request
         */
        abortSignal(signal) {
          this.signal = signal;
          return this;
        }
        /**
         * Return `data` as a single object instead of an array of objects.
         *
         * Query result must be one row (e.g. using `.limit(1)`), otherwise this
         * returns an error.
         */
        single() {
          this.headers.set("Accept", "application/vnd.pgrst.object+json");
          return this;
        }
        /**
         * Return `data` as a single object instead of an array of objects.
         *
         * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise
         * this returns an error.
         */
        maybeSingle() {
          if (this.method === "GET") {
            this.headers.set("Accept", "application/json");
          } else {
            this.headers.set("Accept", "application/vnd.pgrst.object+json");
          }
          this.isMaybeSingle = true;
          return this;
        }
        /**
         * Return `data` as a string in CSV format.
         */
        csv() {
          this.headers.set("Accept", "text/csv");
          return this;
        }
        /**
         * Return `data` as an object in [GeoJSON](https://geojson.org) format.
         */
        geojson() {
          this.headers.set("Accept", "application/geo+json");
          return this;
        }
        /**
         * Return `data` as the EXPLAIN plan for the query.
         *
         * You need to enable the
         * [db_plan_enabled](https://supabase.com/docs/guides/database/debugging-performance#enabling-explain)
         * setting before using this method.
         *
         * @param options - Named parameters
         *
         * @param options.analyze - If `true`, the query will be executed and the
         * actual run time will be returned
         *
         * @param options.verbose - If `true`, the query identifier will be returned
         * and `data` will include the output columns of the query
         *
         * @param options.settings - If `true`, include information on configuration
         * parameters that affect query planning
         *
         * @param options.buffers - If `true`, include information on buffer usage
         *
         * @param options.wal - If `true`, include information on WAL record generation
         *
         * @param options.format - The format of the output, can be `"text"` (default)
         * or `"json"`
         */
        explain({ analyze = false, verbose = false, settings = false, buffers = false, wal = false, format = "text" } = {}) {
          var _a;
          const options = [
            analyze ? "analyze" : null,
            verbose ? "verbose" : null,
            settings ? "settings" : null,
            buffers ? "buffers" : null,
            wal ? "wal" : null
          ].filter(Boolean).join("|");
          const forMediatype = (_a = this.headers.get("Accept")) !== null && _a !== void 0 ? _a : "application/json";
          this.headers.set("Accept", `application/vnd.pgrst.plan+${format}; for="${forMediatype}"; options=${options};`);
          if (format === "json") {
            return this;
          } else {
            return this;
          }
        }
        /**
         * Rollback the query.
         *
         * `data` will still be returned, but the query is not committed.
         */
        rollback() {
          this.headers.append("Prefer", "tx=rollback");
          return this;
        }
        /**
         * Override the type of the returned `data`.
         *
         * @typeParam NewResult - The new result type to override with
         * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead
         */
        returns() {
          return this;
        }
        /**
         * Set the maximum number of rows that can be affected by the query.
         * Only available in PostgREST v13+ and only works with PATCH and DELETE methods.
         *
         * @param value - The maximum number of rows that can be affected
         */
        maxAffected(value) {
          this.headers.append("Prefer", "handling=strict");
          this.headers.append("Prefer", `max-affected=${value}`);
          return this;
        }
      };
      exports.default = PostgrestTransformBuilder2;
    }
  });

  // node_modules/@supabase/postgrest-js/dist/cjs/PostgrestFilterBuilder.js
  var require_PostgrestFilterBuilder = __commonJS({
    "node_modules/@supabase/postgrest-js/dist/cjs/PostgrestFilterBuilder.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var PostgrestTransformBuilder_1 = __importDefault(require_PostgrestTransformBuilder());
      var PostgrestFilterBuilder2 = class extends PostgrestTransformBuilder_1.default {
        /**
         * Match only rows where `column` is equal to `value`.
         *
         * To check if the value of `column` is NULL, you should use `.is()` instead.
         *
         * @param column - The column to filter on
         * @param value - The value to filter with
         */
        eq(column, value) {
          this.url.searchParams.append(column, `eq.${value}`);
          return this;
        }
        /**
         * Match only rows where `column` is not equal to `value`.
         *
         * @param column - The column to filter on
         * @param value - The value to filter with
         */
        neq(column, value) {
          this.url.searchParams.append(column, `neq.${value}`);
          return this;
        }
        /**
         * Match only rows where `column` is greater than `value`.
         *
         * @param column - The column to filter on
         * @param value - The value to filter with
         */
        gt(column, value) {
          this.url.searchParams.append(column, `gt.${value}`);
          return this;
        }
        /**
         * Match only rows where `column` is greater than or equal to `value`.
         *
         * @param column - The column to filter on
         * @param value - The value to filter with
         */
        gte(column, value) {
          this.url.searchParams.append(column, `gte.${value}`);
          return this;
        }
        /**
         * Match only rows where `column` is less than `value`.
         *
         * @param column - The column to filter on
         * @param value - The value to filter with
         */
        lt(column, value) {
          this.url.searchParams.append(column, `lt.${value}`);
          return this;
        }
        /**
         * Match only rows where `column` is less than or equal to `value`.
         *
         * @param column - The column to filter on
         * @param value - The value to filter with
         */
        lte(column, value) {
          this.url.searchParams.append(column, `lte.${value}`);
          return this;
        }
        /**
         * Match only rows where `column` matches `pattern` case-sensitively.
         *
         * @param column - The column to filter on
         * @param pattern - The pattern to match with
         */
        like(column, pattern) {
          this.url.searchParams.append(column, `like.${pattern}`);
          return this;
        }
        /**
         * Match only rows where `column` matches all of `patterns` case-sensitively.
         *
         * @param column - The column to filter on
         * @param patterns - The patterns to match with
         */
        likeAllOf(column, patterns) {
          this.url.searchParams.append(column, `like(all).{${patterns.join(",")}}`);
          return this;
        }
        /**
         * Match only rows where `column` matches any of `patterns` case-sensitively.
         *
         * @param column - The column to filter on
         * @param patterns - The patterns to match with
         */
        likeAnyOf(column, patterns) {
          this.url.searchParams.append(column, `like(any).{${patterns.join(",")}}`);
          return this;
        }
        /**
         * Match only rows where `column` matches `pattern` case-insensitively.
         *
         * @param column - The column to filter on
         * @param pattern - The pattern to match with
         */
        ilike(column, pattern) {
          this.url.searchParams.append(column, `ilike.${pattern}`);
          return this;
        }
        /**
         * Match only rows where `column` matches all of `patterns` case-insensitively.
         *
         * @param column - The column to filter on
         * @param patterns - The patterns to match with
         */
        ilikeAllOf(column, patterns) {
          this.url.searchParams.append(column, `ilike(all).{${patterns.join(",")}}`);
          return this;
        }
        /**
         * Match only rows where `column` matches any of `patterns` case-insensitively.
         *
         * @param column - The column to filter on
         * @param patterns - The patterns to match with
         */
        ilikeAnyOf(column, patterns) {
          this.url.searchParams.append(column, `ilike(any).{${patterns.join(",")}}`);
          return this;
        }
        /**
         * Match only rows where `column` IS `value`.
         *
         * For non-boolean columns, this is only relevant for checking if the value of
         * `column` is NULL by setting `value` to `null`.
         *
         * For boolean columns, you can also set `value` to `true` or `false` and it
         * will behave the same way as `.eq()`.
         *
         * @param column - The column to filter on
         * @param value - The value to filter with
         */
        is(column, value) {
          this.url.searchParams.append(column, `is.${value}`);
          return this;
        }
        /**
         * Match only rows where `column` is included in the `values` array.
         *
         * @param column - The column to filter on
         * @param values - The values array to filter with
         */
        in(column, values) {
          const cleanedValues = Array.from(new Set(values)).map((s) => {
            if (typeof s === "string" && new RegExp("[,()]").test(s))
              return `"${s}"`;
            else
              return `${s}`;
          }).join(",");
          this.url.searchParams.append(column, `in.(${cleanedValues})`);
          return this;
        }
        /**
         * Only relevant for jsonb, array, and range columns. Match only rows where
         * `column` contains every element appearing in `value`.
         *
         * @param column - The jsonb, array, or range column to filter on
         * @param value - The jsonb, array, or range value to filter with
         */
        contains(column, value) {
          if (typeof value === "string") {
            this.url.searchParams.append(column, `cs.${value}`);
          } else if (Array.isArray(value)) {
            this.url.searchParams.append(column, `cs.{${value.join(",")}}`);
          } else {
            this.url.searchParams.append(column, `cs.${JSON.stringify(value)}`);
          }
          return this;
        }
        /**
         * Only relevant for jsonb, array, and range columns. Match only rows where
         * every element appearing in `column` is contained by `value`.
         *
         * @param column - The jsonb, array, or range column to filter on
         * @param value - The jsonb, array, or range value to filter with
         */
        containedBy(column, value) {
          if (typeof value === "string") {
            this.url.searchParams.append(column, `cd.${value}`);
          } else if (Array.isArray(value)) {
            this.url.searchParams.append(column, `cd.{${value.join(",")}}`);
          } else {
            this.url.searchParams.append(column, `cd.${JSON.stringify(value)}`);
          }
          return this;
        }
        /**
         * Only relevant for range columns. Match only rows where every element in
         * `column` is greater than any element in `range`.
         *
         * @param column - The range column to filter on
         * @param range - The range to filter with
         */
        rangeGt(column, range) {
          this.url.searchParams.append(column, `sr.${range}`);
          return this;
        }
        /**
         * Only relevant for range columns. Match only rows where every element in
         * `column` is either contained in `range` or greater than any element in
         * `range`.
         *
         * @param column - The range column to filter on
         * @param range - The range to filter with
         */
        rangeGte(column, range) {
          this.url.searchParams.append(column, `nxl.${range}`);
          return this;
        }
        /**
         * Only relevant for range columns. Match only rows where every element in
         * `column` is less than any element in `range`.
         *
         * @param column - The range column to filter on
         * @param range - The range to filter with
         */
        rangeLt(column, range) {
          this.url.searchParams.append(column, `sl.${range}`);
          return this;
        }
        /**
         * Only relevant for range columns. Match only rows where every element in
         * `column` is either contained in `range` or less than any element in
         * `range`.
         *
         * @param column - The range column to filter on
         * @param range - The range to filter with
         */
        rangeLte(column, range) {
          this.url.searchParams.append(column, `nxr.${range}`);
          return this;
        }
        /**
         * Only relevant for range columns. Match only rows where `column` is
         * mutually exclusive to `range` and there can be no element between the two
         * ranges.
         *
         * @param column - The range column to filter on
         * @param range - The range to filter with
         */
        rangeAdjacent(column, range) {
          this.url.searchParams.append(column, `adj.${range}`);
          return this;
        }
        /**
         * Only relevant for array and range columns. Match only rows where
         * `column` and `value` have an element in common.
         *
         * @param column - The array or range column to filter on
         * @param value - The array or range value to filter with
         */
        overlaps(column, value) {
          if (typeof value === "string") {
            this.url.searchParams.append(column, `ov.${value}`);
          } else {
            this.url.searchParams.append(column, `ov.{${value.join(",")}}`);
          }
          return this;
        }
        /**
         * Only relevant for text and tsvector columns. Match only rows where
         * `column` matches the query string in `query`.
         *
         * @param column - The text or tsvector column to filter on
         * @param query - The query text to match with
         * @param options - Named parameters
         * @param options.config - The text search configuration to use
         * @param options.type - Change how the `query` text is interpreted
         */
        textSearch(column, query, { config, type } = {}) {
          let typePart = "";
          if (type === "plain") {
            typePart = "pl";
          } else if (type === "phrase") {
            typePart = "ph";
          } else if (type === "websearch") {
            typePart = "w";
          }
          const configPart = config === void 0 ? "" : `(${config})`;
          this.url.searchParams.append(column, `${typePart}fts${configPart}.${query}`);
          return this;
        }
        /**
         * Match only rows where each column in `query` keys is equal to its
         * associated value. Shorthand for multiple `.eq()`s.
         *
         * @param query - The object to filter with, with column names as keys mapped
         * to their filter values
         */
        match(query) {
          Object.entries(query).forEach(([column, value]) => {
            this.url.searchParams.append(column, `eq.${value}`);
          });
          return this;
        }
        /**
         * Match only rows which doesn't satisfy the filter.
         *
         * Unlike most filters, `opearator` and `value` are used as-is and need to
         * follow [PostgREST
         * syntax](https://postgrest.org/en/stable/api.html#operators). You also need
         * to make sure they are properly sanitized.
         *
         * @param column - The column to filter on
         * @param operator - The operator to be negated to filter with, following
         * PostgREST syntax
         * @param value - The value to filter with, following PostgREST syntax
         */
        not(column, operator, value) {
          this.url.searchParams.append(column, `not.${operator}.${value}`);
          return this;
        }
        /**
         * Match only rows which satisfy at least one of the filters.
         *
         * Unlike most filters, `filters` is used as-is and needs to follow [PostgREST
         * syntax](https://postgrest.org/en/stable/api.html#operators). You also need
         * to make sure it's properly sanitized.
         *
         * It's currently not possible to do an `.or()` filter across multiple tables.
         *
         * @param filters - The filters to use, following PostgREST syntax
         * @param options - Named parameters
         * @param options.referencedTable - Set this to filter on referenced tables
         * instead of the parent table
         * @param options.foreignTable - Deprecated, use `referencedTable` instead
         */
        or(filters, { foreignTable, referencedTable = foreignTable } = {}) {
          const key = referencedTable ? `${referencedTable}.or` : "or";
          this.url.searchParams.append(key, `(${filters})`);
          return this;
        }
        /**
         * Match only rows which satisfy the filter. This is an escape hatch - you
         * should use the specific filter methods wherever possible.
         *
         * Unlike most filters, `opearator` and `value` are used as-is and need to
         * follow [PostgREST
         * syntax](https://postgrest.org/en/stable/api.html#operators). You also need
         * to make sure they are properly sanitized.
         *
         * @param column - The column to filter on
         * @param operator - The operator to filter with, following PostgREST syntax
         * @param value - The value to filter with, following PostgREST syntax
         */
        filter(column, operator, value) {
          this.url.searchParams.append(column, `${operator}.${value}`);
          return this;
        }
      };
      exports.default = PostgrestFilterBuilder2;
    }
  });

  // node_modules/@supabase/postgrest-js/dist/cjs/PostgrestQueryBuilder.js
  var require_PostgrestQueryBuilder = __commonJS({
    "node_modules/@supabase/postgrest-js/dist/cjs/PostgrestQueryBuilder.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var PostgrestFilterBuilder_1 = __importDefault(require_PostgrestFilterBuilder());
      var PostgrestQueryBuilder2 = class {
        constructor(url, { headers = {}, schema, fetch: fetch3 }) {
          this.url = url;
          this.headers = new Headers(headers);
          this.schema = schema;
          this.fetch = fetch3;
        }
        /**
         * Perform a SELECT query on the table or view.
         *
         * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`
         *
         * @param options - Named parameters
         *
         * @param options.head - When set to `true`, `data` will not be returned.
         * Useful if you only need the count.
         *
         * @param options.count - Count algorithm to use to count rows in the table or view.
         *
         * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
         * hood.
         *
         * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
         * statistics under the hood.
         *
         * `"estimated"`: Uses exact count for low numbers and planned count for high
         * numbers.
         */
        select(columns, options) {
          const { head: head2 = false, count } = options !== null && options !== void 0 ? options : {};
          const method = head2 ? "HEAD" : "GET";
          let quoted = false;
          const cleanedColumns = (columns !== null && columns !== void 0 ? columns : "*").split("").map((c) => {
            if (/\s/.test(c) && !quoted) {
              return "";
            }
            if (c === '"') {
              quoted = !quoted;
            }
            return c;
          }).join("");
          this.url.searchParams.set("select", cleanedColumns);
          if (count) {
            this.headers.append("Prefer", `count=${count}`);
          }
          return new PostgrestFilterBuilder_1.default({
            method,
            url: this.url,
            headers: this.headers,
            schema: this.schema,
            fetch: this.fetch
          });
        }
        /**
         * Perform an INSERT into the table or view.
         *
         * By default, inserted rows are not returned. To return it, chain the call
         * with `.select()`.
         *
         * @param values - The values to insert. Pass an object to insert a single row
         * or an array to insert multiple rows.
         *
         * @param options - Named parameters
         *
         * @param options.count - Count algorithm to use to count inserted rows.
         *
         * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
         * hood.
         *
         * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
         * statistics under the hood.
         *
         * `"estimated"`: Uses exact count for low numbers and planned count for high
         * numbers.
         *
         * @param options.defaultToNull - Make missing fields default to `null`.
         * Otherwise, use the default value for the column. Only applies for bulk
         * inserts.
         */
        insert(values, { count, defaultToNull = true } = {}) {
          var _a;
          const method = "POST";
          if (count) {
            this.headers.append("Prefer", `count=${count}`);
          }
          if (!defaultToNull) {
            this.headers.append("Prefer", `missing=default`);
          }
          if (Array.isArray(values)) {
            const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);
            if (columns.length > 0) {
              const uniqueColumns = [...new Set(columns)].map((column) => `"${column}"`);
              this.url.searchParams.set("columns", uniqueColumns.join(","));
            }
          }
          return new PostgrestFilterBuilder_1.default({
            method,
            url: this.url,
            headers: this.headers,
            schema: this.schema,
            body: values,
            fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch
          });
        }
        /**
         * Perform an UPSERT on the table or view. Depending on the column(s) passed
         * to `onConflict`, `.upsert()` allows you to perform the equivalent of
         * `.insert()` if a row with the corresponding `onConflict` columns doesn't
         * exist, or if it does exist, perform an alternative action depending on
         * `ignoreDuplicates`.
         *
         * By default, upserted rows are not returned. To return it, chain the call
         * with `.select()`.
         *
         * @param values - The values to upsert with. Pass an object to upsert a
         * single row or an array to upsert multiple rows.
         *
         * @param options - Named parameters
         *
         * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how
         * duplicate rows are determined. Two rows are duplicates if all the
         * `onConflict` columns are equal.
         *
         * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If
         * `false`, duplicate rows are merged with existing rows.
         *
         * @param options.count - Count algorithm to use to count upserted rows.
         *
         * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
         * hood.
         *
         * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
         * statistics under the hood.
         *
         * `"estimated"`: Uses exact count for low numbers and planned count for high
         * numbers.
         *
         * @param options.defaultToNull - Make missing fields default to `null`.
         * Otherwise, use the default value for the column. This only applies when
         * inserting new rows, not when merging with existing rows under
         * `ignoreDuplicates: false`. This also only applies when doing bulk upserts.
         */
        upsert(values, { onConflict, ignoreDuplicates = false, count, defaultToNull = true } = {}) {
          var _a;
          const method = "POST";
          this.headers.append("Prefer", `resolution=${ignoreDuplicates ? "ignore" : "merge"}-duplicates`);
          if (onConflict !== void 0)
            this.url.searchParams.set("on_conflict", onConflict);
          if (count) {
            this.headers.append("Prefer", `count=${count}`);
          }
          if (!defaultToNull) {
            this.headers.append("Prefer", "missing=default");
          }
          if (Array.isArray(values)) {
            const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);
            if (columns.length > 0) {
              const uniqueColumns = [...new Set(columns)].map((column) => `"${column}"`);
              this.url.searchParams.set("columns", uniqueColumns.join(","));
            }
          }
          return new PostgrestFilterBuilder_1.default({
            method,
            url: this.url,
            headers: this.headers,
            schema: this.schema,
            body: values,
            fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch
          });
        }
        /**
         * Perform an UPDATE on the table or view.
         *
         * By default, updated rows are not returned. To return it, chain the call
         * with `.select()` after filters.
         *
         * @param values - The values to update with
         *
         * @param options - Named parameters
         *
         * @param options.count - Count algorithm to use to count updated rows.
         *
         * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
         * hood.
         *
         * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
         * statistics under the hood.
         *
         * `"estimated"`: Uses exact count for low numbers and planned count for high
         * numbers.
         */
        update(values, { count } = {}) {
          var _a;
          const method = "PATCH";
          if (count) {
            this.headers.append("Prefer", `count=${count}`);
          }
          return new PostgrestFilterBuilder_1.default({
            method,
            url: this.url,
            headers: this.headers,
            schema: this.schema,
            body: values,
            fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch
          });
        }
        /**
         * Perform a DELETE on the table or view.
         *
         * By default, deleted rows are not returned. To return it, chain the call
         * with `.select()` after filters.
         *
         * @param options - Named parameters
         *
         * @param options.count - Count algorithm to use to count deleted rows.
         *
         * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
         * hood.
         *
         * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
         * statistics under the hood.
         *
         * `"estimated"`: Uses exact count for low numbers and planned count for high
         * numbers.
         */
        delete({ count } = {}) {
          var _a;
          const method = "DELETE";
          if (count) {
            this.headers.append("Prefer", `count=${count}`);
          }
          return new PostgrestFilterBuilder_1.default({
            method,
            url: this.url,
            headers: this.headers,
            schema: this.schema,
            fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch
          });
        }
      };
      exports.default = PostgrestQueryBuilder2;
    }
  });

  // node_modules/@supabase/postgrest-js/dist/cjs/PostgrestClient.js
  var require_PostgrestClient = __commonJS({
    "node_modules/@supabase/postgrest-js/dist/cjs/PostgrestClient.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var PostgrestQueryBuilder_1 = __importDefault(require_PostgrestQueryBuilder());
      var PostgrestFilterBuilder_1 = __importDefault(require_PostgrestFilterBuilder());
      var PostgrestClient2 = class _PostgrestClient {
        // TODO: Add back shouldThrowOnError once we figure out the typings
        /**
         * Creates a PostgREST client.
         *
         * @param url - URL of the PostgREST endpoint
         * @param options - Named parameters
         * @param options.headers - Custom headers
         * @param options.schema - Postgres schema to switch to
         * @param options.fetch - Custom fetch
         */
        constructor(url, { headers = {}, schema, fetch: fetch3 } = {}) {
          this.url = url;
          this.headers = new Headers(headers);
          this.schemaName = schema;
          this.fetch = fetch3;
        }
        /**
         * Perform a query on a table or a view.
         *
         * @param relation - The table or view name to query
         */
        from(relation) {
          const url = new URL(`${this.url}/${relation}`);
          return new PostgrestQueryBuilder_1.default(url, {
            headers: new Headers(this.headers),
            schema: this.schemaName,
            fetch: this.fetch
          });
        }
        /**
         * Select a schema to query or perform an function (rpc) call.
         *
         * The schema needs to be on the list of exposed schemas inside Supabase.
         *
         * @param schema - The schema to query
         */
        schema(schema) {
          return new _PostgrestClient(this.url, {
            headers: this.headers,
            schema,
            fetch: this.fetch
          });
        }
        /**
         * Perform a function call.
         *
         * @param fn - The function name to call
         * @param args - The arguments to pass to the function call
         * @param options - Named parameters
         * @param options.head - When set to `true`, `data` will not be returned.
         * Useful if you only need the count.
         * @param options.get - When set to `true`, the function will be called with
         * read-only access mode.
         * @param options.count - Count algorithm to use to count rows returned by the
         * function. Only applicable for [set-returning
         * functions](https://www.postgresql.org/docs/current/functions-srf.html).
         *
         * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
         * hood.
         *
         * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
         * statistics under the hood.
         *
         * `"estimated"`: Uses exact count for low numbers and planned count for high
         * numbers.
         */
        rpc(fn, args = {}, { head: head2 = false, get: get2 = false, count } = {}) {
          var _a;
          let method;
          const url = new URL(`${this.url}/rpc/${fn}`);
          let body;
          if (head2 || get2) {
            method = head2 ? "HEAD" : "GET";
            Object.entries(args).filter(([_, value]) => value !== void 0).map(([name, value]) => [name, Array.isArray(value) ? `{${value.join(",")}}` : `${value}`]).forEach(([name, value]) => {
              url.searchParams.append(name, value);
            });
          } else {
            method = "POST";
            body = args;
          }
          const headers = new Headers(this.headers);
          if (count) {
            headers.set("Prefer", `count=${count}`);
          }
          return new PostgrestFilterBuilder_1.default({
            method,
            url,
            headers,
            schema: this.schemaName,
            body,
            fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch
          });
        }
      };
      exports.default = PostgrestClient2;
    }
  });

  // node_modules/@supabase/postgrest-js/dist/cjs/index.js
  var require_cjs = __commonJS({
    "node_modules/@supabase/postgrest-js/dist/cjs/index.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PostgrestError = exports.PostgrestBuilder = exports.PostgrestTransformBuilder = exports.PostgrestFilterBuilder = exports.PostgrestQueryBuilder = exports.PostgrestClient = void 0;
      var PostgrestClient_1 = __importDefault(require_PostgrestClient());
      exports.PostgrestClient = PostgrestClient_1.default;
      var PostgrestQueryBuilder_1 = __importDefault(require_PostgrestQueryBuilder());
      exports.PostgrestQueryBuilder = PostgrestQueryBuilder_1.default;
      var PostgrestFilterBuilder_1 = __importDefault(require_PostgrestFilterBuilder());
      exports.PostgrestFilterBuilder = PostgrestFilterBuilder_1.default;
      var PostgrestTransformBuilder_1 = __importDefault(require_PostgrestTransformBuilder());
      exports.PostgrestTransformBuilder = PostgrestTransformBuilder_1.default;
      var PostgrestBuilder_1 = __importDefault(require_PostgrestBuilder());
      exports.PostgrestBuilder = PostgrestBuilder_1.default;
      var PostgrestError_1 = __importDefault(require_PostgrestError());
      exports.PostgrestError = PostgrestError_1.default;
      exports.default = {
        PostgrestClient: PostgrestClient_1.default,
        PostgrestQueryBuilder: PostgrestQueryBuilder_1.default,
        PostgrestFilterBuilder: PostgrestFilterBuilder_1.default,
        PostgrestTransformBuilder: PostgrestTransformBuilder_1.default,
        PostgrestBuilder: PostgrestBuilder_1.default,
        PostgrestError: PostgrestError_1.default
      };
    }
  });

  // node_modules/@capacitor/core/dist/index.js
  var createCapacitorPlatforms, initPlatforms, CapacitorPlatforms, addPlatform, setPlatform, ExceptionCode, CapacitorException, getPlatformId, createCapacitor, initCapacitorGlobal, Capacitor2, registerPlugin, Plugins, WebPlugin, encode, decode, CapacitorCookiesPluginWeb, CapacitorCookies, readBlobAsBase64, normalizeHttpHeaders, buildUrlParams, buildRequestInit, CapacitorHttpPluginWeb, CapacitorHttp;
  var init_dist = __esm({
    "node_modules/@capacitor/core/dist/index.js"() {
      createCapacitorPlatforms = (win) => {
        const defaultPlatformMap = /* @__PURE__ */ new Map();
        defaultPlatformMap.set("web", { name: "web" });
        const capPlatforms = win.CapacitorPlatforms || {
          currentPlatform: { name: "web" },
          platforms: defaultPlatformMap
        };
        const addPlatform2 = (name, platform) => {
          capPlatforms.platforms.set(name, platform);
        };
        const setPlatform2 = (name) => {
          if (capPlatforms.platforms.has(name)) {
            capPlatforms.currentPlatform = capPlatforms.platforms.get(name);
          }
        };
        capPlatforms.addPlatform = addPlatform2;
        capPlatforms.setPlatform = setPlatform2;
        return capPlatforms;
      };
      initPlatforms = (win) => win.CapacitorPlatforms = createCapacitorPlatforms(win);
      CapacitorPlatforms = /* @__PURE__ */ initPlatforms(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
      addPlatform = CapacitorPlatforms.addPlatform;
      setPlatform = CapacitorPlatforms.setPlatform;
      (function(ExceptionCode2) {
        ExceptionCode2["Unimplemented"] = "UNIMPLEMENTED";
        ExceptionCode2["Unavailable"] = "UNAVAILABLE";
      })(ExceptionCode || (ExceptionCode = {}));
      CapacitorException = class extends Error {
        constructor(message, code, data) {
          super(message);
          this.message = message;
          this.code = code;
          this.data = data;
        }
      };
      getPlatformId = (win) => {
        var _a, _b;
        if (win === null || win === void 0 ? void 0 : win.androidBridge) {
          return "android";
        } else if ((_b = (_a = win === null || win === void 0 ? void 0 : win.webkit) === null || _a === void 0 ? void 0 : _a.messageHandlers) === null || _b === void 0 ? void 0 : _b.bridge) {
          return "ios";
        } else {
          return "web";
        }
      };
      createCapacitor = (win) => {
        var _a, _b, _c, _d, _e;
        const capCustomPlatform = win.CapacitorCustomPlatform || null;
        const cap = win.Capacitor || {};
        const Plugins2 = cap.Plugins = cap.Plugins || {};
        const capPlatforms = win.CapacitorPlatforms;
        const defaultGetPlatform = () => {
          return capCustomPlatform !== null ? capCustomPlatform.name : getPlatformId(win);
        };
        const getPlatform = ((_a = capPlatforms === null || capPlatforms === void 0 ? void 0 : capPlatforms.currentPlatform) === null || _a === void 0 ? void 0 : _a.getPlatform) || defaultGetPlatform;
        const defaultIsNativePlatform = () => getPlatform() !== "web";
        const isNativePlatform = ((_b = capPlatforms === null || capPlatforms === void 0 ? void 0 : capPlatforms.currentPlatform) === null || _b === void 0 ? void 0 : _b.isNativePlatform) || defaultIsNativePlatform;
        const defaultIsPluginAvailable = (pluginName) => {
          const plugin = registeredPlugins.get(pluginName);
          if (plugin === null || plugin === void 0 ? void 0 : plugin.platforms.has(getPlatform())) {
            return true;
          }
          if (getPluginHeader(pluginName)) {
            return true;
          }
          return false;
        };
        const isPluginAvailable = ((_c = capPlatforms === null || capPlatforms === void 0 ? void 0 : capPlatforms.currentPlatform) === null || _c === void 0 ? void 0 : _c.isPluginAvailable) || defaultIsPluginAvailable;
        const defaultGetPluginHeader = (pluginName) => {
          var _a2;
          return (_a2 = cap.PluginHeaders) === null || _a2 === void 0 ? void 0 : _a2.find((h) => h.name === pluginName);
        };
        const getPluginHeader = ((_d = capPlatforms === null || capPlatforms === void 0 ? void 0 : capPlatforms.currentPlatform) === null || _d === void 0 ? void 0 : _d.getPluginHeader) || defaultGetPluginHeader;
        const handleError3 = (err) => win.console.error(err);
        const pluginMethodNoop = (_target, prop, pluginName) => {
          return Promise.reject(`${pluginName} does not have an implementation of "${prop}".`);
        };
        const registeredPlugins = /* @__PURE__ */ new Map();
        const defaultRegisterPlugin = (pluginName, jsImplementations = {}) => {
          const registeredPlugin = registeredPlugins.get(pluginName);
          if (registeredPlugin) {
            console.warn(`Capacitor plugin "${pluginName}" already registered. Cannot register plugins twice.`);
            return registeredPlugin.proxy;
          }
          const platform = getPlatform();
          const pluginHeader = getPluginHeader(pluginName);
          let jsImplementation;
          const loadPluginImplementation = async () => {
            if (!jsImplementation && platform in jsImplementations) {
              jsImplementation = typeof jsImplementations[platform] === "function" ? jsImplementation = await jsImplementations[platform]() : jsImplementation = jsImplementations[platform];
            } else if (capCustomPlatform !== null && !jsImplementation && "web" in jsImplementations) {
              jsImplementation = typeof jsImplementations["web"] === "function" ? jsImplementation = await jsImplementations["web"]() : jsImplementation = jsImplementations["web"];
            }
            return jsImplementation;
          };
          const createPluginMethod = (impl, prop) => {
            var _a2, _b2;
            if (pluginHeader) {
              const methodHeader = pluginHeader === null || pluginHeader === void 0 ? void 0 : pluginHeader.methods.find((m) => prop === m.name);
              if (methodHeader) {
                if (methodHeader.rtype === "promise") {
                  return (options) => cap.nativePromise(pluginName, prop.toString(), options);
                } else {
                  return (options, callback) => cap.nativeCallback(pluginName, prop.toString(), options, callback);
                }
              } else if (impl) {
                return (_a2 = impl[prop]) === null || _a2 === void 0 ? void 0 : _a2.bind(impl);
              }
            } else if (impl) {
              return (_b2 = impl[prop]) === null || _b2 === void 0 ? void 0 : _b2.bind(impl);
            } else {
              throw new CapacitorException(`"${pluginName}" plugin is not implemented on ${platform}`, ExceptionCode.Unimplemented);
            }
          };
          const createPluginMethodWrapper = (prop) => {
            let remove2;
            const wrapper = (...args) => {
              const p = loadPluginImplementation().then((impl) => {
                const fn = createPluginMethod(impl, prop);
                if (fn) {
                  const p2 = fn(...args);
                  remove2 = p2 === null || p2 === void 0 ? void 0 : p2.remove;
                  return p2;
                } else {
                  throw new CapacitorException(`"${pluginName}.${prop}()" is not implemented on ${platform}`, ExceptionCode.Unimplemented);
                }
              });
              if (prop === "addListener") {
                p.remove = async () => remove2();
              }
              return p;
            };
            wrapper.toString = () => `${prop.toString()}() { [capacitor code] }`;
            Object.defineProperty(wrapper, "name", {
              value: prop,
              writable: false,
              configurable: false
            });
            return wrapper;
          };
          const addListener = createPluginMethodWrapper("addListener");
          const removeListener = createPluginMethodWrapper("removeListener");
          const addListenerNative = (eventName, callback) => {
            const call = addListener({ eventName }, callback);
            const remove2 = async () => {
              const callbackId = await call;
              removeListener({
                eventName,
                callbackId
              }, callback);
            };
            const p = new Promise((resolve2) => call.then(() => resolve2({ remove: remove2 })));
            p.remove = async () => {
              console.warn(`Using addListener() without 'await' is deprecated.`);
              await remove2();
            };
            return p;
          };
          const proxy = new Proxy({}, {
            get(_, prop) {
              switch (prop) {
                case "$$typeof":
                  return void 0;
                case "toJSON":
                  return () => ({});
                case "addListener":
                  return pluginHeader ? addListenerNative : addListener;
                case "removeListener":
                  return removeListener;
                default:
                  return createPluginMethodWrapper(prop);
              }
            }
          });
          Plugins2[pluginName] = proxy;
          registeredPlugins.set(pluginName, {
            name: pluginName,
            proxy,
            platforms: /* @__PURE__ */ new Set([
              ...Object.keys(jsImplementations),
              ...pluginHeader ? [platform] : []
            ])
          });
          return proxy;
        };
        const registerPlugin2 = ((_e = capPlatforms === null || capPlatforms === void 0 ? void 0 : capPlatforms.currentPlatform) === null || _e === void 0 ? void 0 : _e.registerPlugin) || defaultRegisterPlugin;
        if (!cap.convertFileSrc) {
          cap.convertFileSrc = (filePath) => filePath;
        }
        cap.getPlatform = getPlatform;
        cap.handleError = handleError3;
        cap.isNativePlatform = isNativePlatform;
        cap.isPluginAvailable = isPluginAvailable;
        cap.pluginMethodNoop = pluginMethodNoop;
        cap.registerPlugin = registerPlugin2;
        cap.Exception = CapacitorException;
        cap.DEBUG = !!cap.DEBUG;
        cap.isLoggingEnabled = !!cap.isLoggingEnabled;
        cap.platform = cap.getPlatform();
        cap.isNative = cap.isNativePlatform();
        return cap;
      };
      initCapacitorGlobal = (win) => win.Capacitor = createCapacitor(win);
      Capacitor2 = /* @__PURE__ */ initCapacitorGlobal(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
      registerPlugin = Capacitor2.registerPlugin;
      Plugins = Capacitor2.Plugins;
      WebPlugin = class {
        constructor(config) {
          this.listeners = {};
          this.retainedEventArguments = {};
          this.windowListeners = {};
          if (config) {
            console.warn(`Capacitor WebPlugin "${config.name}" config object was deprecated in v3 and will be removed in v4.`);
            this.config = config;
          }
        }
        addListener(eventName, listenerFunc) {
          let firstListener = false;
          const listeners = this.listeners[eventName];
          if (!listeners) {
            this.listeners[eventName] = [];
            firstListener = true;
          }
          this.listeners[eventName].push(listenerFunc);
          const windowListener = this.windowListeners[eventName];
          if (windowListener && !windowListener.registered) {
            this.addWindowListener(windowListener);
          }
          if (firstListener) {
            this.sendRetainedArgumentsForEvent(eventName);
          }
          const remove2 = async () => this.removeListener(eventName, listenerFunc);
          const p = Promise.resolve({ remove: remove2 });
          return p;
        }
        async removeAllListeners() {
          this.listeners = {};
          for (const listener in this.windowListeners) {
            this.removeWindowListener(this.windowListeners[listener]);
          }
          this.windowListeners = {};
        }
        notifyListeners(eventName, data, retainUntilConsumed) {
          const listeners = this.listeners[eventName];
          if (!listeners) {
            if (retainUntilConsumed) {
              let args = this.retainedEventArguments[eventName];
              if (!args) {
                args = [];
              }
              args.push(data);
              this.retainedEventArguments[eventName] = args;
            }
            return;
          }
          listeners.forEach((listener) => listener(data));
        }
        hasListeners(eventName) {
          return !!this.listeners[eventName].length;
        }
        registerWindowListener(windowEventName, pluginEventName) {
          this.windowListeners[pluginEventName] = {
            registered: false,
            windowEventName,
            pluginEventName,
            handler: (event) => {
              this.notifyListeners(pluginEventName, event);
            }
          };
        }
        unimplemented(msg = "not implemented") {
          return new Capacitor2.Exception(msg, ExceptionCode.Unimplemented);
        }
        unavailable(msg = "not available") {
          return new Capacitor2.Exception(msg, ExceptionCode.Unavailable);
        }
        async removeListener(eventName, listenerFunc) {
          const listeners = this.listeners[eventName];
          if (!listeners) {
            return;
          }
          const index2 = listeners.indexOf(listenerFunc);
          this.listeners[eventName].splice(index2, 1);
          if (!this.listeners[eventName].length) {
            this.removeWindowListener(this.windowListeners[eventName]);
          }
        }
        addWindowListener(handle) {
          window.addEventListener(handle.windowEventName, handle.handler);
          handle.registered = true;
        }
        removeWindowListener(handle) {
          if (!handle) {
            return;
          }
          window.removeEventListener(handle.windowEventName, handle.handler);
          handle.registered = false;
        }
        sendRetainedArgumentsForEvent(eventName) {
          const args = this.retainedEventArguments[eventName];
          if (!args) {
            return;
          }
          delete this.retainedEventArguments[eventName];
          args.forEach((arg) => {
            this.notifyListeners(eventName, arg);
          });
        }
      };
      encode = (str) => encodeURIComponent(str).replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent).replace(/[()]/g, escape);
      decode = (str) => str.replace(/(%[\dA-F]{2})+/gi, decodeURIComponent);
      CapacitorCookiesPluginWeb = class extends WebPlugin {
        async getCookies() {
          const cookies = document.cookie;
          const cookieMap = {};
          cookies.split(";").forEach((cookie) => {
            if (cookie.length <= 0)
              return;
            let [key, value] = cookie.replace(/=/, "CAP_COOKIE").split("CAP_COOKIE");
            key = decode(key).trim();
            value = decode(value).trim();
            cookieMap[key] = value;
          });
          return cookieMap;
        }
        async setCookie(options) {
          try {
            const encodedKey = encode(options.key);
            const encodedValue = encode(options.value);
            const expires = `; expires=${(options.expires || "").replace("expires=", "")}`;
            const path = (options.path || "/").replace("path=", "");
            const domain = options.url != null && options.url.length > 0 ? `domain=${options.url}` : "";
            document.cookie = `${encodedKey}=${encodedValue || ""}${expires}; path=${path}; ${domain};`;
          } catch (error) {
            return Promise.reject(error);
          }
        }
        async deleteCookie(options) {
          try {
            document.cookie = `${options.key}=; Max-Age=0`;
          } catch (error) {
            return Promise.reject(error);
          }
        }
        async clearCookies() {
          try {
            const cookies = document.cookie.split(";") || [];
            for (const cookie of cookies) {
              document.cookie = cookie.replace(/^ +/, "").replace(/=.*/, `=;expires=${(/* @__PURE__ */ new Date()).toUTCString()};path=/`);
            }
          } catch (error) {
            return Promise.reject(error);
          }
        }
        async clearAllCookies() {
          try {
            await this.clearCookies();
          } catch (error) {
            return Promise.reject(error);
          }
        }
      };
      CapacitorCookies = registerPlugin("CapacitorCookies", {
        web: () => new CapacitorCookiesPluginWeb()
      });
      readBlobAsBase64 = async (blob) => new Promise((resolve2, reject) => {
        const reader = new FileReader();
        reader.onload = () => {
          const base64String = reader.result;
          resolve2(base64String.indexOf(",") >= 0 ? base64String.split(",")[1] : base64String);
        };
        reader.onerror = (error) => reject(error);
        reader.readAsDataURL(blob);
      });
      normalizeHttpHeaders = (headers = {}) => {
        const originalKeys = Object.keys(headers);
        const loweredKeys = Object.keys(headers).map((k) => k.toLocaleLowerCase());
        const normalized = loweredKeys.reduce((acc, key, index2) => {
          acc[key] = headers[originalKeys[index2]];
          return acc;
        }, {});
        return normalized;
      };
      buildUrlParams = (params, shouldEncode = true) => {
        if (!params)
          return null;
        const output = Object.entries(params).reduce((accumulator, entry) => {
          const [key, value] = entry;
          let encodedValue;
          let item;
          if (Array.isArray(value)) {
            item = "";
            value.forEach((str) => {
              encodedValue = shouldEncode ? encodeURIComponent(str) : str;
              item += `${key}=${encodedValue}&`;
            });
            item.slice(0, -1);
          } else {
            encodedValue = shouldEncode ? encodeURIComponent(value) : value;
            item = `${key}=${encodedValue}`;
          }
          return `${accumulator}&${item}`;
        }, "");
        return output.substr(1);
      };
      buildRequestInit = (options, extra = {}) => {
        const output = Object.assign({ method: options.method || "GET", headers: options.headers }, extra);
        const headers = normalizeHttpHeaders(options.headers);
        const type = headers["content-type"] || "";
        if (typeof options.data === "string") {
          output.body = options.data;
        } else if (type.includes("application/x-www-form-urlencoded")) {
          const params = new URLSearchParams();
          for (const [key, value] of Object.entries(options.data || {})) {
            params.set(key, value);
          }
          output.body = params.toString();
        } else if (type.includes("multipart/form-data") || options.data instanceof FormData) {
          const form = new FormData();
          if (options.data instanceof FormData) {
            options.data.forEach((value, key) => {
              form.append(key, value);
            });
          } else {
            for (const key of Object.keys(options.data)) {
              form.append(key, options.data[key]);
            }
          }
          output.body = form;
          const headers2 = new Headers(output.headers);
          headers2.delete("content-type");
          output.headers = headers2;
        } else if (type.includes("application/json") || typeof options.data === "object") {
          output.body = JSON.stringify(options.data);
        }
        return output;
      };
      CapacitorHttpPluginWeb = class extends WebPlugin {
        /**
         * Perform an Http request given a set of options
         * @param options Options to build the HTTP request
         */
        async request(options) {
          const requestInit = buildRequestInit(options, options.webFetchExtra);
          const urlParams = buildUrlParams(options.params, options.shouldEncodeUrlParams);
          const url = urlParams ? `${options.url}?${urlParams}` : options.url;
          const response = await fetch(url, requestInit);
          const contentType = response.headers.get("content-type") || "";
          let { responseType = "text" } = response.ok ? options : {};
          if (contentType.includes("application/json")) {
            responseType = "json";
          }
          let data;
          let blob;
          switch (responseType) {
            case "arraybuffer":
            case "blob":
              blob = await response.blob();
              data = await readBlobAsBase64(blob);
              break;
            case "json":
              data = await response.json();
              break;
            case "document":
            case "text":
            default:
              data = await response.text();
          }
          const headers = {};
          response.headers.forEach((value, key) => {
            headers[key] = value;
          });
          return {
            data,
            headers,
            status: response.status,
            url: response.url
          };
        }
        /**
         * Perform an Http GET request given a set of options
         * @param options Options to build the HTTP request
         */
        async get(options) {
          return this.request(Object.assign(Object.assign({}, options), { method: "GET" }));
        }
        /**
         * Perform an Http POST request given a set of options
         * @param options Options to build the HTTP request
         */
        async post(options) {
          return this.request(Object.assign(Object.assign({}, options), { method: "POST" }));
        }
        /**
         * Perform an Http PUT request given a set of options
         * @param options Options to build the HTTP request
         */
        async put(options) {
          return this.request(Object.assign(Object.assign({}, options), { method: "PUT" }));
        }
        /**
         * Perform an Http PATCH request given a set of options
         * @param options Options to build the HTTP request
         */
        async patch(options) {
          return this.request(Object.assign(Object.assign({}, options), { method: "PATCH" }));
        }
        /**
         * Perform an Http DELETE request given a set of options
         * @param options Options to build the HTTP request
         */
        async delete(options) {
          return this.request(Object.assign(Object.assign({}, options), { method: "DELETE" }));
        }
      };
      CapacitorHttp = registerPlugin("CapacitorHttp", {
        web: () => new CapacitorHttpPluginWeb()
      });
    }
  });

  // node_modules/@capacitor/local-notifications/dist/esm/web.js
  var web_exports = {};
  __export(web_exports, {
    LocalNotificationsWeb: () => LocalNotificationsWeb
  });
  var LocalNotificationsWeb;
  var init_web = __esm({
    "node_modules/@capacitor/local-notifications/dist/esm/web.js"() {
      init_dist();
      LocalNotificationsWeb = class extends WebPlugin {
        constructor() {
          super(...arguments);
          this.pending = [];
          this.deliveredNotifications = [];
          this.hasNotificationSupport = () => {
            if (!("Notification" in window) || !Notification.requestPermission) {
              return false;
            }
            if (Notification.permission !== "granted") {
              try {
                new Notification("");
              } catch (e) {
                if (e.name == "TypeError") {
                  return false;
                }
              }
            }
            return true;
          };
        }
        async getDeliveredNotifications() {
          const deliveredSchemas = [];
          for (const notification of this.deliveredNotifications) {
            const deliveredSchema = {
              title: notification.title,
              id: parseInt(notification.tag),
              body: notification.body
            };
            deliveredSchemas.push(deliveredSchema);
          }
          return {
            notifications: deliveredSchemas
          };
        }
        async removeDeliveredNotifications(delivered) {
          for (const toRemove of delivered.notifications) {
            const found = this.deliveredNotifications.find((n) => n.tag === String(toRemove.id));
            found === null || found === void 0 ? void 0 : found.close();
            this.deliveredNotifications = this.deliveredNotifications.filter(() => !found);
          }
        }
        async removeAllDeliveredNotifications() {
          for (const notification of this.deliveredNotifications) {
            notification.close();
          }
          this.deliveredNotifications = [];
        }
        async createChannel() {
          throw this.unimplemented("Not implemented on web.");
        }
        async deleteChannel() {
          throw this.unimplemented("Not implemented on web.");
        }
        async listChannels() {
          throw this.unimplemented("Not implemented on web.");
        }
        async schedule(options) {
          if (!this.hasNotificationSupport()) {
            throw this.unavailable("Notifications not supported in this browser.");
          }
          for (const notification of options.notifications) {
            this.sendNotification(notification);
          }
          return {
            notifications: options.notifications.map((notification) => ({
              id: notification.id
            }))
          };
        }
        async getPending() {
          return {
            notifications: this.pending
          };
        }
        async registerActionTypes() {
          throw this.unimplemented("Not implemented on web.");
        }
        async cancel(pending) {
          this.pending = this.pending.filter((notification) => !pending.notifications.find((n) => n.id === notification.id));
        }
        async areEnabled() {
          const { display } = await this.checkPermissions();
          return {
            value: display === "granted"
          };
        }
        async changeExactNotificationSetting() {
          throw this.unimplemented("Not implemented on web.");
        }
        async checkExactNotificationSetting() {
          throw this.unimplemented("Not implemented on web.");
        }
        async requestPermissions() {
          if (!this.hasNotificationSupport()) {
            throw this.unavailable("Notifications not supported in this browser.");
          }
          const display = this.transformNotificationPermission(await Notification.requestPermission());
          return { display };
        }
        async checkPermissions() {
          if (!this.hasNotificationSupport()) {
            throw this.unavailable("Notifications not supported in this browser.");
          }
          const display = this.transformNotificationPermission(Notification.permission);
          return { display };
        }
        transformNotificationPermission(permission) {
          switch (permission) {
            case "granted":
              return "granted";
            case "denied":
              return "denied";
            default:
              return "prompt";
          }
        }
        sendPending() {
          var _a;
          const toRemove = [];
          const now2 = (/* @__PURE__ */ new Date()).getTime();
          for (const notification of this.pending) {
            if (((_a = notification.schedule) === null || _a === void 0 ? void 0 : _a.at) && notification.schedule.at.getTime() <= now2) {
              this.buildNotification(notification);
              toRemove.push(notification);
            }
          }
          this.pending = this.pending.filter((notification) => !toRemove.find((n) => n === notification));
        }
        sendNotification(notification) {
          var _a;
          if ((_a = notification.schedule) === null || _a === void 0 ? void 0 : _a.at) {
            const diff = notification.schedule.at.getTime() - (/* @__PURE__ */ new Date()).getTime();
            this.pending.push(notification);
            setTimeout(() => {
              this.sendPending();
            }, diff);
            return;
          }
          this.buildNotification(notification);
        }
        buildNotification(notification) {
          const localNotification = new Notification(notification.title, {
            body: notification.body,
            tag: String(notification.id)
          });
          localNotification.addEventListener("click", this.onClick.bind(this, notification), false);
          localNotification.addEventListener("show", this.onShow.bind(this, notification), false);
          localNotification.addEventListener("close", () => {
            this.deliveredNotifications = this.deliveredNotifications.filter(() => !this);
          }, false);
          this.deliveredNotifications.push(localNotification);
          return localNotification;
        }
        onClick(notification) {
          const data = {
            actionId: "tap",
            notification
          };
          this.notifyListeners("localNotificationActionPerformed", data);
        }
        onShow(notification) {
          this.notifyListeners("localNotificationReceived", notification);
        }
      };
    }
  });

  // node_modules/@capacitor/haptics/dist/esm/definitions.js
  var ImpactStyle2, NotificationType;
  var init_definitions = __esm({
    "node_modules/@capacitor/haptics/dist/esm/definitions.js"() {
      (function(ImpactStyle3) {
        ImpactStyle3["Heavy"] = "HEAVY";
        ImpactStyle3["Medium"] = "MEDIUM";
        ImpactStyle3["Light"] = "LIGHT";
      })(ImpactStyle2 || (ImpactStyle2 = {}));
      (function(NotificationType2) {
        NotificationType2["Success"] = "SUCCESS";
        NotificationType2["Warning"] = "WARNING";
        NotificationType2["Error"] = "ERROR";
      })(NotificationType || (NotificationType = {}));
    }
  });

  // node_modules/@capacitor/haptics/dist/esm/web.js
  var web_exports2 = {};
  __export(web_exports2, {
    HapticsWeb: () => HapticsWeb
  });
  var HapticsWeb;
  var init_web2 = __esm({
    "node_modules/@capacitor/haptics/dist/esm/web.js"() {
      init_dist();
      init_definitions();
      HapticsWeb = class extends WebPlugin {
        constructor() {
          super(...arguments);
          this.selectionStarted = false;
        }
        async impact(options) {
          const pattern = this.patternForImpact(options === null || options === void 0 ? void 0 : options.style);
          this.vibrateWithPattern(pattern);
        }
        async notification(options) {
          const pattern = this.patternForNotification(options === null || options === void 0 ? void 0 : options.type);
          this.vibrateWithPattern(pattern);
        }
        async vibrate(options) {
          const duration = (options === null || options === void 0 ? void 0 : options.duration) || 300;
          this.vibrateWithPattern([duration]);
        }
        async selectionStart() {
          this.selectionStarted = true;
        }
        async selectionChanged() {
          if (this.selectionStarted) {
            this.vibrateWithPattern([70]);
          }
        }
        async selectionEnd() {
          this.selectionStarted = false;
        }
        patternForImpact(style = ImpactStyle2.Heavy) {
          if (style === ImpactStyle2.Medium) {
            return [43];
          } else if (style === ImpactStyle2.Light) {
            return [20];
          }
          return [61];
        }
        patternForNotification(type = NotificationType.Success) {
          if (type === NotificationType.Warning) {
            return [30, 40, 30, 50, 60];
          } else if (type === NotificationType.Error) {
            return [27, 45, 50];
          }
          return [35, 65, 21];
        }
        vibrateWithPattern(pattern) {
          if (navigator.vibrate) {
            navigator.vibrate(pattern);
          } else {
            throw this.unavailable("Browser does not support the vibrate API");
          }
        }
      };
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.production.min.js
  var require_react_jsx_runtime_production_min = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.production.min.js"(exports) {
      "use strict";
      var f = require_react();
      var k = Symbol.for("react.element");
      var l = Symbol.for("react.fragment");
      var m = Object.prototype.hasOwnProperty;
      var n = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner;
      var p = { key: true, ref: true, __self: true, __source: true };
      function q(c, a, g) {
        var b, d = {}, e = null, h = null;
        void 0 !== g && (e = "" + g);
        void 0 !== a.key && (e = "" + a.key);
        void 0 !== a.ref && (h = a.ref);
        for (b in a) m.call(a, b) && !p.hasOwnProperty(b) && (d[b] = a[b]);
        if (c && c.defaultProps) for (b in a = c.defaultProps, a) void 0 === d[b] && (d[b] = a[b]);
        return { $$typeof: k, type: c, key: e, ref: h, props: d, _owner: n.current };
      }
      exports.Fragment = l;
      exports.jsx = q;
      exports.jsxs = q;
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (true) {
        module.exports = require_react_jsx_runtime_production_min();
      } else {
        module.exports = null;
      }
    }
  });

  // node_modules/@capacitor/app/dist/esm/web.js
  var web_exports3 = {};
  __export(web_exports3, {
    AppWeb: () => AppWeb
  });
  var AppWeb;
  var init_web3 = __esm({
    "node_modules/@capacitor/app/dist/esm/web.js"() {
      init_dist();
      AppWeb = class extends WebPlugin {
        constructor() {
          super();
          this.handleVisibilityChange = () => {
            const data = {
              isActive: document.hidden !== true
            };
            this.notifyListeners("appStateChange", data);
            if (document.hidden) {
              this.notifyListeners("pause", null);
            } else {
              this.notifyListeners("resume", null);
            }
          };
          document.addEventListener("visibilitychange", this.handleVisibilityChange, false);
        }
        exitApp() {
          throw this.unimplemented("Not implemented on web.");
        }
        async getInfo() {
          throw this.unimplemented("Not implemented on web.");
        }
        async getLaunchUrl() {
          return { url: "" };
        }
        async getState() {
          return { isActive: document.hidden !== true };
        }
        async minimizeApp() {
          throw this.unimplemented("Not implemented on web.");
        }
      };
    }
  });

  // node_modules/@capacitor-community/speech-recognition/dist/esm/web.js
  var web_exports4 = {};
  __export(web_exports4, {
    SpeechRecognition: () => SpeechRecognition,
    SpeechRecognitionWeb: () => SpeechRecognitionWeb
  });
  var SpeechRecognitionWeb, SpeechRecognition;
  var init_web4 = __esm({
    "node_modules/@capacitor-community/speech-recognition/dist/esm/web.js"() {
      init_dist();
      SpeechRecognitionWeb = class extends WebPlugin {
        available() {
          throw this.unimplemented("Method not implemented on web.");
        }
        start(_options) {
          throw this.unimplemented("Method not implemented on web.");
        }
        stop() {
          throw this.unimplemented("Method not implemented on web.");
        }
        getSupportedLanguages() {
          throw this.unimplemented("Method not implemented on web.");
        }
        hasPermission() {
          throw this.unimplemented("Method not implemented on web.");
        }
        isListening() {
          throw this.unimplemented("Method not implemented on web.");
        }
        requestPermission() {
          throw this.unimplemented("Method not implemented on web.");
        }
        checkPermissions() {
          throw this.unimplemented("Method not implemented on web.");
        }
        requestPermissions() {
          throw this.unimplemented("Method not implemented on web.");
        }
      };
      SpeechRecognition = new SpeechRecognitionWeb();
    }
  });

  // node_modules/@capacitor/filesystem/dist/esm/definitions.js
  var Directory, Encoding;
  var init_definitions2 = __esm({
    "node_modules/@capacitor/filesystem/dist/esm/definitions.js"() {
      (function(Directory2) {
        Directory2["Documents"] = "DOCUMENTS";
        Directory2["Data"] = "DATA";
        Directory2["Library"] = "LIBRARY";
        Directory2["Cache"] = "CACHE";
        Directory2["External"] = "EXTERNAL";
        Directory2["ExternalStorage"] = "EXTERNAL_STORAGE";
      })(Directory || (Directory = {}));
      (function(Encoding2) {
        Encoding2["UTF8"] = "utf8";
        Encoding2["ASCII"] = "ascii";
        Encoding2["UTF16"] = "utf16";
      })(Encoding || (Encoding = {}));
    }
  });

  // node_modules/@capacitor/filesystem/dist/esm/web.js
  var web_exports5 = {};
  __export(web_exports5, {
    FilesystemWeb: () => FilesystemWeb
  });
  function resolve(path) {
    const posix = path.split("/").filter((item) => item !== ".");
    const newPosix = [];
    posix.forEach((item) => {
      if (item === ".." && newPosix.length > 0 && newPosix[newPosix.length - 1] !== "..") {
        newPosix.pop();
      } else {
        newPosix.push(item);
      }
    });
    return newPosix.join("/");
  }
  function isPathParent(parent, children) {
    parent = resolve(parent);
    children = resolve(children);
    const pathsA = parent.split("/");
    const pathsB = children.split("/");
    return parent !== children && pathsA.every((value, index2) => value === pathsB[index2]);
  }
  var FilesystemWeb;
  var init_web5 = __esm({
    "node_modules/@capacitor/filesystem/dist/esm/web.js"() {
      init_dist();
      init_definitions2();
      FilesystemWeb = class _FilesystemWeb extends WebPlugin {
        constructor() {
          super(...arguments);
          this.DB_VERSION = 1;
          this.DB_NAME = "Disc";
          this._writeCmds = ["add", "put", "delete"];
          this.downloadFile = async (options) => {
            var _a, _b;
            const requestInit = buildRequestInit(options, options.webFetchExtra);
            const response = await fetch(options.url, requestInit);
            let blob;
            if (!options.progress)
              blob = await response.blob();
            else if (!(response === null || response === void 0 ? void 0 : response.body))
              blob = new Blob();
            else {
              const reader = response.body.getReader();
              let bytes = 0;
              const chunks = [];
              const contentType = response.headers.get("content-type");
              const contentLength = parseInt(response.headers.get("content-length") || "0", 10);
              while (true) {
                const { done, value } = await reader.read();
                if (done)
                  break;
                chunks.push(value);
                bytes += (value === null || value === void 0 ? void 0 : value.length) || 0;
                const status = {
                  url: options.url,
                  bytes,
                  contentLength
                };
                this.notifyListeners("progress", status);
              }
              const allChunks = new Uint8Array(bytes);
              let position = 0;
              for (const chunk of chunks) {
                if (typeof chunk === "undefined")
                  continue;
                allChunks.set(chunk, position);
                position += chunk.length;
              }
              blob = new Blob([allChunks.buffer], { type: contentType || void 0 });
            }
            const result = await this.writeFile({
              path: options.path,
              directory: (_a = options.directory) !== null && _a !== void 0 ? _a : void 0,
              recursive: (_b = options.recursive) !== null && _b !== void 0 ? _b : false,
              data: blob
            });
            return { path: result.uri, blob };
          };
        }
        async initDb() {
          if (this._db !== void 0) {
            return this._db;
          }
          if (!("indexedDB" in window)) {
            throw this.unavailable("This browser doesn't support IndexedDB");
          }
          return new Promise((resolve2, reject) => {
            const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);
            request.onupgradeneeded = _FilesystemWeb.doUpgrade;
            request.onsuccess = () => {
              this._db = request.result;
              resolve2(request.result);
            };
            request.onerror = () => reject(request.error);
            request.onblocked = () => {
              console.warn("db blocked");
            };
          });
        }
        static doUpgrade(event) {
          const eventTarget = event.target;
          const db = eventTarget.result;
          switch (event.oldVersion) {
            case 0:
            case 1:
            default: {
              if (db.objectStoreNames.contains("FileStorage")) {
                db.deleteObjectStore("FileStorage");
              }
              const store = db.createObjectStore("FileStorage", { keyPath: "path" });
              store.createIndex("by_folder", "folder");
            }
          }
        }
        async dbRequest(cmd, args) {
          const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? "readwrite" : "readonly";
          return this.initDb().then((conn) => {
            return new Promise((resolve2, reject) => {
              const tx = conn.transaction(["FileStorage"], readFlag);
              const store = tx.objectStore("FileStorage");
              const req = store[cmd](...args);
              req.onsuccess = () => resolve2(req.result);
              req.onerror = () => reject(req.error);
            });
          });
        }
        async dbIndexRequest(indexName, cmd, args) {
          const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? "readwrite" : "readonly";
          return this.initDb().then((conn) => {
            return new Promise((resolve2, reject) => {
              const tx = conn.transaction(["FileStorage"], readFlag);
              const store = tx.objectStore("FileStorage");
              const index2 = store.index(indexName);
              const req = index2[cmd](...args);
              req.onsuccess = () => resolve2(req.result);
              req.onerror = () => reject(req.error);
            });
          });
        }
        getPath(directory, uriPath) {
          const cleanedUriPath = uriPath !== void 0 ? uriPath.replace(/^[/]+|[/]+$/g, "") : "";
          let fsPath = "";
          if (directory !== void 0)
            fsPath += "/" + directory;
          if (uriPath !== "")
            fsPath += "/" + cleanedUriPath;
          return fsPath;
        }
        async clear() {
          const conn = await this.initDb();
          const tx = conn.transaction(["FileStorage"], "readwrite");
          const store = tx.objectStore("FileStorage");
          store.clear();
        }
        /**
         * Read a file from disk
         * @param options options for the file read
         * @return a promise that resolves with the read file data result
         */
        async readFile(options) {
          const path = this.getPath(options.directory, options.path);
          const entry = await this.dbRequest("get", [path]);
          if (entry === void 0)
            throw Error("File does not exist.");
          return { data: entry.content ? entry.content : "" };
        }
        /**
         * Write a file to disk in the specified location on device
         * @param options options for the file write
         * @return a promise that resolves with the file write result
         */
        async writeFile(options) {
          const path = this.getPath(options.directory, options.path);
          let data = options.data;
          const encoding = options.encoding;
          const doRecursive = options.recursive;
          const occupiedEntry = await this.dbRequest("get", [path]);
          if (occupiedEntry && occupiedEntry.type === "directory")
            throw Error("The supplied path is a directory.");
          const parentPath = path.substr(0, path.lastIndexOf("/"));
          const parentEntry = await this.dbRequest("get", [parentPath]);
          if (parentEntry === void 0) {
            const subDirIndex = parentPath.indexOf("/", 1);
            if (subDirIndex !== -1) {
              const parentArgPath = parentPath.substr(subDirIndex);
              await this.mkdir({
                path: parentArgPath,
                directory: options.directory,
                recursive: doRecursive
              });
            }
          }
          if (!encoding && !(data instanceof Blob)) {
            data = data.indexOf(",") >= 0 ? data.split(",")[1] : data;
            if (!this.isBase64String(data))
              throw Error("The supplied data is not valid base64 content.");
          }
          const now2 = Date.now();
          const pathObj = {
            path,
            folder: parentPath,
            type: "file",
            size: data instanceof Blob ? data.size : data.length,
            ctime: now2,
            mtime: now2,
            content: data
          };
          await this.dbRequest("put", [pathObj]);
          return {
            uri: pathObj.path
          };
        }
        /**
         * Append to a file on disk in the specified location on device
         * @param options options for the file append
         * @return a promise that resolves with the file write result
         */
        async appendFile(options) {
          const path = this.getPath(options.directory, options.path);
          let data = options.data;
          const encoding = options.encoding;
          const parentPath = path.substr(0, path.lastIndexOf("/"));
          const now2 = Date.now();
          let ctime = now2;
          const occupiedEntry = await this.dbRequest("get", [path]);
          if (occupiedEntry && occupiedEntry.type === "directory")
            throw Error("The supplied path is a directory.");
          const parentEntry = await this.dbRequest("get", [parentPath]);
          if (parentEntry === void 0) {
            const subDirIndex = parentPath.indexOf("/", 1);
            if (subDirIndex !== -1) {
              const parentArgPath = parentPath.substr(subDirIndex);
              await this.mkdir({
                path: parentArgPath,
                directory: options.directory,
                recursive: true
              });
            }
          }
          if (!encoding && !this.isBase64String(data))
            throw Error("The supplied data is not valid base64 content.");
          if (occupiedEntry !== void 0) {
            if (occupiedEntry.content instanceof Blob) {
              throw Error("The occupied entry contains a Blob object which cannot be appended to.");
            }
            if (occupiedEntry.content !== void 0 && !encoding) {
              data = btoa(atob(occupiedEntry.content) + atob(data));
            } else {
              data = occupiedEntry.content + data;
            }
            ctime = occupiedEntry.ctime;
          }
          const pathObj = {
            path,
            folder: parentPath,
            type: "file",
            size: data.length,
            ctime,
            mtime: now2,
            content: data
          };
          await this.dbRequest("put", [pathObj]);
        }
        /**
         * Delete a file from disk
         * @param options options for the file delete
         * @return a promise that resolves with the deleted file data result
         */
        async deleteFile(options) {
          const path = this.getPath(options.directory, options.path);
          const entry = await this.dbRequest("get", [path]);
          if (entry === void 0)
            throw Error("File does not exist.");
          const entries = await this.dbIndexRequest("by_folder", "getAllKeys", [
            IDBKeyRange.only(path)
          ]);
          if (entries.length !== 0)
            throw Error("Folder is not empty.");
          await this.dbRequest("delete", [path]);
        }
        /**
         * Create a directory.
         * @param options options for the mkdir
         * @return a promise that resolves with the mkdir result
         */
        async mkdir(options) {
          const path = this.getPath(options.directory, options.path);
          const doRecursive = options.recursive;
          const parentPath = path.substr(0, path.lastIndexOf("/"));
          const depth = (path.match(/\//g) || []).length;
          const parentEntry = await this.dbRequest("get", [parentPath]);
          const occupiedEntry = await this.dbRequest("get", [path]);
          if (depth === 1)
            throw Error("Cannot create Root directory");
          if (occupiedEntry !== void 0)
            throw Error("Current directory does already exist.");
          if (!doRecursive && depth !== 2 && parentEntry === void 0)
            throw Error("Parent directory must exist");
          if (doRecursive && depth !== 2 && parentEntry === void 0) {
            const parentArgPath = parentPath.substr(parentPath.indexOf("/", 1));
            await this.mkdir({
              path: parentArgPath,
              directory: options.directory,
              recursive: doRecursive
            });
          }
          const now2 = Date.now();
          const pathObj = {
            path,
            folder: parentPath,
            type: "directory",
            size: 0,
            ctime: now2,
            mtime: now2
          };
          await this.dbRequest("put", [pathObj]);
        }
        /**
         * Remove a directory
         * @param options the options for the directory remove
         */
        async rmdir(options) {
          const { path, directory, recursive } = options;
          const fullPath = this.getPath(directory, path);
          const entry = await this.dbRequest("get", [fullPath]);
          if (entry === void 0)
            throw Error("Folder does not exist.");
          if (entry.type !== "directory")
            throw Error("Requested path is not a directory");
          const readDirResult = await this.readdir({ path, directory });
          if (readDirResult.files.length !== 0 && !recursive)
            throw Error("Folder is not empty");
          for (const entry2 of readDirResult.files) {
            const entryPath = `${path}/${entry2.name}`;
            const entryObj = await this.stat({ path: entryPath, directory });
            if (entryObj.type === "file") {
              await this.deleteFile({ path: entryPath, directory });
            } else {
              await this.rmdir({ path: entryPath, directory, recursive });
            }
          }
          await this.dbRequest("delete", [fullPath]);
        }
        /**
         * Return a list of files from the directory (not recursive)
         * @param options the options for the readdir operation
         * @return a promise that resolves with the readdir directory listing result
         */
        async readdir(options) {
          const path = this.getPath(options.directory, options.path);
          const entry = await this.dbRequest("get", [path]);
          if (options.path !== "" && entry === void 0)
            throw Error("Folder does not exist.");
          const entries = await this.dbIndexRequest("by_folder", "getAllKeys", [IDBKeyRange.only(path)]);
          const files = await Promise.all(entries.map(async (e) => {
            let subEntry = await this.dbRequest("get", [e]);
            if (subEntry === void 0) {
              subEntry = await this.dbRequest("get", [e + "/"]);
            }
            return {
              name: e.substring(path.length + 1),
              type: subEntry.type,
              size: subEntry.size,
              ctime: subEntry.ctime,
              mtime: subEntry.mtime,
              uri: subEntry.path
            };
          }));
          return { files };
        }
        /**
         * Return full File URI for a path and directory
         * @param options the options for the stat operation
         * @return a promise that resolves with the file stat result
         */
        async getUri(options) {
          const path = this.getPath(options.directory, options.path);
          let entry = await this.dbRequest("get", [path]);
          if (entry === void 0) {
            entry = await this.dbRequest("get", [path + "/"]);
          }
          return {
            uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path
          };
        }
        /**
         * Return data about a file
         * @param options the options for the stat operation
         * @return a promise that resolves with the file stat result
         */
        async stat(options) {
          const path = this.getPath(options.directory, options.path);
          let entry = await this.dbRequest("get", [path]);
          if (entry === void 0) {
            entry = await this.dbRequest("get", [path + "/"]);
          }
          if (entry === void 0)
            throw Error("Entry does not exist.");
          return {
            type: entry.type,
            size: entry.size,
            ctime: entry.ctime,
            mtime: entry.mtime,
            uri: entry.path
          };
        }
        /**
         * Rename a file or directory
         * @param options the options for the rename operation
         * @return a promise that resolves with the rename result
         */
        async rename(options) {
          await this._copy(options, true);
          return;
        }
        /**
         * Copy a file or directory
         * @param options the options for the copy operation
         * @return a promise that resolves with the copy result
         */
        async copy(options) {
          return this._copy(options, false);
        }
        async requestPermissions() {
          return { publicStorage: "granted" };
        }
        async checkPermissions() {
          return { publicStorage: "granted" };
        }
        /**
         * Function that can perform a copy or a rename
         * @param options the options for the rename operation
         * @param doRename whether to perform a rename or copy operation
         * @return a promise that resolves with the result
         */
        async _copy(options, doRename = false) {
          let { toDirectory } = options;
          const { to, from, directory: fromDirectory } = options;
          if (!to || !from) {
            throw Error("Both to and from must be provided");
          }
          if (!toDirectory) {
            toDirectory = fromDirectory;
          }
          const fromPath = this.getPath(fromDirectory, from);
          const toPath = this.getPath(toDirectory, to);
          if (fromPath === toPath) {
            return {
              uri: toPath
            };
          }
          if (isPathParent(fromPath, toPath)) {
            throw Error("To path cannot contain the from path");
          }
          let toObj;
          try {
            toObj = await this.stat({
              path: to,
              directory: toDirectory
            });
          } catch (e) {
            const toPathComponents = to.split("/");
            toPathComponents.pop();
            const toPath2 = toPathComponents.join("/");
            if (toPathComponents.length > 0) {
              const toParentDirectory = await this.stat({
                path: toPath2,
                directory: toDirectory
              });
              if (toParentDirectory.type !== "directory") {
                throw new Error("Parent directory of the to path is a file");
              }
            }
          }
          if (toObj && toObj.type === "directory") {
            throw new Error("Cannot overwrite a directory with a file");
          }
          const fromObj = await this.stat({
            path: from,
            directory: fromDirectory
          });
          const updateTime = async (path, ctime2, mtime) => {
            const fullPath = this.getPath(toDirectory, path);
            const entry = await this.dbRequest("get", [fullPath]);
            entry.ctime = ctime2;
            entry.mtime = mtime;
            await this.dbRequest("put", [entry]);
          };
          const ctime = fromObj.ctime ? fromObj.ctime : Date.now();
          switch (fromObj.type) {
            case "file": {
              const file = await this.readFile({
                path: from,
                directory: fromDirectory
              });
              if (doRename) {
                await this.deleteFile({
                  path: from,
                  directory: fromDirectory
                });
              }
              let encoding;
              if (!(file.data instanceof Blob) && !this.isBase64String(file.data)) {
                encoding = Encoding.UTF8;
              }
              const writeResult = await this.writeFile({
                path: to,
                directory: toDirectory,
                data: file.data,
                encoding
              });
              if (doRename) {
                await updateTime(to, ctime, fromObj.mtime);
              }
              return writeResult;
            }
            case "directory": {
              if (toObj) {
                throw Error("Cannot move a directory over an existing object");
              }
              try {
                await this.mkdir({
                  path: to,
                  directory: toDirectory,
                  recursive: false
                });
                if (doRename) {
                  await updateTime(to, ctime, fromObj.mtime);
                }
              } catch (e) {
              }
              const contents = (await this.readdir({
                path: from,
                directory: fromDirectory
              })).files;
              for (const filename of contents) {
                await this._copy({
                  from: `${from}/${filename.name}`,
                  to: `${to}/${filename.name}`,
                  directory: fromDirectory,
                  toDirectory
                }, doRename);
              }
              if (doRename) {
                await this.rmdir({
                  path: from,
                  directory: fromDirectory
                });
              }
            }
          }
          return {
            uri: toPath
          };
        }
        isBase64String(str) {
          try {
            return btoa(atob(str)) == str;
          } catch (err) {
            return false;
          }
        }
      };
      FilesystemWeb._debug = true;
    }
  });

  // node_modules/@capacitor/share/dist/esm/web.js
  var web_exports6 = {};
  __export(web_exports6, {
    ShareWeb: () => ShareWeb
  });
  var ShareWeb;
  var init_web6 = __esm({
    "node_modules/@capacitor/share/dist/esm/web.js"() {
      init_dist();
      ShareWeb = class extends WebPlugin {
        async canShare() {
          if (typeof navigator === "undefined" || !navigator.share) {
            return { value: false };
          } else {
            return { value: true };
          }
        }
        async share(options) {
          if (typeof navigator === "undefined" || !navigator.share) {
            throw this.unavailable("Share API not available in this browser");
          }
          await navigator.share({
            title: options.title,
            text: options.text,
            url: options.url
          });
          return {};
        }
      };
    }
  });

  // index.tsx
  var import_react39 = __toESM(require_react());
  var import_client = __toESM(require_client());

  // App.tsx
  var import_react38 = __toESM(require_react());

  // node_modules/react-router-dom/dist/index.js
  var React2 = __toESM(require_react());
  var ReactDOM = __toESM(require_react_dom());

  // node_modules/react-router/dist/index.js
  var React = __toESM(require_react());

  // node_modules/@remix-run/router/dist/router.js
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  var Action;
  (function(Action2) {
    Action2["Pop"] = "POP";
    Action2["Push"] = "PUSH";
    Action2["Replace"] = "REPLACE";
  })(Action || (Action = {}));
  var PopStateEventType = "popstate";
  function createHashHistory(options) {
    if (options === void 0) {
      options = {};
    }
    function createHashLocation(window2, globalHistory) {
      let {
        pathname = "/",
        search = "",
        hash = ""
      } = parsePath(window2.location.hash.substr(1));
      if (!pathname.startsWith("/") && !pathname.startsWith(".")) {
        pathname = "/" + pathname;
      }
      return createLocation(
        "",
        {
          pathname,
          search,
          hash
        },
        // state defaults to `null` because `window.history.state` does
        globalHistory.state && globalHistory.state.usr || null,
        globalHistory.state && globalHistory.state.key || "default"
      );
    }
    function createHashHref(window2, to) {
      let base = window2.document.querySelector("base");
      let href = "";
      if (base && base.getAttribute("href")) {
        let url = window2.location.href;
        let hashIndex = url.indexOf("#");
        href = hashIndex === -1 ? url : url.slice(0, hashIndex);
      }
      return href + "#" + (typeof to === "string" ? to : createPath(to));
    }
    function validateHashLocation(location, to) {
      warning(location.pathname.charAt(0) === "/", "relative pathnames are not supported in hash history.push(" + JSON.stringify(to) + ")");
    }
    return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);
  }
  function invariant(value, message) {
    if (value === false || value === null || typeof value === "undefined") {
      throw new Error(message);
    }
  }
  function warning(cond, message) {
    if (!cond) {
      if (typeof console !== "undefined") console.warn(message);
      try {
        throw new Error(message);
      } catch (e) {
      }
    }
  }
  function createKey() {
    return Math.random().toString(36).substr(2, 8);
  }
  function getHistoryState(location, index2) {
    return {
      usr: location.state,
      key: location.key,
      idx: index2
    };
  }
  function createLocation(current, to, state, key) {
    if (state === void 0) {
      state = null;
    }
    let location = _extends({
      pathname: typeof current === "string" ? current : current.pathname,
      search: "",
      hash: ""
    }, typeof to === "string" ? parsePath(to) : to, {
      state,
      // TODO: This could be cleaned up.  push/replace should probably just take
      // full Locations now and avoid the need to run through this flow at all
      // But that's a pretty big refactor to the current test suite so going to
      // keep as is for the time being and just let any incoming keys take precedence
      key: to && to.key || key || createKey()
    });
    return location;
  }
  function createPath(_ref) {
    let {
      pathname = "/",
      search = "",
      hash = ""
    } = _ref;
    if (search && search !== "?") pathname += search.charAt(0) === "?" ? search : "?" + search;
    if (hash && hash !== "#") pathname += hash.charAt(0) === "#" ? hash : "#" + hash;
    return pathname;
  }
  function parsePath(path) {
    let parsedPath = {};
    if (path) {
      let hashIndex = path.indexOf("#");
      if (hashIndex >= 0) {
        parsedPath.hash = path.substr(hashIndex);
        path = path.substr(0, hashIndex);
      }
      let searchIndex = path.indexOf("?");
      if (searchIndex >= 0) {
        parsedPath.search = path.substr(searchIndex);
        path = path.substr(0, searchIndex);
      }
      if (path) {
        parsedPath.pathname = path;
      }
    }
    return parsedPath;
  }
  function getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
    if (options === void 0) {
      options = {};
    }
    let {
      window: window2 = document.defaultView,
      v5Compat = false
    } = options;
    let globalHistory = window2.history;
    let action = Action.Pop;
    let listener = null;
    let index2 = getIndex();
    if (index2 == null) {
      index2 = 0;
      globalHistory.replaceState(_extends({}, globalHistory.state, {
        idx: index2
      }), "");
    }
    function getIndex() {
      let state = globalHistory.state || {
        idx: null
      };
      return state.idx;
    }
    function handlePop() {
      action = Action.Pop;
      let nextIndex = getIndex();
      let delta = nextIndex == null ? null : nextIndex - index2;
      index2 = nextIndex;
      if (listener) {
        listener({
          action,
          location: history.location,
          delta
        });
      }
    }
    function push(to, state) {
      action = Action.Push;
      let location = createLocation(history.location, to, state);
      if (validateLocation) validateLocation(location, to);
      index2 = getIndex() + 1;
      let historyState = getHistoryState(location, index2);
      let url = history.createHref(location);
      try {
        globalHistory.pushState(historyState, "", url);
      } catch (error) {
        if (error instanceof DOMException && error.name === "DataCloneError") {
          throw error;
        }
        window2.location.assign(url);
      }
      if (v5Compat && listener) {
        listener({
          action,
          location: history.location,
          delta: 1
        });
      }
    }
    function replace2(to, state) {
      action = Action.Replace;
      let location = createLocation(history.location, to, state);
      if (validateLocation) validateLocation(location, to);
      index2 = getIndex();
      let historyState = getHistoryState(location, index2);
      let url = history.createHref(location);
      globalHistory.replaceState(historyState, "", url);
      if (v5Compat && listener) {
        listener({
          action,
          location: history.location,
          delta: 0
        });
      }
    }
    function createURL(to) {
      let base = window2.location.origin !== "null" ? window2.location.origin : window2.location.href;
      let href = typeof to === "string" ? to : createPath(to);
      href = href.replace(/ $/, "%20");
      invariant(base, "No window.location.(origin|href) available to create URL for href: " + href);
      return new URL(href, base);
    }
    let history = {
      get action() {
        return action;
      },
      get location() {
        return getLocation(window2, globalHistory);
      },
      listen(fn) {
        if (listener) {
          throw new Error("A history only accepts one active listener");
        }
        window2.addEventListener(PopStateEventType, handlePop);
        listener = fn;
        return () => {
          window2.removeEventListener(PopStateEventType, handlePop);
          listener = null;
        };
      },
      createHref(to) {
        return createHref(window2, to);
      },
      createURL,
      encodeLocation(to) {
        let url = createURL(to);
        return {
          pathname: url.pathname,
          search: url.search,
          hash: url.hash
        };
      },
      push,
      replace: replace2,
      go(n) {
        return globalHistory.go(n);
      }
    };
    return history;
  }
  var ResultType;
  (function(ResultType2) {
    ResultType2["data"] = "data";
    ResultType2["deferred"] = "deferred";
    ResultType2["redirect"] = "redirect";
    ResultType2["error"] = "error";
  })(ResultType || (ResultType = {}));
  function matchRoutes(routes, locationArg, basename) {
    if (basename === void 0) {
      basename = "/";
    }
    return matchRoutesImpl(routes, locationArg, basename, false);
  }
  function matchRoutesImpl(routes, locationArg, basename, allowPartial) {
    let location = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
    let pathname = stripBasename(location.pathname || "/", basename);
    if (pathname == null) {
      return null;
    }
    let branches = flattenRoutes(routes);
    rankRouteBranches(branches);
    let matches = null;
    for (let i = 0; matches == null && i < branches.length; ++i) {
      let decoded = decodePath(pathname);
      matches = matchRouteBranch(branches[i], decoded, allowPartial);
    }
    return matches;
  }
  function flattenRoutes(routes, branches, parentsMeta, parentPath) {
    if (branches === void 0) {
      branches = [];
    }
    if (parentsMeta === void 0) {
      parentsMeta = [];
    }
    if (parentPath === void 0) {
      parentPath = "";
    }
    let flattenRoute = (route, index2, relativePath) => {
      let meta = {
        relativePath: relativePath === void 0 ? route.path || "" : relativePath,
        caseSensitive: route.caseSensitive === true,
        childrenIndex: index2,
        route
      };
      if (meta.relativePath.startsWith("/")) {
        invariant(meta.relativePath.startsWith(parentPath), 'Absolute route path "' + meta.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes.");
        meta.relativePath = meta.relativePath.slice(parentPath.length);
      }
      let path = joinPaths([parentPath, meta.relativePath]);
      let routesMeta = parentsMeta.concat(meta);
      if (route.children && route.children.length > 0) {
        invariant(
          // Our types know better, but runtime JS may not!
          // @ts-expect-error
          route.index !== true,
          "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path + '".')
        );
        flattenRoutes(route.children, branches, routesMeta, path);
      }
      if (route.path == null && !route.index) {
        return;
      }
      branches.push({
        path,
        score: computeScore(path, route.index),
        routesMeta
      });
    };
    routes.forEach((route, index2) => {
      var _route$path;
      if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) {
        flattenRoute(route, index2);
      } else {
        for (let exploded of explodeOptionalSegments(route.path)) {
          flattenRoute(route, index2, exploded);
        }
      }
    });
    return branches;
  }
  function explodeOptionalSegments(path) {
    let segments = path.split("/");
    if (segments.length === 0) return [];
    let [first, ...rest] = segments;
    let isOptional = first.endsWith("?");
    let required = first.replace(/\?$/, "");
    if (rest.length === 0) {
      return isOptional ? [required, ""] : [required];
    }
    let restExploded = explodeOptionalSegments(rest.join("/"));
    let result = [];
    result.push(...restExploded.map((subpath) => subpath === "" ? required : [required, subpath].join("/")));
    if (isOptional) {
      result.push(...restExploded);
    }
    return result.map((exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded);
  }
  function rankRouteBranches(branches) {
    branches.sort((a, b) => a.score !== b.score ? b.score - a.score : compareIndexes(a.routesMeta.map((meta) => meta.childrenIndex), b.routesMeta.map((meta) => meta.childrenIndex)));
  }
  var paramRe = /^:[\w-]+$/;
  var dynamicSegmentValue = 3;
  var indexRouteValue = 2;
  var emptySegmentValue = 1;
  var staticSegmentValue = 10;
  var splatPenalty = -2;
  var isSplat = (s) => s === "*";
  function computeScore(path, index2) {
    let segments = path.split("/");
    let initialScore = segments.length;
    if (segments.some(isSplat)) {
      initialScore += splatPenalty;
    }
    if (index2) {
      initialScore += indexRouteValue;
    }
    return segments.filter((s) => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
  }
  function compareIndexes(a, b) {
    let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);
    return siblings ? (
      // If two routes are siblings, we should try to match the earlier sibling
      // first. This allows people to have fine-grained control over the matching
      // behavior by simply putting routes with identical paths in the order they
      // want them tried.
      a[a.length - 1] - b[b.length - 1]
    ) : (
      // Otherwise, it doesn't really make sense to rank non-siblings by index,
      // so they sort equally.
      0
    );
  }
  function matchRouteBranch(branch, pathname, allowPartial) {
    if (allowPartial === void 0) {
      allowPartial = false;
    }
    let {
      routesMeta
    } = branch;
    let matchedParams = {};
    let matchedPathname = "/";
    let matches = [];
    for (let i = 0; i < routesMeta.length; ++i) {
      let meta = routesMeta[i];
      let end = i === routesMeta.length - 1;
      let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
      let match = matchPath({
        path: meta.relativePath,
        caseSensitive: meta.caseSensitive,
        end
      }, remainingPathname);
      let route = meta.route;
      if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {
        match = matchPath({
          path: meta.relativePath,
          caseSensitive: meta.caseSensitive,
          end: false
        }, remainingPathname);
      }
      if (!match) {
        return null;
      }
      Object.assign(matchedParams, match.params);
      matches.push({
        // TODO: Can this as be avoided?
        params: matchedParams,
        pathname: joinPaths([matchedPathname, match.pathname]),
        pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),
        route
      });
      if (match.pathnameBase !== "/") {
        matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);
      }
    }
    return matches;
  }
  function matchPath(pattern, pathname) {
    if (typeof pattern === "string") {
      pattern = {
        path: pattern,
        caseSensitive: false,
        end: true
      };
    }
    let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);
    let match = pathname.match(matcher);
    if (!match) return null;
    let matchedPathname = match[0];
    let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
    let captureGroups = match.slice(1);
    let params = compiledParams.reduce((memo2, _ref, index2) => {
      let {
        paramName,
        isOptional
      } = _ref;
      if (paramName === "*") {
        let splatValue = captureGroups[index2] || "";
        pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
      }
      const value = captureGroups[index2];
      if (isOptional && !value) {
        memo2[paramName] = void 0;
      } else {
        memo2[paramName] = (value || "").replace(/%2F/g, "/");
      }
      return memo2;
    }, {});
    return {
      params,
      pathname: matchedPathname,
      pathnameBase,
      pattern
    };
  }
  function compilePath(path, caseSensitive, end) {
    if (caseSensitive === void 0) {
      caseSensitive = false;
    }
    if (end === void 0) {
      end = true;
    }
    warning(path === "*" || !path.endsWith("*") || path.endsWith("/*"), 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
    let params = [];
    let regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^${}|()[\]]/g, "\\$&").replace(/\/:([\w-]+)(\?)?/g, (_, paramName, isOptional) => {
      params.push({
        paramName,
        isOptional: isOptional != null
      });
      return isOptional ? "/?([^\\/]+)?" : "/([^\\/]+)";
    });
    if (path.endsWith("*")) {
      params.push({
        paramName: "*"
      });
      regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
    } else if (end) {
      regexpSource += "\\/*$";
    } else if (path !== "" && path !== "/") {
      regexpSource += "(?:(?=\\/|$))";
    } else ;
    let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
    return [matcher, params];
  }
  function decodePath(value) {
    try {
      return value.split("/").map((v) => decodeURIComponent(v).replace(/\//g, "%2F")).join("/");
    } catch (error) {
      warning(false, 'The URL path "' + value + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error + ")."));
      return value;
    }
  }
  function stripBasename(pathname, basename) {
    if (basename === "/") return pathname;
    if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
      return null;
    }
    let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
    let nextChar = pathname.charAt(startIndex);
    if (nextChar && nextChar !== "/") {
      return null;
    }
    return pathname.slice(startIndex) || "/";
  }
  function resolvePath(to, fromPathname) {
    if (fromPathname === void 0) {
      fromPathname = "/";
    }
    let {
      pathname: toPathname,
      search = "",
      hash = ""
    } = typeof to === "string" ? parsePath(to) : to;
    let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
    return {
      pathname,
      search: normalizeSearch(search),
      hash: normalizeHash(hash)
    };
  }
  function resolvePathname(relativePath, fromPathname) {
    let segments = fromPathname.replace(/\/+$/, "").split("/");
    let relativeSegments = relativePath.split("/");
    relativeSegments.forEach((segment) => {
      if (segment === "..") {
        if (segments.length > 1) segments.pop();
      } else if (segment !== ".") {
        segments.push(segment);
      }
    });
    return segments.length > 1 ? segments.join("/") : "/";
  }
  function getInvalidPathError(char, field, dest, path) {
    return "Cannot include a '" + char + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
  }
  function getPathContributingMatches(matches) {
    return matches.filter((match, index2) => index2 === 0 || match.route.path && match.route.path.length > 0);
  }
  function getResolveToMatches(matches, v7_relativeSplatPath) {
    let pathMatches = getPathContributingMatches(matches);
    if (v7_relativeSplatPath) {
      return pathMatches.map((match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase);
    }
    return pathMatches.map((match) => match.pathnameBase);
  }
  function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
    if (isPathRelative === void 0) {
      isPathRelative = false;
    }
    let to;
    if (typeof toArg === "string") {
      to = parsePath(toArg);
    } else {
      to = _extends({}, toArg);
      invariant(!to.pathname || !to.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to));
      invariant(!to.pathname || !to.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to));
      invariant(!to.search || !to.search.includes("#"), getInvalidPathError("#", "search", "hash", to));
    }
    let isEmptyPath = toArg === "" || to.pathname === "";
    let toPathname = isEmptyPath ? "/" : to.pathname;
    let from;
    if (toPathname == null) {
      from = locationPathname;
    } else {
      let routePathnameIndex = routePathnames.length - 1;
      if (!isPathRelative && toPathname.startsWith("..")) {
        let toSegments = toPathname.split("/");
        while (toSegments[0] === "..") {
          toSegments.shift();
          routePathnameIndex -= 1;
        }
        to.pathname = toSegments.join("/");
      }
      from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
    }
    let path = resolvePath(to, from);
    let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
    let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
    if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
      path.pathname += "/";
    }
    return path;
  }
  var joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
  var normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
  var normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
  var normalizeHash = (hash) => !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;
  function isRouteErrorResponse(error) {
    return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
  }
  var validMutationMethodsArr = ["post", "put", "patch", "delete"];
  var validMutationMethods = new Set(validMutationMethodsArr);
  var validRequestMethodsArr = ["get", ...validMutationMethodsArr];
  var validRequestMethods = new Set(validRequestMethodsArr);
  var UNSAFE_DEFERRED_SYMBOL = Symbol("deferred");

  // node_modules/react-router/dist/index.js
  function _extends2() {
    _extends2 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends2.apply(this, arguments);
  }
  var DataRouterContext = /* @__PURE__ */ React.createContext(null);
  if (false) {
    DataRouterContext.displayName = "DataRouter";
  }
  var DataRouterStateContext = /* @__PURE__ */ React.createContext(null);
  if (false) {
    DataRouterStateContext.displayName = "DataRouterState";
  }
  if (false) {
    AwaitContext.displayName = "Await";
  }
  var NavigationContext = /* @__PURE__ */ React.createContext(null);
  if (false) {
    NavigationContext.displayName = "Navigation";
  }
  var LocationContext = /* @__PURE__ */ React.createContext(null);
  if (false) {
    LocationContext.displayName = "Location";
  }
  var RouteContext = /* @__PURE__ */ React.createContext({
    outlet: null,
    matches: [],
    isDataRoute: false
  });
  if (false) {
    RouteContext.displayName = "Route";
  }
  var RouteErrorContext = /* @__PURE__ */ React.createContext(null);
  if (false) {
    RouteErrorContext.displayName = "RouteError";
  }
  function useHref(to, _temp) {
    let {
      relative
    } = _temp === void 0 ? {} : _temp;
    !useInRouterContext() ? false ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useHref() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    let {
      basename,
      navigator: navigator2
    } = React.useContext(NavigationContext);
    let {
      hash,
      pathname,
      search
    } = useResolvedPath(to, {
      relative
    });
    let joinedPathname = pathname;
    if (basename !== "/") {
      joinedPathname = pathname === "/" ? basename : joinPaths([basename, pathname]);
    }
    return navigator2.createHref({
      pathname: joinedPathname,
      search,
      hash
    });
  }
  function useInRouterContext() {
    return React.useContext(LocationContext) != null;
  }
  function useLocation() {
    !useInRouterContext() ? false ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useLocation() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    return React.useContext(LocationContext).location;
  }
  function useIsomorphicLayoutEffect(cb) {
    let isStatic = React.useContext(NavigationContext).static;
    if (!isStatic) {
      React.useLayoutEffect(cb);
    }
  }
  function useNavigate() {
    let {
      isDataRoute
    } = React.useContext(RouteContext);
    return isDataRoute ? useNavigateStable() : useNavigateUnstable();
  }
  function useNavigateUnstable() {
    !useInRouterContext() ? false ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useNavigate() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    let dataRouterContext = React.useContext(DataRouterContext);
    let {
      basename,
      future,
      navigator: navigator2
    } = React.useContext(NavigationContext);
    let {
      matches
    } = React.useContext(RouteContext);
    let {
      pathname: locationPathname
    } = useLocation();
    let routePathnamesJson = JSON.stringify(getResolveToMatches(matches, future.v7_relativeSplatPath));
    let activeRef = React.useRef(false);
    useIsomorphicLayoutEffect(() => {
      activeRef.current = true;
    });
    let navigate = React.useCallback(function(to, options) {
      if (options === void 0) {
        options = {};
      }
      false ? warning(activeRef.current, navigateEffectWarning) : void 0;
      if (!activeRef.current) return;
      if (typeof to === "number") {
        navigator2.go(to);
        return;
      }
      let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
      if (dataRouterContext == null && basename !== "/") {
        path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
      }
      (!!options.replace ? navigator2.replace : navigator2.push)(path, options.state, options);
    }, [basename, navigator2, routePathnamesJson, locationPathname, dataRouterContext]);
    return navigate;
  }
  function useParams() {
    let {
      matches
    } = React.useContext(RouteContext);
    let routeMatch = matches[matches.length - 1];
    return routeMatch ? routeMatch.params : {};
  }
  function useResolvedPath(to, _temp2) {
    let {
      relative
    } = _temp2 === void 0 ? {} : _temp2;
    let {
      future
    } = React.useContext(NavigationContext);
    let {
      matches
    } = React.useContext(RouteContext);
    let {
      pathname: locationPathname
    } = useLocation();
    let routePathnamesJson = JSON.stringify(getResolveToMatches(matches, future.v7_relativeSplatPath));
    return React.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === "path"), [to, routePathnamesJson, locationPathname, relative]);
  }
  function useRoutes(routes, locationArg) {
    return useRoutesImpl(routes, locationArg);
  }
  function useRoutesImpl(routes, locationArg, dataRouterState, future) {
    !useInRouterContext() ? false ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useRoutes() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    let {
      navigator: navigator2
    } = React.useContext(NavigationContext);
    let {
      matches: parentMatches
    } = React.useContext(RouteContext);
    let routeMatch = parentMatches[parentMatches.length - 1];
    let parentParams = routeMatch ? routeMatch.params : {};
    let parentPathname = routeMatch ? routeMatch.pathname : "/";
    let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
    let parentRoute = routeMatch && routeMatch.route;
    if (false) {
      let parentPath = parentRoute && parentRoute.path || "";
      warningOnce(parentPathname, !parentRoute || parentPath.endsWith("*"), "You rendered descendant <Routes> (or called `useRoutes()`) at " + ('"' + parentPathname + '" (under <Route path="' + parentPath + '">) but the ') + `parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

` + ('Please change the parent <Route path="' + parentPath + '"> to <Route ') + ('path="' + (parentPath === "/" ? "*" : parentPath + "/*") + '">.'));
    }
    let locationFromContext = useLocation();
    let location;
    if (locationArg) {
      var _parsedLocationArg$pa;
      let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
      !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? false ? invariant(false, "When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, the location pathname must begin with the portion of the URL pathname that was " + ('matched by all parent routes. The current pathname base is "' + parentPathnameBase + '" ') + ('but pathname "' + parsedLocationArg.pathname + '" was given in the `location` prop.')) : invariant(false) : void 0;
      location = parsedLocationArg;
    } else {
      location = locationFromContext;
    }
    let pathname = location.pathname || "/";
    let remainingPathname = pathname;
    if (parentPathnameBase !== "/") {
      let parentSegments = parentPathnameBase.replace(/^\//, "").split("/");
      let segments = pathname.replace(/^\//, "").split("/");
      remainingPathname = "/" + segments.slice(parentSegments.length).join("/");
    }
    let matches = matchRoutes(routes, {
      pathname: remainingPathname
    });
    if (false) {
      false ? warning(parentRoute || matches != null, 'No routes matched location "' + location.pathname + location.search + location.hash + '" ') : void 0;
      false ? warning(matches == null || matches[matches.length - 1].route.element !== void 0 || matches[matches.length - 1].route.Component !== void 0 || matches[matches.length - 1].route.lazy !== void 0, 'Matched leaf route at location "' + location.pathname + location.search + location.hash + '" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.') : void 0;
    }
    let renderedMatches = _renderMatches(matches && matches.map((match) => Object.assign({}, match, {
      params: Object.assign({}, parentParams, match.params),
      pathname: joinPaths([
        parentPathnameBase,
        // Re-encode pathnames that were decoded inside matchRoutes
        navigator2.encodeLocation ? navigator2.encodeLocation(match.pathname).pathname : match.pathname
      ]),
      pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : joinPaths([
        parentPathnameBase,
        // Re-encode pathnames that were decoded inside matchRoutes
        navigator2.encodeLocation ? navigator2.encodeLocation(match.pathnameBase).pathname : match.pathnameBase
      ])
    })), parentMatches, dataRouterState, future);
    if (locationArg && renderedMatches) {
      return /* @__PURE__ */ React.createElement(LocationContext.Provider, {
        value: {
          location: _extends2({
            pathname: "/",
            search: "",
            hash: "",
            state: null,
            key: "default"
          }, location),
          navigationType: Action.Pop
        }
      }, renderedMatches);
    }
    return renderedMatches;
  }
  function DefaultErrorComponent() {
    let error = useRouteError();
    let message = isRouteErrorResponse(error) ? error.status + " " + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);
    let stack = error instanceof Error ? error.stack : null;
    let lightgrey = "rgba(200,200,200, 0.5)";
    let preStyles = {
      padding: "0.5rem",
      backgroundColor: lightgrey
    };
    let codeStyles = {
      padding: "2px 4px",
      backgroundColor: lightgrey
    };
    let devInfo = null;
    if (false) {
      console.error("Error handled by React Router default ErrorBoundary:", error);
      devInfo = /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("p", null, "\u{1F4BF} Hey developer \u{1F44B}"), /* @__PURE__ */ React.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own ", /* @__PURE__ */ React.createElement("code", {
        style: codeStyles
      }, "ErrorBoundary"), " or", " ", /* @__PURE__ */ React.createElement("code", {
        style: codeStyles
      }, "errorElement"), " prop on your route."));
    }
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ React.createElement("h3", {
      style: {
        fontStyle: "italic"
      }
    }, message), stack ? /* @__PURE__ */ React.createElement("pre", {
      style: preStyles
    }, stack) : null, devInfo);
  }
  var defaultErrorElement = /* @__PURE__ */ React.createElement(DefaultErrorComponent, null);
  var RenderErrorBoundary = class extends React.Component {
    constructor(props) {
      super(props);
      this.state = {
        location: props.location,
        revalidation: props.revalidation,
        error: props.error
      };
    }
    static getDerivedStateFromError(error) {
      return {
        error
      };
    }
    static getDerivedStateFromProps(props, state) {
      if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
        return {
          error: props.error,
          location: props.location,
          revalidation: props.revalidation
        };
      }
      return {
        error: props.error !== void 0 ? props.error : state.error,
        location: state.location,
        revalidation: props.revalidation || state.revalidation
      };
    }
    componentDidCatch(error, errorInfo) {
      console.error("React Router caught the following error during render", error, errorInfo);
    }
    render() {
      return this.state.error !== void 0 ? /* @__PURE__ */ React.createElement(RouteContext.Provider, {
        value: this.props.routeContext
      }, /* @__PURE__ */ React.createElement(RouteErrorContext.Provider, {
        value: this.state.error,
        children: this.props.component
      })) : this.props.children;
    }
  };
  function RenderedRoute(_ref) {
    let {
      routeContext,
      match,
      children
    } = _ref;
    let dataRouterContext = React.useContext(DataRouterContext);
    if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {
      dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;
    }
    return /* @__PURE__ */ React.createElement(RouteContext.Provider, {
      value: routeContext
    }, children);
  }
  function _renderMatches(matches, parentMatches, dataRouterState, future) {
    var _dataRouterState;
    if (parentMatches === void 0) {
      parentMatches = [];
    }
    if (dataRouterState === void 0) {
      dataRouterState = null;
    }
    if (future === void 0) {
      future = null;
    }
    if (matches == null) {
      var _future;
      if (!dataRouterState) {
        return null;
      }
      if (dataRouterState.errors) {
        matches = dataRouterState.matches;
      } else if ((_future = future) != null && _future.v7_partialHydration && parentMatches.length === 0 && !dataRouterState.initialized && dataRouterState.matches.length > 0) {
        matches = dataRouterState.matches;
      } else {
        return null;
      }
    }
    let renderedMatches = matches;
    let errors = (_dataRouterState = dataRouterState) == null ? void 0 : _dataRouterState.errors;
    if (errors != null) {
      let errorIndex = renderedMatches.findIndex((m) => m.route.id && (errors == null ? void 0 : errors[m.route.id]) !== void 0);
      !(errorIndex >= 0) ? false ? invariant(false, "Could not find a matching route for errors on route IDs: " + Object.keys(errors).join(",")) : invariant(false) : void 0;
      renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
    }
    let renderFallback = false;
    let fallbackIndex = -1;
    if (dataRouterState && future && future.v7_partialHydration) {
      for (let i = 0; i < renderedMatches.length; i++) {
        let match = renderedMatches[i];
        if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {
          fallbackIndex = i;
        }
        if (match.route.id) {
          let {
            loaderData,
            errors: errors2
          } = dataRouterState;
          let needsToRunLoader = match.route.loader && loaderData[match.route.id] === void 0 && (!errors2 || errors2[match.route.id] === void 0);
          if (match.route.lazy || needsToRunLoader) {
            renderFallback = true;
            if (fallbackIndex >= 0) {
              renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);
            } else {
              renderedMatches = [renderedMatches[0]];
            }
            break;
          }
        }
      }
    }
    return renderedMatches.reduceRight((outlet, match, index2) => {
      let error;
      let shouldRenderHydrateFallback = false;
      let errorElement = null;
      let hydrateFallbackElement = null;
      if (dataRouterState) {
        error = errors && match.route.id ? errors[match.route.id] : void 0;
        errorElement = match.route.errorElement || defaultErrorElement;
        if (renderFallback) {
          if (fallbackIndex < 0 && index2 === 0) {
            warningOnce("route-fallback", false, "No `HydrateFallback` element provided to render during initial hydration");
            shouldRenderHydrateFallback = true;
            hydrateFallbackElement = null;
          } else if (fallbackIndex === index2) {
            shouldRenderHydrateFallback = true;
            hydrateFallbackElement = match.route.hydrateFallbackElement || null;
          }
        }
      }
      let matches2 = parentMatches.concat(renderedMatches.slice(0, index2 + 1));
      let getChildren = () => {
        let children;
        if (error) {
          children = errorElement;
        } else if (shouldRenderHydrateFallback) {
          children = hydrateFallbackElement;
        } else if (match.route.Component) {
          children = /* @__PURE__ */ React.createElement(match.route.Component, null);
        } else if (match.route.element) {
          children = match.route.element;
        } else {
          children = outlet;
        }
        return /* @__PURE__ */ React.createElement(RenderedRoute, {
          match,
          routeContext: {
            outlet,
            matches: matches2,
            isDataRoute: dataRouterState != null
          },
          children
        });
      };
      return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index2 === 0) ? /* @__PURE__ */ React.createElement(RenderErrorBoundary, {
        location: dataRouterState.location,
        revalidation: dataRouterState.revalidation,
        component: errorElement,
        error,
        children: getChildren(),
        routeContext: {
          outlet: null,
          matches: matches2,
          isDataRoute: true
        }
      }) : getChildren();
    }, null);
  }
  var DataRouterHook = /* @__PURE__ */ function(DataRouterHook3) {
    DataRouterHook3["UseBlocker"] = "useBlocker";
    DataRouterHook3["UseRevalidator"] = "useRevalidator";
    DataRouterHook3["UseNavigateStable"] = "useNavigate";
    return DataRouterHook3;
  }(DataRouterHook || {});
  var DataRouterStateHook = /* @__PURE__ */ function(DataRouterStateHook3) {
    DataRouterStateHook3["UseBlocker"] = "useBlocker";
    DataRouterStateHook3["UseLoaderData"] = "useLoaderData";
    DataRouterStateHook3["UseActionData"] = "useActionData";
    DataRouterStateHook3["UseRouteError"] = "useRouteError";
    DataRouterStateHook3["UseNavigation"] = "useNavigation";
    DataRouterStateHook3["UseRouteLoaderData"] = "useRouteLoaderData";
    DataRouterStateHook3["UseMatches"] = "useMatches";
    DataRouterStateHook3["UseRevalidator"] = "useRevalidator";
    DataRouterStateHook3["UseNavigateStable"] = "useNavigate";
    DataRouterStateHook3["UseRouteId"] = "useRouteId";
    return DataRouterStateHook3;
  }(DataRouterStateHook || {});
  function useDataRouterContext(hookName) {
    let ctx = React.useContext(DataRouterContext);
    !ctx ? false ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
    return ctx;
  }
  function useDataRouterState(hookName) {
    let state = React.useContext(DataRouterStateContext);
    !state ? false ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
    return state;
  }
  function useRouteContext(hookName) {
    let route = React.useContext(RouteContext);
    !route ? false ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
    return route;
  }
  function useCurrentRouteId(hookName) {
    let route = useRouteContext(hookName);
    let thisRoute = route.matches[route.matches.length - 1];
    !thisRoute.route.id ? false ? invariant(false, hookName + ' can only be used on routes that contain a unique "id"') : invariant(false) : void 0;
    return thisRoute.route.id;
  }
  function useRouteError() {
    var _state$errors;
    let error = React.useContext(RouteErrorContext);
    let state = useDataRouterState(DataRouterStateHook.UseRouteError);
    let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);
    if (error !== void 0) {
      return error;
    }
    return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];
  }
  function useNavigateStable() {
    let {
      router
    } = useDataRouterContext(DataRouterHook.UseNavigateStable);
    let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);
    let activeRef = React.useRef(false);
    useIsomorphicLayoutEffect(() => {
      activeRef.current = true;
    });
    let navigate = React.useCallback(function(to, options) {
      if (options === void 0) {
        options = {};
      }
      false ? warning(activeRef.current, navigateEffectWarning) : void 0;
      if (!activeRef.current) return;
      if (typeof to === "number") {
        router.navigate(to);
      } else {
        router.navigate(to, _extends2({
          fromRouteId: id
        }, options));
      }
    }, [router, id]);
    return navigate;
  }
  var alreadyWarned$1 = {};
  function warningOnce(key, cond, message) {
    if (!cond && !alreadyWarned$1[key]) {
      alreadyWarned$1[key] = true;
      false ? warning(false, message) : void 0;
    }
  }
  function warnOnce(key, message) {
    if (false) {
      alreadyWarned[message] = true;
      console.warn(message);
    }
  }
  var logDeprecation = (flag, msg, link) => warnOnce(flag, "\u26A0\uFE0F React Router Future Flag Warning: " + msg + ". " + ("You can use the `" + flag + "` future flag to opt-in early. ") + ("For more information, see " + link + "."));
  function logV6DeprecationWarnings(renderFuture, routerFuture) {
    if ((renderFuture == null ? void 0 : renderFuture.v7_startTransition) === void 0) {
      logDeprecation("v7_startTransition", "React Router will begin wrapping state updates in `React.startTransition` in v7", "https://reactrouter.com/v6/upgrading/future#v7_starttransition");
    }
    if ((renderFuture == null ? void 0 : renderFuture.v7_relativeSplatPath) === void 0 && (!routerFuture || routerFuture.v7_relativeSplatPath === void 0)) {
      logDeprecation("v7_relativeSplatPath", "Relative route resolution within Splat routes is changing in v7", "https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath");
    }
    if (routerFuture) {
      if (routerFuture.v7_fetcherPersist === void 0) {
        logDeprecation("v7_fetcherPersist", "The persistence behavior of fetchers is changing in v7", "https://reactrouter.com/v6/upgrading/future#v7_fetcherpersist");
      }
      if (routerFuture.v7_normalizeFormMethod === void 0) {
        logDeprecation("v7_normalizeFormMethod", "Casing of `formMethod` fields is being normalized to uppercase in v7", "https://reactrouter.com/v6/upgrading/future#v7_normalizeformmethod");
      }
      if (routerFuture.v7_partialHydration === void 0) {
        logDeprecation("v7_partialHydration", "`RouterProvider` hydration behavior is changing in v7", "https://reactrouter.com/v6/upgrading/future#v7_partialhydration");
      }
      if (routerFuture.v7_skipActionErrorRevalidation === void 0) {
        logDeprecation("v7_skipActionErrorRevalidation", "The revalidation behavior after 4xx/5xx `action` responses is changing in v7", "https://reactrouter.com/v6/upgrading/future#v7_skipactionerrorrevalidation");
      }
    }
  }
  var START_TRANSITION = "startTransition";
  var startTransitionImpl = React[START_TRANSITION];
  function Navigate(_ref4) {
    let {
      to,
      replace: replace2,
      state,
      relative
    } = _ref4;
    !useInRouterContext() ? false ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of
      // the router loaded. We can help them understand how to avoid that.
      "<Navigate> may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    let {
      future,
      static: isStatic
    } = React.useContext(NavigationContext);
    false ? warning(!isStatic, "<Navigate> must not be used on the initial render in a <StaticRouter>. This is a no-op, but you should modify your code so the <Navigate> is only ever rendered in response to some user interaction or state change.") : void 0;
    let {
      matches
    } = React.useContext(RouteContext);
    let {
      pathname: locationPathname
    } = useLocation();
    let navigate = useNavigate();
    let path = resolveTo(to, getResolveToMatches(matches, future.v7_relativeSplatPath), locationPathname, relative === "path");
    let jsonPath = JSON.stringify(path);
    React.useEffect(() => navigate(JSON.parse(jsonPath), {
      replace: replace2,
      state,
      relative
    }), [navigate, jsonPath, relative, replace2, state]);
    return null;
  }
  function Route(_props) {
    false ? invariant(false, "A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.") : invariant(false);
  }
  function Router(_ref5) {
    let {
      basename: basenameProp = "/",
      children = null,
      location: locationProp,
      navigationType = Action.Pop,
      navigator: navigator2,
      static: staticProp = false,
      future
    } = _ref5;
    !!useInRouterContext() ? false ? invariant(false, "You cannot render a <Router> inside another <Router>. You should never have more than one in your app.") : invariant(false) : void 0;
    let basename = basenameProp.replace(/^\/*/, "/");
    let navigationContext = React.useMemo(() => ({
      basename,
      navigator: navigator2,
      static: staticProp,
      future: _extends2({
        v7_relativeSplatPath: false
      }, future)
    }), [basename, future, navigator2, staticProp]);
    if (typeof locationProp === "string") {
      locationProp = parsePath(locationProp);
    }
    let {
      pathname = "/",
      search = "",
      hash = "",
      state = null,
      key = "default"
    } = locationProp;
    let locationContext = React.useMemo(() => {
      let trailingPathname = stripBasename(pathname, basename);
      if (trailingPathname == null) {
        return null;
      }
      return {
        location: {
          pathname: trailingPathname,
          search,
          hash,
          state,
          key
        },
        navigationType
      };
    }, [basename, pathname, search, hash, state, key, navigationType]);
    false ? warning(locationContext != null, '<Router basename="' + basename + '"> is not able to match the URL ' + ('"' + pathname + search + hash + '" because it does not start with the ') + "basename, so the <Router> won't render anything.") : void 0;
    if (locationContext == null) {
      return null;
    }
    return /* @__PURE__ */ React.createElement(NavigationContext.Provider, {
      value: navigationContext
    }, /* @__PURE__ */ React.createElement(LocationContext.Provider, {
      children,
      value: locationContext
    }));
  }
  function Routes(_ref6) {
    let {
      children,
      location
    } = _ref6;
    return useRoutes(createRoutesFromChildren(children), location);
  }
  var neverSettledPromise = new Promise(() => {
  });
  function createRoutesFromChildren(children, parentPath) {
    if (parentPath === void 0) {
      parentPath = [];
    }
    let routes = [];
    React.Children.forEach(children, (element, index2) => {
      if (!/* @__PURE__ */ React.isValidElement(element)) {
        return;
      }
      let treePath = [...parentPath, index2];
      if (element.type === React.Fragment) {
        routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));
        return;
      }
      !(element.type === Route) ? false ? invariant(false, "[" + (typeof element.type === "string" ? element.type : element.type.name) + "] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>") : invariant(false) : void 0;
      !(!element.props.index || !element.props.children) ? false ? invariant(false, "An index route cannot have child routes.") : invariant(false) : void 0;
      let route = {
        id: element.props.id || treePath.join("-"),
        caseSensitive: element.props.caseSensitive,
        element: element.props.element,
        Component: element.props.Component,
        index: element.props.index,
        path: element.props.path,
        loader: element.props.loader,
        action: element.props.action,
        errorElement: element.props.errorElement,
        ErrorBoundary: element.props.ErrorBoundary,
        hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,
        shouldRevalidate: element.props.shouldRevalidate,
        handle: element.props.handle,
        lazy: element.props.lazy
      };
      if (element.props.children) {
        route.children = createRoutesFromChildren(element.props.children, treePath);
      }
      routes.push(route);
    });
    return routes;
  }

  // node_modules/react-router-dom/dist/index.js
  function _extends3() {
    _extends3 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends3.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
  }
  function shouldProcessLinkClick(event, target) {
    return event.button === 0 && // Ignore everything but left clicks
    (!target || target === "_self") && // Let browser handle "target=_blank" etc.
    !isModifiedEvent(event);
  }
  var _excluded = ["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset", "viewTransition"];
  var _excluded2 = ["aria-current", "caseSensitive", "className", "end", "style", "to", "viewTransition", "children"];
  var REACT_ROUTER_VERSION = "6";
  try {
    window.__reactRouterVersion = REACT_ROUTER_VERSION;
  } catch (e) {
  }
  var ViewTransitionContext = /* @__PURE__ */ React2.createContext({
    isTransitioning: false
  });
  if (false) {
    ViewTransitionContext.displayName = "ViewTransition";
  }
  if (false) {
    FetchersContext.displayName = "Fetchers";
  }
  var START_TRANSITION2 = "startTransition";
  var startTransitionImpl2 = React2[START_TRANSITION2];
  var FLUSH_SYNC = "flushSync";
  var flushSyncImpl = ReactDOM[FLUSH_SYNC];
  var USE_ID = "useId";
  var useIdImpl = React2[USE_ID];
  function HashRouter(_ref5) {
    let {
      basename,
      children,
      future,
      window: window2
    } = _ref5;
    let historyRef = React2.useRef();
    if (historyRef.current == null) {
      historyRef.current = createHashHistory({
        window: window2,
        v5Compat: true
      });
    }
    let history = historyRef.current;
    let [state, setStateImpl] = React2.useState({
      action: history.action,
      location: history.location
    });
    let {
      v7_startTransition
    } = future || {};
    let setState = React2.useCallback((newState) => {
      v7_startTransition && startTransitionImpl2 ? startTransitionImpl2(() => setStateImpl(newState)) : setStateImpl(newState);
    }, [setStateImpl, v7_startTransition]);
    React2.useLayoutEffect(() => history.listen(setState), [history, setState]);
    React2.useEffect(() => logV6DeprecationWarnings(future), [future]);
    return /* @__PURE__ */ React2.createElement(Router, {
      basename,
      children,
      location: state.location,
      navigationType: state.action,
      navigator: history,
      future
    });
  }
  if (false) {
    HistoryRouter.displayName = "unstable_HistoryRouter";
  }
  var isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
  var ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
  var Link = /* @__PURE__ */ React2.forwardRef(function LinkWithRef(_ref7, ref) {
    let {
      onClick,
      relative,
      reloadDocument,
      replace: replace2,
      state,
      target,
      to,
      preventScrollReset,
      viewTransition
    } = _ref7, rest = _objectWithoutPropertiesLoose(_ref7, _excluded);
    let {
      basename
    } = React2.useContext(NavigationContext);
    let absoluteHref;
    let isExternal = false;
    if (typeof to === "string" && ABSOLUTE_URL_REGEX.test(to)) {
      absoluteHref = to;
      if (isBrowser) {
        try {
          let currentUrl = new URL(window.location.href);
          let targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to);
          let path = stripBasename(targetUrl.pathname, basename);
          if (targetUrl.origin === currentUrl.origin && path != null) {
            to = path + targetUrl.search + targetUrl.hash;
          } else {
            isExternal = true;
          }
        } catch (e) {
          false ? warning(false, '<Link to="' + to + '"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.') : void 0;
        }
      }
    }
    let href = useHref(to, {
      relative
    });
    let internalOnClick = useLinkClickHandler(to, {
      replace: replace2,
      state,
      target,
      preventScrollReset,
      relative,
      viewTransition
    });
    function handleClick(event) {
      if (onClick) onClick(event);
      if (!event.defaultPrevented) {
        internalOnClick(event);
      }
    }
    return (
      // eslint-disable-next-line jsx-a11y/anchor-has-content
      /* @__PURE__ */ React2.createElement("a", _extends3({}, rest, {
        href: absoluteHref || href,
        onClick: isExternal || reloadDocument ? onClick : handleClick,
        ref,
        target
      }))
    );
  });
  if (false) {
    Link.displayName = "Link";
  }
  var NavLink = /* @__PURE__ */ React2.forwardRef(function NavLinkWithRef(_ref8, ref) {
    let {
      "aria-current": ariaCurrentProp = "page",
      caseSensitive = false,
      className: classNameProp = "",
      end = false,
      style: styleProp,
      to,
      viewTransition,
      children
    } = _ref8, rest = _objectWithoutPropertiesLoose(_ref8, _excluded2);
    let path = useResolvedPath(to, {
      relative: rest.relative
    });
    let location = useLocation();
    let routerState = React2.useContext(DataRouterStateContext);
    let {
      navigator: navigator2,
      basename
    } = React2.useContext(NavigationContext);
    let isTransitioning = routerState != null && // Conditional usage is OK here because the usage of a data router is static
    // eslint-disable-next-line react-hooks/rules-of-hooks
    useViewTransitionState(path) && viewTransition === true;
    let toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path).pathname : path.pathname;
    let locationPathname = location.pathname;
    let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
    if (!caseSensitive) {
      locationPathname = locationPathname.toLowerCase();
      nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
      toPathname = toPathname.toLowerCase();
    }
    if (nextLocationPathname && basename) {
      nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;
    }
    const endSlashPosition = toPathname !== "/" && toPathname.endsWith("/") ? toPathname.length - 1 : toPathname.length;
    let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === "/";
    let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
    let renderProps = {
      isActive,
      isPending,
      isTransitioning
    };
    let ariaCurrent = isActive ? ariaCurrentProp : void 0;
    let className;
    if (typeof classNameProp === "function") {
      className = classNameProp(renderProps);
    } else {
      className = [classNameProp, isActive ? "active" : null, isPending ? "pending" : null, isTransitioning ? "transitioning" : null].filter(Boolean).join(" ");
    }
    let style = typeof styleProp === "function" ? styleProp(renderProps) : styleProp;
    return /* @__PURE__ */ React2.createElement(Link, _extends3({}, rest, {
      "aria-current": ariaCurrent,
      className,
      ref,
      style,
      to,
      viewTransition
    }), typeof children === "function" ? children(renderProps) : children);
  });
  if (false) {
    NavLink.displayName = "NavLink";
  }
  if (false) {
    Form.displayName = "Form";
  }
  if (false) {
    ScrollRestoration.displayName = "ScrollRestoration";
  }
  var DataRouterHook2;
  (function(DataRouterHook3) {
    DataRouterHook3["UseScrollRestoration"] = "useScrollRestoration";
    DataRouterHook3["UseSubmit"] = "useSubmit";
    DataRouterHook3["UseSubmitFetcher"] = "useSubmitFetcher";
    DataRouterHook3["UseFetcher"] = "useFetcher";
    DataRouterHook3["useViewTransitionState"] = "useViewTransitionState";
  })(DataRouterHook2 || (DataRouterHook2 = {}));
  var DataRouterStateHook2;
  (function(DataRouterStateHook3) {
    DataRouterStateHook3["UseFetcher"] = "useFetcher";
    DataRouterStateHook3["UseFetchers"] = "useFetchers";
    DataRouterStateHook3["UseScrollRestoration"] = "useScrollRestoration";
  })(DataRouterStateHook2 || (DataRouterStateHook2 = {}));
  function useDataRouterContext2(hookName) {
    let ctx = React2.useContext(DataRouterContext);
    !ctx ? false ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
    return ctx;
  }
  function useLinkClickHandler(to, _temp) {
    let {
      target,
      replace: replaceProp,
      state,
      preventScrollReset,
      relative,
      viewTransition
    } = _temp === void 0 ? {} : _temp;
    let navigate = useNavigate();
    let location = useLocation();
    let path = useResolvedPath(to, {
      relative
    });
    return React2.useCallback((event) => {
      if (shouldProcessLinkClick(event, target)) {
        event.preventDefault();
        let replace2 = replaceProp !== void 0 ? replaceProp : createPath(location) === createPath(path);
        navigate(to, {
          replace: replace2,
          state,
          preventScrollReset,
          relative,
          viewTransition
        });
      }
    }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative, viewTransition]);
  }
  function useViewTransitionState(to, opts) {
    if (opts === void 0) {
      opts = {};
    }
    let vtContext = React2.useContext(ViewTransitionContext);
    !(vtContext != null) ? false ? invariant(false, "`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?") : invariant(false) : void 0;
    let {
      basename
    } = useDataRouterContext2(DataRouterHook2.useViewTransitionState);
    let path = useResolvedPath(to, {
      relative: opts.relative
    });
    if (!vtContext.isTransitioning) {
      return false;
    }
    let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;
    let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;
    return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;
  }

  // contexts/DataContext.tsx
  var import_react3 = __toESM(require_react());

  // node_modules/@supabase/functions-js/dist/module/helper.js
  var resolveFetch = (customFetch) => {
    let _fetch;
    if (customFetch) {
      _fetch = customFetch;
    } else if (typeof fetch === "undefined") {
      _fetch = (...args) => Promise.resolve().then(() => (init_browser(), browser_exports)).then(({ default: fetch3 }) => fetch3(...args));
    } else {
      _fetch = fetch;
    }
    return (...args) => _fetch(...args);
  };

  // node_modules/@supabase/functions-js/dist/module/types.js
  var FunctionsError = class extends Error {
    constructor(message, name = "FunctionsError", context) {
      super(message);
      this.name = name;
      this.context = context;
    }
  };
  var FunctionsFetchError = class extends FunctionsError {
    constructor(context) {
      super("Failed to send a request to the Edge Function", "FunctionsFetchError", context);
    }
  };
  var FunctionsRelayError = class extends FunctionsError {
    constructor(context) {
      super("Relay Error invoking the Edge Function", "FunctionsRelayError", context);
    }
  };
  var FunctionsHttpError = class extends FunctionsError {
    constructor(context) {
      super("Edge Function returned a non-2xx status code", "FunctionsHttpError", context);
    }
  };
  var FunctionRegion;
  (function(FunctionRegion2) {
    FunctionRegion2["Any"] = "any";
    FunctionRegion2["ApNortheast1"] = "ap-northeast-1";
    FunctionRegion2["ApNortheast2"] = "ap-northeast-2";
    FunctionRegion2["ApSouth1"] = "ap-south-1";
    FunctionRegion2["ApSoutheast1"] = "ap-southeast-1";
    FunctionRegion2["ApSoutheast2"] = "ap-southeast-2";
    FunctionRegion2["CaCentral1"] = "ca-central-1";
    FunctionRegion2["EuCentral1"] = "eu-central-1";
    FunctionRegion2["EuWest1"] = "eu-west-1";
    FunctionRegion2["EuWest2"] = "eu-west-2";
    FunctionRegion2["EuWest3"] = "eu-west-3";
    FunctionRegion2["SaEast1"] = "sa-east-1";
    FunctionRegion2["UsEast1"] = "us-east-1";
    FunctionRegion2["UsWest1"] = "us-west-1";
    FunctionRegion2["UsWest2"] = "us-west-2";
  })(FunctionRegion || (FunctionRegion = {}));

  // node_modules/@supabase/functions-js/dist/module/FunctionsClient.js
  var __awaiter = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve2) {
        resolve2(value);
      });
    }
    return new (P || (P = Promise))(function(resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var FunctionsClient = class {
    constructor(url, { headers = {}, customFetch, region = FunctionRegion.Any } = {}) {
      this.url = url;
      this.headers = headers;
      this.region = region;
      this.fetch = resolveFetch(customFetch);
    }
    /**
     * Updates the authorization header
     * @param token - the new jwt token sent in the authorisation header
     */
    setAuth(token) {
      this.headers.Authorization = `Bearer ${token}`;
    }
    /**
     * Invokes a function
     * @param functionName - The name of the Function to invoke.
     * @param options - Options for invoking the Function.
     */
    invoke(functionName_1) {
      return __awaiter(this, arguments, void 0, function* (functionName, options = {}) {
        var _a;
        try {
          const { headers, method, body: functionArgs, signal } = options;
          let _headers = {};
          let { region } = options;
          if (!region) {
            region = this.region;
          }
          const url = new URL(`${this.url}/${functionName}`);
          if (region && region !== "any") {
            _headers["x-region"] = region;
            url.searchParams.set("forceFunctionRegion", region);
          }
          let body;
          if (functionArgs && (headers && !Object.prototype.hasOwnProperty.call(headers, "Content-Type") || !headers)) {
            if (typeof Blob !== "undefined" && functionArgs instanceof Blob || functionArgs instanceof ArrayBuffer) {
              _headers["Content-Type"] = "application/octet-stream";
              body = functionArgs;
            } else if (typeof functionArgs === "string") {
              _headers["Content-Type"] = "text/plain";
              body = functionArgs;
            } else if (typeof FormData !== "undefined" && functionArgs instanceof FormData) {
              body = functionArgs;
            } else {
              _headers["Content-Type"] = "application/json";
              body = JSON.stringify(functionArgs);
            }
          }
          const response = yield this.fetch(url.toString(), {
            method: method || "POST",
            // headers priority is (high to low):
            // 1. invoke-level headers
            // 2. client-level headers
            // 3. default Content-Type header
            headers: Object.assign(Object.assign(Object.assign({}, _headers), this.headers), headers),
            body,
            signal
          }).catch((fetchError) => {
            if (fetchError.name === "AbortError") {
              throw fetchError;
            }
            throw new FunctionsFetchError(fetchError);
          });
          const isRelayError = response.headers.get("x-relay-error");
          if (isRelayError && isRelayError === "true") {
            throw new FunctionsRelayError(response);
          }
          if (!response.ok) {
            throw new FunctionsHttpError(response);
          }
          let responseType = ((_a = response.headers.get("Content-Type")) !== null && _a !== void 0 ? _a : "text/plain").split(";")[0].trim();
          let data;
          if (responseType === "application/json") {
            data = yield response.json();
          } else if (responseType === "application/octet-stream") {
            data = yield response.blob();
          } else if (responseType === "text/event-stream") {
            data = response;
          } else if (responseType === "multipart/form-data") {
            data = yield response.formData();
          } else {
            data = yield response.text();
          }
          return { data, error: null, response };
        } catch (error) {
          if (error instanceof Error && error.name === "AbortError") {
            return { data: null, error: new FunctionsFetchError(error) };
          }
          return {
            data: null,
            error,
            response: error instanceof FunctionsHttpError || error instanceof FunctionsRelayError ? error.context : void 0
          };
        }
      });
    }
  };

  // node_modules/@supabase/postgrest-js/dist/esm/wrapper.mjs
  var import_cjs = __toESM(require_cjs(), 1);
  var {
    PostgrestClient,
    PostgrestQueryBuilder,
    PostgrestFilterBuilder,
    PostgrestTransformBuilder,
    PostgrestBuilder,
    PostgrestError
  } = import_cjs.default;

  // node_modules/@supabase/realtime-js/dist/module/lib/websocket-factory.js
  var WebSocketFactory = class {
    static detectEnvironment() {
      var _a;
      if (typeof WebSocket !== "undefined") {
        return { type: "native", constructor: WebSocket };
      }
      if (typeof globalThis !== "undefined" && typeof globalThis.WebSocket !== "undefined") {
        return { type: "native", constructor: globalThis.WebSocket };
      }
      if (typeof global !== "undefined" && typeof global.WebSocket !== "undefined") {
        return { type: "native", constructor: global.WebSocket };
      }
      if (typeof globalThis !== "undefined" && typeof globalThis.WebSocketPair !== "undefined" && typeof globalThis.WebSocket === "undefined") {
        return {
          type: "cloudflare",
          error: "Cloudflare Workers detected. WebSocket clients are not supported in Cloudflare Workers.",
          workaround: "Use Cloudflare Workers WebSocket API for server-side WebSocket handling, or deploy to a different runtime."
        };
      }
      if (typeof globalThis !== "undefined" && globalThis.EdgeRuntime || typeof navigator !== "undefined" && ((_a = navigator.userAgent) === null || _a === void 0 ? void 0 : _a.includes("Vercel-Edge"))) {
        return {
          type: "unsupported",
          error: "Edge runtime detected (Vercel Edge/Netlify Edge). WebSockets are not supported in edge functions.",
          workaround: "Use serverless functions or a different deployment target for WebSocket functionality."
        };
      }
      if (typeof process !== "undefined") {
        const processVersions = process["versions"];
        if (processVersions && processVersions["node"]) {
          const versionString = processVersions["node"];
          const nodeVersion = parseInt(versionString.replace(/^v/, "").split(".")[0]);
          if (nodeVersion >= 22) {
            if (typeof globalThis.WebSocket !== "undefined") {
              return { type: "native", constructor: globalThis.WebSocket };
            }
            return {
              type: "unsupported",
              error: `Node.js ${nodeVersion} detected but native WebSocket not found.`,
              workaround: "Provide a WebSocket implementation via the transport option."
            };
          }
          return {
            type: "unsupported",
            error: `Node.js ${nodeVersion} detected without native WebSocket support.`,
            workaround: 'For Node.js < 22, install "ws" package and provide it via the transport option:\nimport ws from "ws"\nnew RealtimeClient(url, { transport: ws })'
          };
        }
      }
      return {
        type: "unsupported",
        error: "Unknown JavaScript runtime without WebSocket support.",
        workaround: "Ensure you're running in a supported environment (browser, Node.js, Deno) or provide a custom WebSocket implementation."
      };
    }
    static getWebSocketConstructor() {
      const env = this.detectEnvironment();
      if (env.constructor) {
        return env.constructor;
      }
      let errorMessage = env.error || "WebSocket not supported in this environment.";
      if (env.workaround) {
        errorMessage += `

Suggested solution: ${env.workaround}`;
      }
      throw new Error(errorMessage);
    }
    static createWebSocket(url, protocols) {
      const WS = this.getWebSocketConstructor();
      return new WS(url, protocols);
    }
    static isWebSocketSupported() {
      try {
        const env = this.detectEnvironment();
        return env.type === "native" || env.type === "ws";
      } catch (_a) {
        return false;
      }
    }
  };
  var websocket_factory_default = WebSocketFactory;

  // node_modules/@supabase/realtime-js/dist/module/lib/version.js
  var version = "2.75.0";

  // node_modules/@supabase/realtime-js/dist/module/lib/constants.js
  var DEFAULT_VERSION = `realtime-js/${version}`;
  var VSN = "1.0.0";
  var DEFAULT_TIMEOUT = 1e4;
  var WS_CLOSE_NORMAL = 1e3;
  var MAX_PUSH_BUFFER_SIZE = 100;
  var SOCKET_STATES;
  (function(SOCKET_STATES2) {
    SOCKET_STATES2[SOCKET_STATES2["connecting"] = 0] = "connecting";
    SOCKET_STATES2[SOCKET_STATES2["open"] = 1] = "open";
    SOCKET_STATES2[SOCKET_STATES2["closing"] = 2] = "closing";
    SOCKET_STATES2[SOCKET_STATES2["closed"] = 3] = "closed";
  })(SOCKET_STATES || (SOCKET_STATES = {}));
  var CHANNEL_STATES;
  (function(CHANNEL_STATES2) {
    CHANNEL_STATES2["closed"] = "closed";
    CHANNEL_STATES2["errored"] = "errored";
    CHANNEL_STATES2["joined"] = "joined";
    CHANNEL_STATES2["joining"] = "joining";
    CHANNEL_STATES2["leaving"] = "leaving";
  })(CHANNEL_STATES || (CHANNEL_STATES = {}));
  var CHANNEL_EVENTS;
  (function(CHANNEL_EVENTS2) {
    CHANNEL_EVENTS2["close"] = "phx_close";
    CHANNEL_EVENTS2["error"] = "phx_error";
    CHANNEL_EVENTS2["join"] = "phx_join";
    CHANNEL_EVENTS2["reply"] = "phx_reply";
    CHANNEL_EVENTS2["leave"] = "phx_leave";
    CHANNEL_EVENTS2["access_token"] = "access_token";
  })(CHANNEL_EVENTS || (CHANNEL_EVENTS = {}));
  var TRANSPORTS;
  (function(TRANSPORTS2) {
    TRANSPORTS2["websocket"] = "websocket";
  })(TRANSPORTS || (TRANSPORTS = {}));
  var CONNECTION_STATE;
  (function(CONNECTION_STATE2) {
    CONNECTION_STATE2["Connecting"] = "connecting";
    CONNECTION_STATE2["Open"] = "open";
    CONNECTION_STATE2["Closing"] = "closing";
    CONNECTION_STATE2["Closed"] = "closed";
  })(CONNECTION_STATE || (CONNECTION_STATE = {}));

  // node_modules/@supabase/realtime-js/dist/module/lib/serializer.js
  var Serializer = class {
    constructor() {
      this.HEADER_LENGTH = 1;
    }
    decode(rawPayload, callback) {
      if (rawPayload.constructor === ArrayBuffer) {
        return callback(this._binaryDecode(rawPayload));
      }
      if (typeof rawPayload === "string") {
        return callback(JSON.parse(rawPayload));
      }
      return callback({});
    }
    _binaryDecode(buffer) {
      const view = new DataView(buffer);
      const decoder = new TextDecoder();
      return this._decodeBroadcast(buffer, view, decoder);
    }
    _decodeBroadcast(buffer, view, decoder) {
      const topicSize = view.getUint8(1);
      const eventSize = view.getUint8(2);
      let offset = this.HEADER_LENGTH + 2;
      const topic = decoder.decode(buffer.slice(offset, offset + topicSize));
      offset = offset + topicSize;
      const event = decoder.decode(buffer.slice(offset, offset + eventSize));
      offset = offset + eventSize;
      const data = JSON.parse(decoder.decode(buffer.slice(offset, buffer.byteLength)));
      return { ref: null, topic, event, payload: data };
    }
  };

  // node_modules/@supabase/realtime-js/dist/module/lib/timer.js
  var Timer = class {
    constructor(callback, timerCalc) {
      this.callback = callback;
      this.timerCalc = timerCalc;
      this.timer = void 0;
      this.tries = 0;
      this.callback = callback;
      this.timerCalc = timerCalc;
    }
    reset() {
      this.tries = 0;
      clearTimeout(this.timer);
      this.timer = void 0;
    }
    // Cancels any previous scheduleTimeout and schedules callback
    scheduleTimeout() {
      clearTimeout(this.timer);
      this.timer = setTimeout(() => {
        this.tries = this.tries + 1;
        this.callback();
      }, this.timerCalc(this.tries + 1));
    }
  };

  // node_modules/@supabase/realtime-js/dist/module/lib/transformers.js
  var PostgresTypes;
  (function(PostgresTypes2) {
    PostgresTypes2["abstime"] = "abstime";
    PostgresTypes2["bool"] = "bool";
    PostgresTypes2["date"] = "date";
    PostgresTypes2["daterange"] = "daterange";
    PostgresTypes2["float4"] = "float4";
    PostgresTypes2["float8"] = "float8";
    PostgresTypes2["int2"] = "int2";
    PostgresTypes2["int4"] = "int4";
    PostgresTypes2["int4range"] = "int4range";
    PostgresTypes2["int8"] = "int8";
    PostgresTypes2["int8range"] = "int8range";
    PostgresTypes2["json"] = "json";
    PostgresTypes2["jsonb"] = "jsonb";
    PostgresTypes2["money"] = "money";
    PostgresTypes2["numeric"] = "numeric";
    PostgresTypes2["oid"] = "oid";
    PostgresTypes2["reltime"] = "reltime";
    PostgresTypes2["text"] = "text";
    PostgresTypes2["time"] = "time";
    PostgresTypes2["timestamp"] = "timestamp";
    PostgresTypes2["timestamptz"] = "timestamptz";
    PostgresTypes2["timetz"] = "timetz";
    PostgresTypes2["tsrange"] = "tsrange";
    PostgresTypes2["tstzrange"] = "tstzrange";
  })(PostgresTypes || (PostgresTypes = {}));
  var convertChangeData = (columns, record, options = {}) => {
    var _a;
    const skipTypes = (_a = options.skipTypes) !== null && _a !== void 0 ? _a : [];
    if (!record) {
      return {};
    }
    return Object.keys(record).reduce((acc, rec_key) => {
      acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes);
      return acc;
    }, {});
  };
  var convertColumn = (columnName, columns, record, skipTypes) => {
    const column = columns.find((x) => x.name === columnName);
    const colType = column === null || column === void 0 ? void 0 : column.type;
    const value = record[columnName];
    if (colType && !skipTypes.includes(colType)) {
      return convertCell(colType, value);
    }
    return noop(value);
  };
  var convertCell = (type, value) => {
    if (type.charAt(0) === "_") {
      const dataType = type.slice(1, type.length);
      return toArray(value, dataType);
    }
    switch (type) {
      case PostgresTypes.bool:
        return toBoolean(value);
      case PostgresTypes.float4:
      case PostgresTypes.float8:
      case PostgresTypes.int2:
      case PostgresTypes.int4:
      case PostgresTypes.int8:
      case PostgresTypes.numeric:
      case PostgresTypes.oid:
        return toNumber(value);
      case PostgresTypes.json:
      case PostgresTypes.jsonb:
        return toJson(value);
      case PostgresTypes.timestamp:
        return toTimestampString(value);
      case PostgresTypes.abstime:
      case PostgresTypes.date:
      case PostgresTypes.daterange:
      case PostgresTypes.int4range:
      case PostgresTypes.int8range:
      case PostgresTypes.money:
      case PostgresTypes.reltime:
      case PostgresTypes.text:
      case PostgresTypes.time:
      case PostgresTypes.timestamptz:
      case PostgresTypes.timetz:
      case PostgresTypes.tsrange:
      case PostgresTypes.tstzrange:
        return noop(value);
      default:
        return noop(value);
    }
  };
  var noop = (value) => {
    return value;
  };
  var toBoolean = (value) => {
    switch (value) {
      case "t":
        return true;
      case "f":
        return false;
      default:
        return value;
    }
  };
  var toNumber = (value) => {
    if (typeof value === "string") {
      const parsedValue = parseFloat(value);
      if (!Number.isNaN(parsedValue)) {
        return parsedValue;
      }
    }
    return value;
  };
  var toJson = (value) => {
    if (typeof value === "string") {
      try {
        return JSON.parse(value);
      } catch (error) {
        console.log(`JSON parse error: ${error}`);
        return value;
      }
    }
    return value;
  };
  var toArray = (value, type) => {
    if (typeof value !== "string") {
      return value;
    }
    const lastIdx = value.length - 1;
    const closeBrace = value[lastIdx];
    const openBrace = value[0];
    if (openBrace === "{" && closeBrace === "}") {
      let arr;
      const valTrim = value.slice(1, lastIdx);
      try {
        arr = JSON.parse("[" + valTrim + "]");
      } catch (_) {
        arr = valTrim ? valTrim.split(",") : [];
      }
      return arr.map((val) => convertCell(type, val));
    }
    return value;
  };
  var toTimestampString = (value) => {
    if (typeof value === "string") {
      return value.replace(" ", "T");
    }
    return value;
  };
  var httpEndpointURL = (socketUrl) => {
    let url = socketUrl;
    url = url.replace(/^ws/i, "http");
    url = url.replace(/(\/socket\/websocket|\/socket|\/websocket)\/?$/i, "");
    return url.replace(/\/+$/, "") + "/api/broadcast";
  };

  // node_modules/@supabase/realtime-js/dist/module/lib/push.js
  var Push = class {
    /**
     * Initializes the Push
     *
     * @param channel The Channel
     * @param event The event, for example `"phx_join"`
     * @param payload The payload, for example `{user_id: 123}`
     * @param timeout The push timeout in milliseconds
     */
    constructor(channel, event, payload = {}, timeout = DEFAULT_TIMEOUT) {
      this.channel = channel;
      this.event = event;
      this.payload = payload;
      this.timeout = timeout;
      this.sent = false;
      this.timeoutTimer = void 0;
      this.ref = "";
      this.receivedResp = null;
      this.recHooks = [];
      this.refEvent = null;
    }
    resend(timeout) {
      this.timeout = timeout;
      this._cancelRefEvent();
      this.ref = "";
      this.refEvent = null;
      this.receivedResp = null;
      this.sent = false;
      this.send();
    }
    send() {
      if (this._hasReceived("timeout")) {
        return;
      }
      this.startTimeout();
      this.sent = true;
      this.channel.socket.push({
        topic: this.channel.topic,
        event: this.event,
        payload: this.payload,
        ref: this.ref,
        join_ref: this.channel._joinRef()
      });
    }
    updatePayload(payload) {
      this.payload = Object.assign(Object.assign({}, this.payload), payload);
    }
    receive(status, callback) {
      var _a;
      if (this._hasReceived(status)) {
        callback((_a = this.receivedResp) === null || _a === void 0 ? void 0 : _a.response);
      }
      this.recHooks.push({ status, callback });
      return this;
    }
    startTimeout() {
      if (this.timeoutTimer) {
        return;
      }
      this.ref = this.channel.socket._makeRef();
      this.refEvent = this.channel._replyEventName(this.ref);
      const callback = (payload) => {
        this._cancelRefEvent();
        this._cancelTimeout();
        this.receivedResp = payload;
        this._matchReceive(payload);
      };
      this.channel._on(this.refEvent, {}, callback);
      this.timeoutTimer = setTimeout(() => {
        this.trigger("timeout", {});
      }, this.timeout);
    }
    trigger(status, response) {
      if (this.refEvent)
        this.channel._trigger(this.refEvent, { status, response });
    }
    destroy() {
      this._cancelRefEvent();
      this._cancelTimeout();
    }
    _cancelRefEvent() {
      if (!this.refEvent) {
        return;
      }
      this.channel._off(this.refEvent, {});
    }
    _cancelTimeout() {
      clearTimeout(this.timeoutTimer);
      this.timeoutTimer = void 0;
    }
    _matchReceive({ status, response }) {
      this.recHooks.filter((h) => h.status === status).forEach((h) => h.callback(response));
    }
    _hasReceived(status) {
      return this.receivedResp && this.receivedResp.status === status;
    }
  };

  // node_modules/@supabase/realtime-js/dist/module/RealtimePresence.js
  var REALTIME_PRESENCE_LISTEN_EVENTS;
  (function(REALTIME_PRESENCE_LISTEN_EVENTS2) {
    REALTIME_PRESENCE_LISTEN_EVENTS2["SYNC"] = "sync";
    REALTIME_PRESENCE_LISTEN_EVENTS2["JOIN"] = "join";
    REALTIME_PRESENCE_LISTEN_EVENTS2["LEAVE"] = "leave";
  })(REALTIME_PRESENCE_LISTEN_EVENTS || (REALTIME_PRESENCE_LISTEN_EVENTS = {}));
  var RealtimePresence = class _RealtimePresence {
    /**
     * Initializes the Presence.
     *
     * @param channel - The RealtimeChannel
     * @param opts - The options,
     *        for example `{events: {state: 'state', diff: 'diff'}}`
     */
    constructor(channel, opts) {
      this.channel = channel;
      this.state = {};
      this.pendingDiffs = [];
      this.joinRef = null;
      this.enabled = false;
      this.caller = {
        onJoin: () => {
        },
        onLeave: () => {
        },
        onSync: () => {
        }
      };
      const events = (opts === null || opts === void 0 ? void 0 : opts.events) || {
        state: "presence_state",
        diff: "presence_diff"
      };
      this.channel._on(events.state, {}, (newState) => {
        const { onJoin, onLeave, onSync } = this.caller;
        this.joinRef = this.channel._joinRef();
        this.state = _RealtimePresence.syncState(this.state, newState, onJoin, onLeave);
        this.pendingDiffs.forEach((diff) => {
          this.state = _RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);
        });
        this.pendingDiffs = [];
        onSync();
      });
      this.channel._on(events.diff, {}, (diff) => {
        const { onJoin, onLeave, onSync } = this.caller;
        if (this.inPendingSyncState()) {
          this.pendingDiffs.push(diff);
        } else {
          this.state = _RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);
          onSync();
        }
      });
      this.onJoin((key, currentPresences, newPresences) => {
        this.channel._trigger("presence", {
          event: "join",
          key,
          currentPresences,
          newPresences
        });
      });
      this.onLeave((key, currentPresences, leftPresences) => {
        this.channel._trigger("presence", {
          event: "leave",
          key,
          currentPresences,
          leftPresences
        });
      });
      this.onSync(() => {
        this.channel._trigger("presence", { event: "sync" });
      });
    }
    /**
     * Used to sync the list of presences on the server with the
     * client's state.
     *
     * An optional `onJoin` and `onLeave` callback can be provided to
     * react to changes in the client's local presences across
     * disconnects and reconnects with the server.
     *
     * @internal
     */
    static syncState(currentState, newState, onJoin, onLeave) {
      const state = this.cloneDeep(currentState);
      const transformedState = this.transformState(newState);
      const joins = {};
      const leaves = {};
      this.map(state, (key, presences) => {
        if (!transformedState[key]) {
          leaves[key] = presences;
        }
      });
      this.map(transformedState, (key, newPresences) => {
        const currentPresences = state[key];
        if (currentPresences) {
          const newPresenceRefs = newPresences.map((m) => m.presence_ref);
          const curPresenceRefs = currentPresences.map((m) => m.presence_ref);
          const joinedPresences = newPresences.filter((m) => curPresenceRefs.indexOf(m.presence_ref) < 0);
          const leftPresences = currentPresences.filter((m) => newPresenceRefs.indexOf(m.presence_ref) < 0);
          if (joinedPresences.length > 0) {
            joins[key] = joinedPresences;
          }
          if (leftPresences.length > 0) {
            leaves[key] = leftPresences;
          }
        } else {
          joins[key] = newPresences;
        }
      });
      return this.syncDiff(state, { joins, leaves }, onJoin, onLeave);
    }
    /**
     * Used to sync a diff of presence join and leave events from the
     * server, as they happen.
     *
     * Like `syncState`, `syncDiff` accepts optional `onJoin` and
     * `onLeave` callbacks to react to a user joining or leaving from a
     * device.
     *
     * @internal
     */
    static syncDiff(state, diff, onJoin, onLeave) {
      const { joins, leaves } = {
        joins: this.transformState(diff.joins),
        leaves: this.transformState(diff.leaves)
      };
      if (!onJoin) {
        onJoin = () => {
        };
      }
      if (!onLeave) {
        onLeave = () => {
        };
      }
      this.map(joins, (key, newPresences) => {
        var _a;
        const currentPresences = (_a = state[key]) !== null && _a !== void 0 ? _a : [];
        state[key] = this.cloneDeep(newPresences);
        if (currentPresences.length > 0) {
          const joinedPresenceRefs = state[key].map((m) => m.presence_ref);
          const curPresences = currentPresences.filter((m) => joinedPresenceRefs.indexOf(m.presence_ref) < 0);
          state[key].unshift(...curPresences);
        }
        onJoin(key, currentPresences, newPresences);
      });
      this.map(leaves, (key, leftPresences) => {
        let currentPresences = state[key];
        if (!currentPresences)
          return;
        const presenceRefsToRemove = leftPresences.map((m) => m.presence_ref);
        currentPresences = currentPresences.filter((m) => presenceRefsToRemove.indexOf(m.presence_ref) < 0);
        state[key] = currentPresences;
        onLeave(key, currentPresences, leftPresences);
        if (currentPresences.length === 0)
          delete state[key];
      });
      return state;
    }
    /** @internal */
    static map(obj, func) {
      return Object.getOwnPropertyNames(obj).map((key) => func(key, obj[key]));
    }
    /**
     * Remove 'metas' key
     * Change 'phx_ref' to 'presence_ref'
     * Remove 'phx_ref' and 'phx_ref_prev'
     *
     * @example
     * // returns {
     *  abc123: [
     *    { presence_ref: '2', user_id: 1 },
     *    { presence_ref: '3', user_id: 2 }
     *  ]
     * }
     * RealtimePresence.transformState({
     *  abc123: {
     *    metas: [
     *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },
     *      { phx_ref: '3', user_id: 2 }
     *    ]
     *  }
     * })
     *
     * @internal
     */
    static transformState(state) {
      state = this.cloneDeep(state);
      return Object.getOwnPropertyNames(state).reduce((newState, key) => {
        const presences = state[key];
        if ("metas" in presences) {
          newState[key] = presences.metas.map((presence) => {
            presence["presence_ref"] = presence["phx_ref"];
            delete presence["phx_ref"];
            delete presence["phx_ref_prev"];
            return presence;
          });
        } else {
          newState[key] = presences;
        }
        return newState;
      }, {});
    }
    /** @internal */
    static cloneDeep(obj) {
      return JSON.parse(JSON.stringify(obj));
    }
    /** @internal */
    onJoin(callback) {
      this.caller.onJoin = callback;
    }
    /** @internal */
    onLeave(callback) {
      this.caller.onLeave = callback;
    }
    /** @internal */
    onSync(callback) {
      this.caller.onSync = callback;
    }
    /** @internal */
    inPendingSyncState() {
      return !this.joinRef || this.joinRef !== this.channel._joinRef();
    }
  };

  // node_modules/@supabase/realtime-js/dist/module/RealtimeChannel.js
  var REALTIME_POSTGRES_CHANGES_LISTEN_EVENT;
  (function(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2) {
    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2["ALL"] = "*";
    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2["INSERT"] = "INSERT";
    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2["UPDATE"] = "UPDATE";
    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2["DELETE"] = "DELETE";
  })(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT || (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT = {}));
  var REALTIME_LISTEN_TYPES;
  (function(REALTIME_LISTEN_TYPES2) {
    REALTIME_LISTEN_TYPES2["BROADCAST"] = "broadcast";
    REALTIME_LISTEN_TYPES2["PRESENCE"] = "presence";
    REALTIME_LISTEN_TYPES2["POSTGRES_CHANGES"] = "postgres_changes";
    REALTIME_LISTEN_TYPES2["SYSTEM"] = "system";
  })(REALTIME_LISTEN_TYPES || (REALTIME_LISTEN_TYPES = {}));
  var REALTIME_SUBSCRIBE_STATES;
  (function(REALTIME_SUBSCRIBE_STATES2) {
    REALTIME_SUBSCRIBE_STATES2["SUBSCRIBED"] = "SUBSCRIBED";
    REALTIME_SUBSCRIBE_STATES2["TIMED_OUT"] = "TIMED_OUT";
    REALTIME_SUBSCRIBE_STATES2["CLOSED"] = "CLOSED";
    REALTIME_SUBSCRIBE_STATES2["CHANNEL_ERROR"] = "CHANNEL_ERROR";
  })(REALTIME_SUBSCRIBE_STATES || (REALTIME_SUBSCRIBE_STATES = {}));
  var RealtimeChannel = class _RealtimeChannel {
    constructor(topic, params = { config: {} }, socket) {
      var _a, _b;
      this.topic = topic;
      this.params = params;
      this.socket = socket;
      this.bindings = {};
      this.state = CHANNEL_STATES.closed;
      this.joinedOnce = false;
      this.pushBuffer = [];
      this.subTopic = topic.replace(/^realtime:/i, "");
      this.params.config = Object.assign({
        broadcast: { ack: false, self: false },
        presence: { key: "", enabled: false },
        private: false
      }, params.config);
      this.timeout = this.socket.timeout;
      this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);
      this.rejoinTimer = new Timer(() => this._rejoinUntilConnected(), this.socket.reconnectAfterMs);
      this.joinPush.receive("ok", () => {
        this.state = CHANNEL_STATES.joined;
        this.rejoinTimer.reset();
        this.pushBuffer.forEach((pushEvent) => pushEvent.send());
        this.pushBuffer = [];
      });
      this._onClose(() => {
        this.rejoinTimer.reset();
        this.socket.log("channel", `close ${this.topic} ${this._joinRef()}`);
        this.state = CHANNEL_STATES.closed;
        this.socket._remove(this);
      });
      this._onError((reason) => {
        if (this._isLeaving() || this._isClosed()) {
          return;
        }
        this.socket.log("channel", `error ${this.topic}`, reason);
        this.state = CHANNEL_STATES.errored;
        this.rejoinTimer.scheduleTimeout();
      });
      this.joinPush.receive("timeout", () => {
        if (!this._isJoining()) {
          return;
        }
        this.socket.log("channel", `timeout ${this.topic}`, this.joinPush.timeout);
        this.state = CHANNEL_STATES.errored;
        this.rejoinTimer.scheduleTimeout();
      });
      this.joinPush.receive("error", (reason) => {
        if (this._isLeaving() || this._isClosed()) {
          return;
        }
        this.socket.log("channel", `error ${this.topic}`, reason);
        this.state = CHANNEL_STATES.errored;
        this.rejoinTimer.scheduleTimeout();
      });
      this._on(CHANNEL_EVENTS.reply, {}, (payload, ref) => {
        this._trigger(this._replyEventName(ref), payload);
      });
      this.presence = new RealtimePresence(this);
      this.broadcastEndpointURL = httpEndpointURL(this.socket.endPoint);
      this.private = this.params.config.private || false;
      if (!this.private && ((_b = (_a = this.params.config) === null || _a === void 0 ? void 0 : _a.broadcast) === null || _b === void 0 ? void 0 : _b.replay)) {
        throw `tried to use replay on public channel '${this.topic}'. It must be a private channel.`;
      }
    }
    /** Subscribe registers your client with the server */
    subscribe(callback, timeout = this.timeout) {
      var _a, _b, _c;
      if (!this.socket.isConnected()) {
        this.socket.connect();
      }
      if (this.state == CHANNEL_STATES.closed) {
        const { config: { broadcast, presence, private: isPrivate } } = this.params;
        const postgres_changes = (_b = (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.map((r) => r.filter)) !== null && _b !== void 0 ? _b : [];
        const presence_enabled = !!this.bindings[REALTIME_LISTEN_TYPES.PRESENCE] && this.bindings[REALTIME_LISTEN_TYPES.PRESENCE].length > 0 || ((_c = this.params.config.presence) === null || _c === void 0 ? void 0 : _c.enabled) === true;
        const accessTokenPayload = {};
        const config = {
          broadcast,
          presence: Object.assign(Object.assign({}, presence), { enabled: presence_enabled }),
          postgres_changes,
          private: isPrivate
        };
        if (this.socket.accessTokenValue) {
          accessTokenPayload.access_token = this.socket.accessTokenValue;
        }
        this._onError((e) => callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, e));
        this._onClose(() => callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CLOSED));
        this.updateJoinPayload(Object.assign({ config }, accessTokenPayload));
        this.joinedOnce = true;
        this._rejoin(timeout);
        this.joinPush.receive("ok", async ({ postgres_changes: postgres_changes2 }) => {
          var _a2;
          this.socket.setAuth();
          if (postgres_changes2 === void 0) {
            callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED);
            return;
          } else {
            const clientPostgresBindings = this.bindings.postgres_changes;
            const bindingsLen = (_a2 = clientPostgresBindings === null || clientPostgresBindings === void 0 ? void 0 : clientPostgresBindings.length) !== null && _a2 !== void 0 ? _a2 : 0;
            const newPostgresBindings = [];
            for (let i = 0; i < bindingsLen; i++) {
              const clientPostgresBinding = clientPostgresBindings[i];
              const { filter: { event, schema, table, filter } } = clientPostgresBinding;
              const serverPostgresFilter = postgres_changes2 && postgres_changes2[i];
              if (serverPostgresFilter && serverPostgresFilter.event === event && serverPostgresFilter.schema === schema && serverPostgresFilter.table === table && serverPostgresFilter.filter === filter) {
                newPostgresBindings.push(Object.assign(Object.assign({}, clientPostgresBinding), { id: serverPostgresFilter.id }));
              } else {
                this.unsubscribe();
                this.state = CHANNEL_STATES.errored;
                callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, new Error("mismatch between server and client bindings for postgres changes"));
                return;
              }
            }
            this.bindings.postgres_changes = newPostgresBindings;
            callback && callback(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED);
            return;
          }
        }).receive("error", (error) => {
          this.state = CHANNEL_STATES.errored;
          callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, new Error(JSON.stringify(Object.values(error).join(", ") || "error")));
          return;
        }).receive("timeout", () => {
          callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.TIMED_OUT);
          return;
        });
      }
      return this;
    }
    presenceState() {
      return this.presence.state;
    }
    async track(payload, opts = {}) {
      return await this.send({
        type: "presence",
        event: "track",
        payload
      }, opts.timeout || this.timeout);
    }
    async untrack(opts = {}) {
      return await this.send({
        type: "presence",
        event: "untrack"
      }, opts);
    }
    on(type, filter, callback) {
      if (this.state === CHANNEL_STATES.joined && type === REALTIME_LISTEN_TYPES.PRESENCE) {
        this.socket.log("channel", `resubscribe to ${this.topic} due to change in presence callbacks on joined channel`);
        this.unsubscribe().then(() => this.subscribe());
      }
      return this._on(type, filter, callback);
    }
    /**
     * Sends a message into the channel.
     *
     * @param args Arguments to send to channel
     * @param args.type The type of event to send
     * @param args.event The name of the event being sent
     * @param args.payload Payload to be sent
     * @param opts Options to be used during the send process
     */
    async send(args, opts = {}) {
      var _a, _b;
      if (!this._canPush() && args.type === "broadcast") {
        const { event, payload: endpoint_payload } = args;
        const authorization = this.socket.accessTokenValue ? `Bearer ${this.socket.accessTokenValue}` : "";
        const options = {
          method: "POST",
          headers: {
            Authorization: authorization,
            apikey: this.socket.apiKey ? this.socket.apiKey : "",
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            messages: [
              {
                topic: this.subTopic,
                event,
                payload: endpoint_payload,
                private: this.private
              }
            ]
          })
        };
        try {
          const response = await this._fetchWithTimeout(this.broadcastEndpointURL, options, (_a = opts.timeout) !== null && _a !== void 0 ? _a : this.timeout);
          await ((_b = response.body) === null || _b === void 0 ? void 0 : _b.cancel());
          return response.ok ? "ok" : "error";
        } catch (error) {
          if (error.name === "AbortError") {
            return "timed out";
          } else {
            return "error";
          }
        }
      } else {
        return new Promise((resolve2) => {
          var _a2, _b2, _c;
          const push = this._push(args.type, args, opts.timeout || this.timeout);
          if (args.type === "broadcast" && !((_c = (_b2 = (_a2 = this.params) === null || _a2 === void 0 ? void 0 : _a2.config) === null || _b2 === void 0 ? void 0 : _b2.broadcast) === null || _c === void 0 ? void 0 : _c.ack)) {
            resolve2("ok");
          }
          push.receive("ok", () => resolve2("ok"));
          push.receive("error", () => resolve2("error"));
          push.receive("timeout", () => resolve2("timed out"));
        });
      }
    }
    updateJoinPayload(payload) {
      this.joinPush.updatePayload(payload);
    }
    /**
     * Leaves the channel.
     *
     * Unsubscribes from server events, and instructs channel to terminate on server.
     * Triggers onClose() hooks.
     *
     * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:
     * channel.unsubscribe().receive("ok", () => alert("left!") )
     */
    unsubscribe(timeout = this.timeout) {
      this.state = CHANNEL_STATES.leaving;
      const onClose = () => {
        this.socket.log("channel", `leave ${this.topic}`);
        this._trigger(CHANNEL_EVENTS.close, "leave", this._joinRef());
      };
      this.joinPush.destroy();
      let leavePush = null;
      return new Promise((resolve2) => {
        leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout);
        leavePush.receive("ok", () => {
          onClose();
          resolve2("ok");
        }).receive("timeout", () => {
          onClose();
          resolve2("timed out");
        }).receive("error", () => {
          resolve2("error");
        });
        leavePush.send();
        if (!this._canPush()) {
          leavePush.trigger("ok", {});
        }
      }).finally(() => {
        leavePush === null || leavePush === void 0 ? void 0 : leavePush.destroy();
      });
    }
    /**
     * Teardown the channel.
     *
     * Destroys and stops related timers.
     */
    teardown() {
      this.pushBuffer.forEach((push) => push.destroy());
      this.pushBuffer = [];
      this.rejoinTimer.reset();
      this.joinPush.destroy();
      this.state = CHANNEL_STATES.closed;
      this.bindings = {};
    }
    /** @internal */
    async _fetchWithTimeout(url, options, timeout) {
      const controller = new AbortController();
      const id = setTimeout(() => controller.abort(), timeout);
      const response = await this.socket.fetch(url, Object.assign(Object.assign({}, options), { signal: controller.signal }));
      clearTimeout(id);
      return response;
    }
    /** @internal */
    _push(event, payload, timeout = this.timeout) {
      if (!this.joinedOnce) {
        throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;
      }
      let pushEvent = new Push(this, event, payload, timeout);
      if (this._canPush()) {
        pushEvent.send();
      } else {
        this._addToPushBuffer(pushEvent);
      }
      return pushEvent;
    }
    /** @internal */
    _addToPushBuffer(pushEvent) {
      pushEvent.startTimeout();
      this.pushBuffer.push(pushEvent);
      if (this.pushBuffer.length > MAX_PUSH_BUFFER_SIZE) {
        const removedPush = this.pushBuffer.shift();
        if (removedPush) {
          removedPush.destroy();
          this.socket.log("channel", `discarded push due to buffer overflow: ${removedPush.event}`, removedPush.payload);
        }
      }
    }
    /**
     * Overridable message hook
     *
     * Receives all events for specialized message handling before dispatching to the channel callbacks.
     * Must return the payload, modified or unmodified.
     *
     * @internal
     */
    _onMessage(_event, payload, _ref) {
      return payload;
    }
    /** @internal */
    _isMember(topic) {
      return this.topic === topic;
    }
    /** @internal */
    _joinRef() {
      return this.joinPush.ref;
    }
    /** @internal */
    _trigger(type, payload, ref) {
      var _a, _b;
      const typeLower = type.toLocaleLowerCase();
      const { close, error, leave, join } = CHANNEL_EVENTS;
      const events = [close, error, leave, join];
      if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {
        return;
      }
      let handledPayload = this._onMessage(typeLower, payload, ref);
      if (payload && !handledPayload) {
        throw "channel onMessage callbacks must return the payload, modified or unmodified";
      }
      if (["insert", "update", "delete"].includes(typeLower)) {
        (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.filter((bind) => {
          var _a2, _b2, _c;
          return ((_a2 = bind.filter) === null || _a2 === void 0 ? void 0 : _a2.event) === "*" || ((_c = (_b2 = bind.filter) === null || _b2 === void 0 ? void 0 : _b2.event) === null || _c === void 0 ? void 0 : _c.toLocaleLowerCase()) === typeLower;
        }).map((bind) => bind.callback(handledPayload, ref));
      } else {
        (_b = this.bindings[typeLower]) === null || _b === void 0 ? void 0 : _b.filter((bind) => {
          var _a2, _b2, _c, _d, _e, _f;
          if (["broadcast", "presence", "postgres_changes"].includes(typeLower)) {
            if ("id" in bind) {
              const bindId = bind.id;
              const bindEvent = (_a2 = bind.filter) === null || _a2 === void 0 ? void 0 : _a2.event;
              return bindId && ((_b2 = payload.ids) === null || _b2 === void 0 ? void 0 : _b2.includes(bindId)) && (bindEvent === "*" || (bindEvent === null || bindEvent === void 0 ? void 0 : bindEvent.toLocaleLowerCase()) === ((_c = payload.data) === null || _c === void 0 ? void 0 : _c.type.toLocaleLowerCase()));
            } else {
              const bindEvent = (_e = (_d = bind === null || bind === void 0 ? void 0 : bind.filter) === null || _d === void 0 ? void 0 : _d.event) === null || _e === void 0 ? void 0 : _e.toLocaleLowerCase();
              return bindEvent === "*" || bindEvent === ((_f = payload === null || payload === void 0 ? void 0 : payload.event) === null || _f === void 0 ? void 0 : _f.toLocaleLowerCase());
            }
          } else {
            return bind.type.toLocaleLowerCase() === typeLower;
          }
        }).map((bind) => {
          if (typeof handledPayload === "object" && "ids" in handledPayload) {
            const postgresChanges = handledPayload.data;
            const { schema, table, commit_timestamp, type: type2, errors } = postgresChanges;
            const enrichedPayload = {
              schema,
              table,
              commit_timestamp,
              eventType: type2,
              new: {},
              old: {},
              errors
            };
            handledPayload = Object.assign(Object.assign({}, enrichedPayload), this._getPayloadRecords(postgresChanges));
          }
          bind.callback(handledPayload, ref);
        });
      }
    }
    /** @internal */
    _isClosed() {
      return this.state === CHANNEL_STATES.closed;
    }
    /** @internal */
    _isJoined() {
      return this.state === CHANNEL_STATES.joined;
    }
    /** @internal */
    _isJoining() {
      return this.state === CHANNEL_STATES.joining;
    }
    /** @internal */
    _isLeaving() {
      return this.state === CHANNEL_STATES.leaving;
    }
    /** @internal */
    _replyEventName(ref) {
      return `chan_reply_${ref}`;
    }
    /** @internal */
    _on(type, filter, callback) {
      const typeLower = type.toLocaleLowerCase();
      const binding = {
        type: typeLower,
        filter,
        callback
      };
      if (this.bindings[typeLower]) {
        this.bindings[typeLower].push(binding);
      } else {
        this.bindings[typeLower] = [binding];
      }
      return this;
    }
    /** @internal */
    _off(type, filter) {
      const typeLower = type.toLocaleLowerCase();
      if (this.bindings[typeLower]) {
        this.bindings[typeLower] = this.bindings[typeLower].filter((bind) => {
          var _a;
          return !(((_a = bind.type) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === typeLower && _RealtimeChannel.isEqual(bind.filter, filter));
        });
      }
      return this;
    }
    /** @internal */
    static isEqual(obj1, obj2) {
      if (Object.keys(obj1).length !== Object.keys(obj2).length) {
        return false;
      }
      for (const k in obj1) {
        if (obj1[k] !== obj2[k]) {
          return false;
        }
      }
      return true;
    }
    /** @internal */
    _rejoinUntilConnected() {
      this.rejoinTimer.scheduleTimeout();
      if (this.socket.isConnected()) {
        this._rejoin();
      }
    }
    /**
     * Registers a callback that will be executed when the channel closes.
     *
     * @internal
     */
    _onClose(callback) {
      this._on(CHANNEL_EVENTS.close, {}, callback);
    }
    /**
     * Registers a callback that will be executed when the channel encounteres an error.
     *
     * @internal
     */
    _onError(callback) {
      this._on(CHANNEL_EVENTS.error, {}, (reason) => callback(reason));
    }
    /**
     * Returns `true` if the socket is connected and the channel has been joined.
     *
     * @internal
     */
    _canPush() {
      return this.socket.isConnected() && this._isJoined();
    }
    /** @internal */
    _rejoin(timeout = this.timeout) {
      if (this._isLeaving()) {
        return;
      }
      this.socket._leaveOpenTopic(this.topic);
      this.state = CHANNEL_STATES.joining;
      this.joinPush.resend(timeout);
    }
    /** @internal */
    _getPayloadRecords(payload) {
      const records = {
        new: {},
        old: {}
      };
      if (payload.type === "INSERT" || payload.type === "UPDATE") {
        records.new = convertChangeData(payload.columns, payload.record);
      }
      if (payload.type === "UPDATE" || payload.type === "DELETE") {
        records.old = convertChangeData(payload.columns, payload.old_record);
      }
      return records;
    }
  };

  // node_modules/@supabase/realtime-js/dist/module/RealtimeClient.js
  var noop2 = () => {
  };
  var CONNECTION_TIMEOUTS = {
    HEARTBEAT_INTERVAL: 25e3,
    RECONNECT_DELAY: 10,
    HEARTBEAT_TIMEOUT_FALLBACK: 100
  };
  var RECONNECT_INTERVALS = [1e3, 2e3, 5e3, 1e4];
  var DEFAULT_RECONNECT_FALLBACK = 1e4;
  var WORKER_SCRIPT = `
  addEventListener("message", (e) => {
    if (e.data.event === "start") {
      setInterval(() => postMessage({ event: "keepAlive" }), e.data.interval);
    }
  });`;
  var RealtimeClient = class {
    /**
     * Initializes the Socket.
     *
     * @param endPoint The string WebSocket endpoint, ie, "ws://example.com/socket", "wss://example.com", "/socket" (inherited host & protocol)
     * @param httpEndpoint The string HTTP endpoint, ie, "https://example.com", "/" (inherited host & protocol)
     * @param options.transport The Websocket Transport, for example WebSocket. This can be a custom implementation
     * @param options.timeout The default timeout in milliseconds to trigger push timeouts.
     * @param options.params The optional params to pass when connecting.
     * @param options.headers Deprecated: headers cannot be set on websocket connections and this option will be removed in the future.
     * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.
     * @param options.heartbeatCallback The optional function to handle heartbeat status.
     * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }
     * @param options.logLevel Sets the log level for Realtime
     * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))
     * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.
     * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.
     * @param options.worker Use Web Worker to set a side flow. Defaults to false.
     * @param options.workerUrl The URL of the worker script. Defaults to https://realtime.supabase.com/worker.js that includes a heartbeat event call to keep the connection alive.
     */
    constructor(endPoint, options) {
      var _a;
      this.accessTokenValue = null;
      this.apiKey = null;
      this.channels = new Array();
      this.endPoint = "";
      this.httpEndpoint = "";
      this.headers = {};
      this.params = {};
      this.timeout = DEFAULT_TIMEOUT;
      this.transport = null;
      this.heartbeatIntervalMs = CONNECTION_TIMEOUTS.HEARTBEAT_INTERVAL;
      this.heartbeatTimer = void 0;
      this.pendingHeartbeatRef = null;
      this.heartbeatCallback = noop2;
      this.ref = 0;
      this.reconnectTimer = null;
      this.logger = noop2;
      this.conn = null;
      this.sendBuffer = [];
      this.serializer = new Serializer();
      this.stateChangeCallbacks = {
        open: [],
        close: [],
        error: [],
        message: []
      };
      this.accessToken = null;
      this._connectionState = "disconnected";
      this._wasManualDisconnect = false;
      this._authPromise = null;
      this._resolveFetch = (customFetch) => {
        let _fetch;
        if (customFetch) {
          _fetch = customFetch;
        } else if (typeof fetch === "undefined") {
          _fetch = (...args) => Promise.resolve().then(() => (init_browser(), browser_exports)).then(({ default: fetch3 }) => fetch3(...args)).catch((error) => {
            throw new Error(`Failed to load @supabase/node-fetch: ${error.message}. This is required for HTTP requests in Node.js environments without native fetch.`);
          });
        } else {
          _fetch = fetch;
        }
        return (...args) => _fetch(...args);
      };
      if (!((_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.apikey)) {
        throw new Error("API key is required to connect to Realtime");
      }
      this.apiKey = options.params.apikey;
      this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;
      this.httpEndpoint = httpEndpointURL(endPoint);
      this._initializeOptions(options);
      this._setupReconnectionTimer();
      this.fetch = this._resolveFetch(options === null || options === void 0 ? void 0 : options.fetch);
    }
    /**
     * Connects the socket, unless already connected.
     */
    connect() {
      if (this.isConnecting() || this.isDisconnecting() || this.conn !== null && this.isConnected()) {
        return;
      }
      this._setConnectionState("connecting");
      this._setAuthSafely("connect");
      if (this.transport) {
        this.conn = new this.transport(this.endpointURL());
      } else {
        try {
          this.conn = websocket_factory_default.createWebSocket(this.endpointURL());
        } catch (error) {
          this._setConnectionState("disconnected");
          const errorMessage = error.message;
          if (errorMessage.includes("Node.js")) {
            throw new Error(`${errorMessage}

To use Realtime in Node.js, you need to provide a WebSocket implementation:

Option 1: Use Node.js 22+ which has native WebSocket support
Option 2: Install and provide the "ws" package:

  npm install ws

  import ws from "ws"
  const client = new RealtimeClient(url, {
    ...options,
    transport: ws
  })`);
          }
          throw new Error(`WebSocket not available: ${errorMessage}`);
        }
      }
      this._setupConnectionHandlers();
    }
    /**
     * Returns the URL of the websocket.
     * @returns string The URL of the websocket.
     */
    endpointURL() {
      return this._appendParams(this.endPoint, Object.assign({}, this.params, { vsn: VSN }));
    }
    /**
     * Disconnects the socket.
     *
     * @param code A numeric status code to send on disconnect.
     * @param reason A custom reason for the disconnect.
     */
    disconnect(code, reason) {
      if (this.isDisconnecting()) {
        return;
      }
      this._setConnectionState("disconnecting", true);
      if (this.conn) {
        const fallbackTimer = setTimeout(() => {
          this._setConnectionState("disconnected");
        }, 100);
        this.conn.onclose = () => {
          clearTimeout(fallbackTimer);
          this._setConnectionState("disconnected");
        };
        if (code) {
          this.conn.close(code, reason !== null && reason !== void 0 ? reason : "");
        } else {
          this.conn.close();
        }
        this._teardownConnection();
      } else {
        this._setConnectionState("disconnected");
      }
    }
    /**
     * Returns all created channels
     */
    getChannels() {
      return this.channels;
    }
    /**
     * Unsubscribes and removes a single channel
     * @param channel A RealtimeChannel instance
     */
    async removeChannel(channel) {
      const status = await channel.unsubscribe();
      if (this.channels.length === 0) {
        this.disconnect();
      }
      return status;
    }
    /**
     * Unsubscribes and removes all channels
     */
    async removeAllChannels() {
      const values_1 = await Promise.all(this.channels.map((channel) => channel.unsubscribe()));
      this.channels = [];
      this.disconnect();
      return values_1;
    }
    /**
     * Logs the message.
     *
     * For customized logging, `this.logger` can be overridden.
     */
    log(kind, msg, data) {
      this.logger(kind, msg, data);
    }
    /**
     * Returns the current state of the socket.
     */
    connectionState() {
      switch (this.conn && this.conn.readyState) {
        case SOCKET_STATES.connecting:
          return CONNECTION_STATE.Connecting;
        case SOCKET_STATES.open:
          return CONNECTION_STATE.Open;
        case SOCKET_STATES.closing:
          return CONNECTION_STATE.Closing;
        default:
          return CONNECTION_STATE.Closed;
      }
    }
    /**
     * Returns `true` is the connection is open.
     */
    isConnected() {
      return this.connectionState() === CONNECTION_STATE.Open;
    }
    /**
     * Returns `true` if the connection is currently connecting.
     */
    isConnecting() {
      return this._connectionState === "connecting";
    }
    /**
     * Returns `true` if the connection is currently disconnecting.
     */
    isDisconnecting() {
      return this._connectionState === "disconnecting";
    }
    channel(topic, params = { config: {} }) {
      const realtimeTopic = `realtime:${topic}`;
      const exists = this.getChannels().find((c) => c.topic === realtimeTopic);
      if (!exists) {
        const chan = new RealtimeChannel(`realtime:${topic}`, params, this);
        this.channels.push(chan);
        return chan;
      } else {
        return exists;
      }
    }
    /**
     * Push out a message if the socket is connected.
     *
     * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.
     */
    push(data) {
      const { topic, event, payload, ref } = data;
      const callback = () => {
        this.encode(data, (result) => {
          var _a;
          (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);
        });
      };
      this.log("push", `${topic} ${event} (${ref})`, payload);
      if (this.isConnected()) {
        callback();
      } else {
        this.sendBuffer.push(callback);
      }
    }
    /**
     * Sets the JWT access token used for channel subscription authorization and Realtime RLS.
     *
     * If param is null it will use the `accessToken` callback function or the token set on the client.
     *
     * On callback used, it will set the value of the token internal to the client.
     *
     * @param token A JWT string to override the token set on the client.
     */
    async setAuth(token = null) {
      this._authPromise = this._performAuth(token);
      try {
        await this._authPromise;
      } finally {
        this._authPromise = null;
      }
    }
    /**
     * Sends a heartbeat message if the socket is connected.
     */
    async sendHeartbeat() {
      var _a;
      if (!this.isConnected()) {
        try {
          this.heartbeatCallback("disconnected");
        } catch (e) {
          this.log("error", "error in heartbeat callback", e);
        }
        return;
      }
      if (this.pendingHeartbeatRef) {
        this.pendingHeartbeatRef = null;
        this.log("transport", "heartbeat timeout. Attempting to re-establish connection");
        try {
          this.heartbeatCallback("timeout");
        } catch (e) {
          this.log("error", "error in heartbeat callback", e);
        }
        this._wasManualDisconnect = false;
        (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(WS_CLOSE_NORMAL, "heartbeat timeout");
        setTimeout(() => {
          var _a2;
          if (!this.isConnected()) {
            (_a2 = this.reconnectTimer) === null || _a2 === void 0 ? void 0 : _a2.scheduleTimeout();
          }
        }, CONNECTION_TIMEOUTS.HEARTBEAT_TIMEOUT_FALLBACK);
        return;
      }
      this.pendingHeartbeatRef = this._makeRef();
      this.push({
        topic: "phoenix",
        event: "heartbeat",
        payload: {},
        ref: this.pendingHeartbeatRef
      });
      try {
        this.heartbeatCallback("sent");
      } catch (e) {
        this.log("error", "error in heartbeat callback", e);
      }
      this._setAuthSafely("heartbeat");
    }
    onHeartbeat(callback) {
      this.heartbeatCallback = callback;
    }
    /**
     * Flushes send buffer
     */
    flushSendBuffer() {
      if (this.isConnected() && this.sendBuffer.length > 0) {
        this.sendBuffer.forEach((callback) => callback());
        this.sendBuffer = [];
      }
    }
    /**
     * Return the next message ref, accounting for overflows
     *
     * @internal
     */
    _makeRef() {
      let newRef = this.ref + 1;
      if (newRef === this.ref) {
        this.ref = 0;
      } else {
        this.ref = newRef;
      }
      return this.ref.toString();
    }
    /**
     * Unsubscribe from channels with the specified topic.
     *
     * @internal
     */
    _leaveOpenTopic(topic) {
      let dupChannel = this.channels.find((c) => c.topic === topic && (c._isJoined() || c._isJoining()));
      if (dupChannel) {
        this.log("transport", `leaving duplicate topic "${topic}"`);
        dupChannel.unsubscribe();
      }
    }
    /**
     * Removes a subscription from the socket.
     *
     * @param channel An open subscription.
     *
     * @internal
     */
    _remove(channel) {
      this.channels = this.channels.filter((c) => c.topic !== channel.topic);
    }
    /** @internal */
    _onConnMessage(rawMessage) {
      this.decode(rawMessage.data, (msg) => {
        if (msg.topic === "phoenix" && msg.event === "phx_reply") {
          try {
            this.heartbeatCallback(msg.payload.status === "ok" ? "ok" : "error");
          } catch (e) {
            this.log("error", "error in heartbeat callback", e);
          }
        }
        if (msg.ref && msg.ref === this.pendingHeartbeatRef) {
          this.pendingHeartbeatRef = null;
        }
        const { topic, event, payload, ref } = msg;
        const refString = ref ? `(${ref})` : "";
        const status = payload.status || "";
        this.log("receive", `${status} ${topic} ${event} ${refString}`.trim(), payload);
        this.channels.filter((channel) => channel._isMember(topic)).forEach((channel) => channel._trigger(event, payload, ref));
        this._triggerStateCallbacks("message", msg);
      });
    }
    /**
     * Clear specific timer
     * @internal
     */
    _clearTimer(timer) {
      var _a;
      if (timer === "heartbeat" && this.heartbeatTimer) {
        clearInterval(this.heartbeatTimer);
        this.heartbeatTimer = void 0;
      } else if (timer === "reconnect") {
        (_a = this.reconnectTimer) === null || _a === void 0 ? void 0 : _a.reset();
      }
    }
    /**
     * Clear all timers
     * @internal
     */
    _clearAllTimers() {
      this._clearTimer("heartbeat");
      this._clearTimer("reconnect");
    }
    /**
     * Setup connection handlers for WebSocket events
     * @internal
     */
    _setupConnectionHandlers() {
      if (!this.conn)
        return;
      if ("binaryType" in this.conn) {
        ;
        this.conn.binaryType = "arraybuffer";
      }
      this.conn.onopen = () => this._onConnOpen();
      this.conn.onerror = (error) => this._onConnError(error);
      this.conn.onmessage = (event) => this._onConnMessage(event);
      this.conn.onclose = (event) => this._onConnClose(event);
    }
    /**
     * Teardown connection and cleanup resources
     * @internal
     */
    _teardownConnection() {
      if (this.conn) {
        this.conn.onopen = null;
        this.conn.onerror = null;
        this.conn.onmessage = null;
        this.conn.onclose = null;
        this.conn = null;
      }
      this._clearAllTimers();
      this.channels.forEach((channel) => channel.teardown());
    }
    /** @internal */
    _onConnOpen() {
      this._setConnectionState("connected");
      this.log("transport", `connected to ${this.endpointURL()}`);
      this.flushSendBuffer();
      this._clearTimer("reconnect");
      if (!this.worker) {
        this._startHeartbeat();
      } else {
        if (!this.workerRef) {
          this._startWorkerHeartbeat();
        }
      }
      this._triggerStateCallbacks("open");
    }
    /** @internal */
    _startHeartbeat() {
      this.heartbeatTimer && clearInterval(this.heartbeatTimer);
      this.heartbeatTimer = setInterval(() => this.sendHeartbeat(), this.heartbeatIntervalMs);
    }
    /** @internal */
    _startWorkerHeartbeat() {
      if (this.workerUrl) {
        this.log("worker", `starting worker for from ${this.workerUrl}`);
      } else {
        this.log("worker", `starting default worker`);
      }
      const objectUrl = this._workerObjectUrl(this.workerUrl);
      this.workerRef = new Worker(objectUrl);
      this.workerRef.onerror = (error) => {
        this.log("worker", "worker error", error.message);
        this.workerRef.terminate();
      };
      this.workerRef.onmessage = (event) => {
        if (event.data.event === "keepAlive") {
          this.sendHeartbeat();
        }
      };
      this.workerRef.postMessage({
        event: "start",
        interval: this.heartbeatIntervalMs
      });
    }
    /** @internal */
    _onConnClose(event) {
      var _a;
      this._setConnectionState("disconnected");
      this.log("transport", "close", event);
      this._triggerChanError();
      this._clearTimer("heartbeat");
      if (!this._wasManualDisconnect) {
        (_a = this.reconnectTimer) === null || _a === void 0 ? void 0 : _a.scheduleTimeout();
      }
      this._triggerStateCallbacks("close", event);
    }
    /** @internal */
    _onConnError(error) {
      this._setConnectionState("disconnected");
      this.log("transport", `${error}`);
      this._triggerChanError();
      this._triggerStateCallbacks("error", error);
    }
    /** @internal */
    _triggerChanError() {
      this.channels.forEach((channel) => channel._trigger(CHANNEL_EVENTS.error));
    }
    /** @internal */
    _appendParams(url, params) {
      if (Object.keys(params).length === 0) {
        return url;
      }
      const prefix = url.match(/\?/) ? "&" : "?";
      const query = new URLSearchParams(params);
      return `${url}${prefix}${query}`;
    }
    _workerObjectUrl(url) {
      let result_url;
      if (url) {
        result_url = url;
      } else {
        const blob = new Blob([WORKER_SCRIPT], { type: "application/javascript" });
        result_url = URL.createObjectURL(blob);
      }
      return result_url;
    }
    /**
     * Set connection state with proper state management
     * @internal
     */
    _setConnectionState(state, manual = false) {
      this._connectionState = state;
      if (state === "connecting") {
        this._wasManualDisconnect = false;
      } else if (state === "disconnecting") {
        this._wasManualDisconnect = manual;
      }
    }
    /**
     * Perform the actual auth operation
     * @internal
     */
    async _performAuth(token = null) {
      let tokenToSend;
      if (token) {
        tokenToSend = token;
      } else if (this.accessToken) {
        tokenToSend = await this.accessToken();
      } else {
        tokenToSend = this.accessTokenValue;
      }
      if (this.accessTokenValue != tokenToSend) {
        this.accessTokenValue = tokenToSend;
        this.channels.forEach((channel) => {
          const payload = {
            access_token: tokenToSend,
            version: DEFAULT_VERSION
          };
          tokenToSend && channel.updateJoinPayload(payload);
          if (channel.joinedOnce && channel._isJoined()) {
            channel._push(CHANNEL_EVENTS.access_token, {
              access_token: tokenToSend
            });
          }
        });
      }
    }
    /**
     * Wait for any in-flight auth operations to complete
     * @internal
     */
    async _waitForAuthIfNeeded() {
      if (this._authPromise) {
        await this._authPromise;
      }
    }
    /**
     * Safely call setAuth with standardized error handling
     * @internal
     */
    _setAuthSafely(context = "general") {
      this.setAuth().catch((e) => {
        this.log("error", `error setting auth in ${context}`, e);
      });
    }
    /**
     * Trigger state change callbacks with proper error handling
     * @internal
     */
    _triggerStateCallbacks(event, data) {
      try {
        this.stateChangeCallbacks[event].forEach((callback) => {
          try {
            callback(data);
          } catch (e) {
            this.log("error", `error in ${event} callback`, e);
          }
        });
      } catch (e) {
        this.log("error", `error triggering ${event} callbacks`, e);
      }
    }
    /**
     * Setup reconnection timer with proper configuration
     * @internal
     */
    _setupReconnectionTimer() {
      this.reconnectTimer = new Timer(async () => {
        setTimeout(async () => {
          await this._waitForAuthIfNeeded();
          if (!this.isConnected()) {
            this.connect();
          }
        }, CONNECTION_TIMEOUTS.RECONNECT_DELAY);
      }, this.reconnectAfterMs);
    }
    /**
     * Initialize client options with defaults
     * @internal
     */
    _initializeOptions(options) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j;
      this.transport = (_a = options === null || options === void 0 ? void 0 : options.transport) !== null && _a !== void 0 ? _a : null;
      this.timeout = (_b = options === null || options === void 0 ? void 0 : options.timeout) !== null && _b !== void 0 ? _b : DEFAULT_TIMEOUT;
      this.heartbeatIntervalMs = (_c = options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs) !== null && _c !== void 0 ? _c : CONNECTION_TIMEOUTS.HEARTBEAT_INTERVAL;
      this.worker = (_d = options === null || options === void 0 ? void 0 : options.worker) !== null && _d !== void 0 ? _d : false;
      this.accessToken = (_e = options === null || options === void 0 ? void 0 : options.accessToken) !== null && _e !== void 0 ? _e : null;
      this.heartbeatCallback = (_f = options === null || options === void 0 ? void 0 : options.heartbeatCallback) !== null && _f !== void 0 ? _f : noop2;
      if (options === null || options === void 0 ? void 0 : options.params)
        this.params = options.params;
      if (options === null || options === void 0 ? void 0 : options.logger)
        this.logger = options.logger;
      if ((options === null || options === void 0 ? void 0 : options.logLevel) || (options === null || options === void 0 ? void 0 : options.log_level)) {
        this.logLevel = options.logLevel || options.log_level;
        this.params = Object.assign(Object.assign({}, this.params), { log_level: this.logLevel });
      }
      this.reconnectAfterMs = (_g = options === null || options === void 0 ? void 0 : options.reconnectAfterMs) !== null && _g !== void 0 ? _g : (tries) => {
        return RECONNECT_INTERVALS[tries - 1] || DEFAULT_RECONNECT_FALLBACK;
      };
      this.encode = (_h = options === null || options === void 0 ? void 0 : options.encode) !== null && _h !== void 0 ? _h : (payload, callback) => {
        return callback(JSON.stringify(payload));
      };
      this.decode = (_j = options === null || options === void 0 ? void 0 : options.decode) !== null && _j !== void 0 ? _j : this.serializer.decode.bind(this.serializer);
      if (this.worker) {
        if (typeof window !== "undefined" && !window.Worker) {
          throw new Error("Web Worker is not supported");
        }
        this.workerUrl = options === null || options === void 0 ? void 0 : options.workerUrl;
      }
    }
  };

  // node_modules/@supabase/storage-js/dist/module/lib/errors.js
  var StorageError = class extends Error {
    constructor(message) {
      super(message);
      this.__isStorageError = true;
      this.name = "StorageError";
    }
  };
  function isStorageError(error) {
    return typeof error === "object" && error !== null && "__isStorageError" in error;
  }
  var StorageApiError = class extends StorageError {
    constructor(message, status, statusCode) {
      super(message);
      this.name = "StorageApiError";
      this.status = status;
      this.statusCode = statusCode;
    }
    toJSON() {
      return {
        name: this.name,
        message: this.message,
        status: this.status,
        statusCode: this.statusCode
      };
    }
  };
  var StorageUnknownError = class extends StorageError {
    constructor(message, originalError) {
      super(message);
      this.name = "StorageUnknownError";
      this.originalError = originalError;
    }
  };

  // node_modules/@supabase/storage-js/dist/module/lib/helpers.js
  var __awaiter2 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve2) {
        resolve2(value);
      });
    }
    return new (P || (P = Promise))(function(resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var resolveFetch2 = (customFetch) => {
    let _fetch;
    if (customFetch) {
      _fetch = customFetch;
    } else if (typeof fetch === "undefined") {
      _fetch = (...args) => Promise.resolve().then(() => (init_browser(), browser_exports)).then(({ default: fetch3 }) => fetch3(...args));
    } else {
      _fetch = fetch;
    }
    return (...args) => _fetch(...args);
  };
  var resolveResponse = () => __awaiter2(void 0, void 0, void 0, function* () {
    if (typeof Response === "undefined") {
      return (yield Promise.resolve().then(() => (init_browser(), browser_exports))).Response;
    }
    return Response;
  });
  var recursiveToCamel = (item) => {
    if (Array.isArray(item)) {
      return item.map((el) => recursiveToCamel(el));
    } else if (typeof item === "function" || item !== Object(item)) {
      return item;
    }
    const result = {};
    Object.entries(item).forEach(([key, value]) => {
      const newKey = key.replace(/([-_][a-z])/gi, (c) => c.toUpperCase().replace(/[-_]/g, ""));
      result[newKey] = recursiveToCamel(value);
    });
    return result;
  };
  var isPlainObject = (value) => {
    if (typeof value !== "object" || value === null) {
      return false;
    }
    const prototype = Object.getPrototypeOf(value);
    return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
  };

  // node_modules/@supabase/storage-js/dist/module/lib/fetch.js
  var __awaiter3 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve2) {
        resolve2(value);
      });
    }
    return new (P || (P = Promise))(function(resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var _getErrorMessage = (err) => err.msg || err.message || err.error_description || err.error || JSON.stringify(err);
  var handleError = (error, reject, options) => __awaiter3(void 0, void 0, void 0, function* () {
    const Res = yield resolveResponse();
    if (error instanceof Res && !(options === null || options === void 0 ? void 0 : options.noResolveJson)) {
      error.json().then((err) => {
        const status = error.status || 500;
        const statusCode = (err === null || err === void 0 ? void 0 : err.statusCode) || status + "";
        reject(new StorageApiError(_getErrorMessage(err), status, statusCode));
      }).catch((err) => {
        reject(new StorageUnknownError(_getErrorMessage(err), err));
      });
    } else {
      reject(new StorageUnknownError(_getErrorMessage(error), error));
    }
  });
  var _getRequestParams = (method, options, parameters, body) => {
    const params = { method, headers: (options === null || options === void 0 ? void 0 : options.headers) || {} };
    if (method === "GET" || !body) {
      return params;
    }
    if (isPlainObject(body)) {
      params.headers = Object.assign({ "Content-Type": "application/json" }, options === null || options === void 0 ? void 0 : options.headers);
      params.body = JSON.stringify(body);
    } else {
      params.body = body;
    }
    if (options === null || options === void 0 ? void 0 : options.duplex) {
      params.duplex = options.duplex;
    }
    return Object.assign(Object.assign({}, params), parameters);
  };
  function _handleRequest(fetcher, method, url, options, parameters, body) {
    return __awaiter3(this, void 0, void 0, function* () {
      return new Promise((resolve2, reject) => {
        fetcher(url, _getRequestParams(method, options, parameters, body)).then((result) => {
          if (!result.ok)
            throw result;
          if (options === null || options === void 0 ? void 0 : options.noResolveJson)
            return result;
          return result.json();
        }).then((data) => resolve2(data)).catch((error) => handleError(error, reject, options));
      });
    });
  }
  function get(fetcher, url, options, parameters) {
    return __awaiter3(this, void 0, void 0, function* () {
      return _handleRequest(fetcher, "GET", url, options, parameters);
    });
  }
  function post(fetcher, url, body, options, parameters) {
    return __awaiter3(this, void 0, void 0, function* () {
      return _handleRequest(fetcher, "POST", url, options, parameters, body);
    });
  }
  function put(fetcher, url, body, options, parameters) {
    return __awaiter3(this, void 0, void 0, function* () {
      return _handleRequest(fetcher, "PUT", url, options, parameters, body);
    });
  }
  function head(fetcher, url, options, parameters) {
    return __awaiter3(this, void 0, void 0, function* () {
      return _handleRequest(fetcher, "HEAD", url, Object.assign(Object.assign({}, options), { noResolveJson: true }), parameters);
    });
  }
  function remove(fetcher, url, body, options, parameters) {
    return __awaiter3(this, void 0, void 0, function* () {
      return _handleRequest(fetcher, "DELETE", url, options, parameters, body);
    });
  }

  // node_modules/@supabase/storage-js/dist/module/packages/StreamDownloadBuilder.js
  var __awaiter4 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve2) {
        resolve2(value);
      });
    }
    return new (P || (P = Promise))(function(resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var StreamDownloadBuilder = class {
    constructor(downloadFn, shouldThrowOnError) {
      this.downloadFn = downloadFn;
      this.shouldThrowOnError = shouldThrowOnError;
    }
    then(onfulfilled, onrejected) {
      return this.execute().then(onfulfilled, onrejected);
    }
    execute() {
      return __awaiter4(this, void 0, void 0, function* () {
        try {
          const result = yield this.downloadFn();
          return {
            data: result.body,
            error: null
          };
        } catch (error) {
          if (this.shouldThrowOnError) {
            throw error;
          }
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
  };

  // node_modules/@supabase/storage-js/dist/module/packages/BlobDownloadBuilder.js
  var __awaiter5 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve2) {
        resolve2(value);
      });
    }
    return new (P || (P = Promise))(function(resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var BlobDownloadBuilder = class {
    constructor(downloadFn, shouldThrowOnError) {
      this.downloadFn = downloadFn;
      this.shouldThrowOnError = shouldThrowOnError;
    }
    asStream() {
      return new StreamDownloadBuilder(this.downloadFn, this.shouldThrowOnError);
    }
    then(onfulfilled, onrejected) {
      return this.execute().then(onfulfilled, onrejected);
    }
    execute() {
      return __awaiter5(this, void 0, void 0, function* () {
        try {
          const result = yield this.downloadFn();
          return {
            data: yield result.blob(),
            error: null
          };
        } catch (error) {
          if (this.shouldThrowOnError) {
            throw error;
          }
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
  };

  // node_modules/@supabase/storage-js/dist/module/packages/StorageFileApi.js
  var __awaiter6 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve2) {
        resolve2(value);
      });
    }
    return new (P || (P = Promise))(function(resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var DEFAULT_SEARCH_OPTIONS = {
    limit: 100,
    offset: 0,
    sortBy: {
      column: "name",
      order: "asc"
    }
  };
  var DEFAULT_FILE_OPTIONS = {
    cacheControl: "3600",
    contentType: "text/plain;charset=UTF-8",
    upsert: false
  };
  var StorageFileApi = class {
    constructor(url, headers = {}, bucketId, fetch3) {
      this.shouldThrowOnError = false;
      this.url = url;
      this.headers = headers;
      this.bucketId = bucketId;
      this.fetch = resolveFetch2(fetch3);
    }
    /**
     * Enable throwing errors instead of returning them.
     */
    throwOnError() {
      this.shouldThrowOnError = true;
      return this;
    }
    /**
     * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.
     *
     * @param method HTTP method.
     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.
     * @param fileBody The body of the file to be stored in the bucket.
     */
    uploadOrUpdate(method, path, fileBody, fileOptions) {
      return __awaiter6(this, void 0, void 0, function* () {
        try {
          let body;
          const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);
          let headers = Object.assign(Object.assign({}, this.headers), method === "POST" && { "x-upsert": String(options.upsert) });
          const metadata = options.metadata;
          if (typeof Blob !== "undefined" && fileBody instanceof Blob) {
            body = new FormData();
            body.append("cacheControl", options.cacheControl);
            if (metadata) {
              body.append("metadata", this.encodeMetadata(metadata));
            }
            body.append("", fileBody);
          } else if (typeof FormData !== "undefined" && fileBody instanceof FormData) {
            body = fileBody;
            body.append("cacheControl", options.cacheControl);
            if (metadata) {
              body.append("metadata", this.encodeMetadata(metadata));
            }
          } else {
            body = fileBody;
            headers["cache-control"] = `max-age=${options.cacheControl}`;
            headers["content-type"] = options.contentType;
            if (metadata) {
              headers["x-metadata"] = this.toBase64(this.encodeMetadata(metadata));
            }
          }
          if (fileOptions === null || fileOptions === void 0 ? void 0 : fileOptions.headers) {
            headers = Object.assign(Object.assign({}, headers), fileOptions.headers);
          }
          const cleanPath = this._removeEmptyFolders(path);
          const _path = this._getFinalPath(cleanPath);
          const data = yield (method == "PUT" ? put : post)(this.fetch, `${this.url}/object/${_path}`, body, Object.assign({ headers }, (options === null || options === void 0 ? void 0 : options.duplex) ? { duplex: options.duplex } : {}));
          return {
            data: { path: cleanPath, id: data.Id, fullPath: data.Key },
            error: null
          };
        } catch (error) {
          if (this.shouldThrowOnError) {
            throw error;
          }
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * Uploads a file to an existing bucket.
     *
     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.
     * @param fileBody The body of the file to be stored in the bucket.
     */
    upload(path, fileBody, fileOptions) {
      return __awaiter6(this, void 0, void 0, function* () {
        return this.uploadOrUpdate("POST", path, fileBody, fileOptions);
      });
    }
    /**
     * Upload a file with a token generated from `createSignedUploadUrl`.
     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.
     * @param token The token generated from `createSignedUploadUrl`
     * @param fileBody The body of the file to be stored in the bucket.
     */
    uploadToSignedUrl(path, token, fileBody, fileOptions) {
      return __awaiter6(this, void 0, void 0, function* () {
        const cleanPath = this._removeEmptyFolders(path);
        const _path = this._getFinalPath(cleanPath);
        const url = new URL(this.url + `/object/upload/sign/${_path}`);
        url.searchParams.set("token", token);
        try {
          let body;
          const options = Object.assign({ upsert: DEFAULT_FILE_OPTIONS.upsert }, fileOptions);
          const headers = Object.assign(Object.assign({}, this.headers), { "x-upsert": String(options.upsert) });
          if (typeof Blob !== "undefined" && fileBody instanceof Blob) {
            body = new FormData();
            body.append("cacheControl", options.cacheControl);
            body.append("", fileBody);
          } else if (typeof FormData !== "undefined" && fileBody instanceof FormData) {
            body = fileBody;
            body.append("cacheControl", options.cacheControl);
          } else {
            body = fileBody;
            headers["cache-control"] = `max-age=${options.cacheControl}`;
            headers["content-type"] = options.contentType;
          }
          const data = yield put(this.fetch, url.toString(), body, { headers });
          return {
            data: { path: cleanPath, fullPath: data.Key },
            error: null
          };
        } catch (error) {
          if (this.shouldThrowOnError) {
            throw error;
          }
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * Creates a signed upload URL.
     * Signed upload URLs can be used to upload files to the bucket without further authentication.
     * They are valid for 2 hours.
     * @param path The file path, including the current file name. For example `folder/image.png`.
     * @param options.upsert If set to true, allows the file to be overwritten if it already exists.
     */
    createSignedUploadUrl(path, options) {
      return __awaiter6(this, void 0, void 0, function* () {
        try {
          let _path = this._getFinalPath(path);
          const headers = Object.assign({}, this.headers);
          if (options === null || options === void 0 ? void 0 : options.upsert) {
            headers["x-upsert"] = "true";
          }
          const data = yield post(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, { headers });
          const url = new URL(this.url + data.url);
          const token = url.searchParams.get("token");
          if (!token) {
            throw new StorageError("No token returned by API");
          }
          return { data: { signedUrl: url.toString(), path, token }, error: null };
        } catch (error) {
          if (this.shouldThrowOnError) {
            throw error;
          }
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * Replaces an existing file at the specified path with a new one.
     *
     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.
     * @param fileBody The body of the file to be stored in the bucket.
     */
    update(path, fileBody, fileOptions) {
      return __awaiter6(this, void 0, void 0, function* () {
        return this.uploadOrUpdate("PUT", path, fileBody, fileOptions);
      });
    }
    /**
     * Moves an existing file to a new path in the same bucket.
     *
     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.
     * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.
     * @param options The destination options.
     */
    move(fromPath, toPath, options) {
      return __awaiter6(this, void 0, void 0, function* () {
        try {
          const data = yield post(this.fetch, `${this.url}/object/move`, {
            bucketId: this.bucketId,
            sourceKey: fromPath,
            destinationKey: toPath,
            destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket
          }, { headers: this.headers });
          return { data, error: null };
        } catch (error) {
          if (this.shouldThrowOnError) {
            throw error;
          }
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * Copies an existing file to a new path in the same bucket.
     *
     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.
     * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.
     * @param options The destination options.
     */
    copy(fromPath, toPath, options) {
      return __awaiter6(this, void 0, void 0, function* () {
        try {
          const data = yield post(this.fetch, `${this.url}/object/copy`, {
            bucketId: this.bucketId,
            sourceKey: fromPath,
            destinationKey: toPath,
            destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket
          }, { headers: this.headers });
          return { data: { path: data.Key }, error: null };
        } catch (error) {
          if (this.shouldThrowOnError) {
            throw error;
          }
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.
     *
     * @param path The file path, including the current file name. For example `folder/image.png`.
     * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.
     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.
     * @param options.transform Transform the asset before serving it to the client.
     */
    createSignedUrl(path, expiresIn, options) {
      return __awaiter6(this, void 0, void 0, function* () {
        try {
          let _path = this._getFinalPath(path);
          let data = yield post(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({ expiresIn }, (options === null || options === void 0 ? void 0 : options.transform) ? { transform: options.transform } : {}), { headers: this.headers });
          const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? "" : options.download}` : "";
          const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);
          data = { signedUrl };
          return { data, error: null };
        } catch (error) {
          if (this.shouldThrowOnError) {
            throw error;
          }
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.
     *
     * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.
     * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.
     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.
     */
    createSignedUrls(paths, expiresIn, options) {
      return __awaiter6(this, void 0, void 0, function* () {
        try {
          const data = yield post(this.fetch, `${this.url}/object/sign/${this.bucketId}`, { expiresIn, paths }, { headers: this.headers });
          const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? "" : options.download}` : "";
          return {
            data: data.map((datum) => Object.assign(Object.assign({}, datum), { signedUrl: datum.signedURL ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`) : null })),
            error: null
          };
        } catch (error) {
          if (this.shouldThrowOnError) {
            throw error;
          }
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.
     *
     * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.
     * @param options.transform Transform the asset before serving it to the client.
     */
    download(path, options) {
      const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== "undefined";
      const renderPath = wantsTransformation ? "render/image/authenticated" : "object";
      const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});
      const queryString = transformationQuery ? `?${transformationQuery}` : "";
      const _path = this._getFinalPath(path);
      const downloadFn = () => get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {
        headers: this.headers,
        noResolveJson: true
      });
      return new BlobDownloadBuilder(downloadFn, this.shouldThrowOnError);
    }
    /**
     * Retrieves the details of an existing file.
     * @param path
     */
    info(path) {
      return __awaiter6(this, void 0, void 0, function* () {
        const _path = this._getFinalPath(path);
        try {
          const data = yield get(this.fetch, `${this.url}/object/info/${_path}`, {
            headers: this.headers
          });
          return { data: recursiveToCamel(data), error: null };
        } catch (error) {
          if (this.shouldThrowOnError) {
            throw error;
          }
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * Checks the existence of a file.
     * @param path
     */
    exists(path) {
      return __awaiter6(this, void 0, void 0, function* () {
        const _path = this._getFinalPath(path);
        try {
          yield head(this.fetch, `${this.url}/object/${_path}`, {
            headers: this.headers
          });
          return { data: true, error: null };
        } catch (error) {
          if (this.shouldThrowOnError) {
            throw error;
          }
          if (isStorageError(error) && error instanceof StorageUnknownError) {
            const originalError = error.originalError;
            if ([400, 404].includes(originalError === null || originalError === void 0 ? void 0 : originalError.status)) {
              return { data: false, error };
            }
          }
          throw error;
        }
      });
    }
    /**
     * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.
     * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.
     *
     * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.
     * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.
     * @param options.transform Transform the asset before serving it to the client.
     */
    getPublicUrl(path, options) {
      const _path = this._getFinalPath(path);
      const _queryString = [];
      const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `download=${options.download === true ? "" : options.download}` : "";
      if (downloadQueryParam !== "") {
        _queryString.push(downloadQueryParam);
      }
      const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== "undefined";
      const renderPath = wantsTransformation ? "render/image" : "object";
      const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});
      if (transformationQuery !== "") {
        _queryString.push(transformationQuery);
      }
      let queryString = _queryString.join("&");
      if (queryString !== "") {
        queryString = `?${queryString}`;
      }
      return {
        data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) }
      };
    }
    /**
     * Deletes files within the same bucket
     *
     * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].
     */
    remove(paths) {
      return __awaiter6(this, void 0, void 0, function* () {
        try {
          const data = yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, { prefixes: paths }, { headers: this.headers });
          return { data, error: null };
        } catch (error) {
          if (this.shouldThrowOnError) {
            throw error;
          }
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * Get file metadata
     * @param id the file id to retrieve metadata
     */
    // async getMetadata(
    //   id: string
    // ): Promise<
    //   | {
    //       data: Metadata
    //       error: null
    //     }
    //   | {
    //       data: null
    //       error: StorageError
    //     }
    // > {
    //   try {
    //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })
    //     return { data, error: null }
    //   } catch (error) {
    //     if (isStorageError(error)) {
    //       return { data: null, error }
    //     }
    //     throw error
    //   }
    // }
    /**
     * Update file metadata
     * @param id the file id to update metadata
     * @param meta the new file metadata
     */
    // async updateMetadata(
    //   id: string,
    //   meta: Metadata
    // ): Promise<
    //   | {
    //       data: Metadata
    //       error: null
    //     }
    //   | {
    //       data: null
    //       error: StorageError
    //     }
    // > {
    //   try {
    //     const data = await post(
    //       this.fetch,
    //       `${this.url}/metadata/${id}`,
    //       { ...meta },
    //       { headers: this.headers }
    //     )
    //     return { data, error: null }
    //   } catch (error) {
    //     if (isStorageError(error)) {
    //       return { data: null, error }
    //     }
    //     throw error
    //   }
    // }
    /**
     * Lists all the files and folders within a path of the bucket.
     * @param path The folder path.
     * @param options Search options including limit (defaults to 100), offset, sortBy, and search
     */
    list(path, options, parameters) {
      return __awaiter6(this, void 0, void 0, function* () {
        try {
          const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), { prefix: path || "" });
          const data = yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, { headers: this.headers }, parameters);
          return { data, error: null };
        } catch (error) {
          if (this.shouldThrowOnError) {
            throw error;
          }
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * @experimental this method signature might change in the future
     * @param options search options
     * @param parameters
     */
    listV2(options, parameters) {
      return __awaiter6(this, void 0, void 0, function* () {
        try {
          const body = Object.assign({}, options);
          const data = yield post(this.fetch, `${this.url}/object/list-v2/${this.bucketId}`, body, { headers: this.headers }, parameters);
          return { data, error: null };
        } catch (error) {
          if (this.shouldThrowOnError) {
            throw error;
          }
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    encodeMetadata(metadata) {
      return JSON.stringify(metadata);
    }
    toBase64(data) {
      if (typeof Buffer !== "undefined") {
        return Buffer.from(data).toString("base64");
      }
      return btoa(data);
    }
    _getFinalPath(path) {
      return `${this.bucketId}/${path.replace(/^\/+/, "")}`;
    }
    _removeEmptyFolders(path) {
      return path.replace(/^\/|\/$/g, "").replace(/\/+/g, "/");
    }
    transformOptsToQueryString(transform) {
      const params = [];
      if (transform.width) {
        params.push(`width=${transform.width}`);
      }
      if (transform.height) {
        params.push(`height=${transform.height}`);
      }
      if (transform.resize) {
        params.push(`resize=${transform.resize}`);
      }
      if (transform.format) {
        params.push(`format=${transform.format}`);
      }
      if (transform.quality) {
        params.push(`quality=${transform.quality}`);
      }
      return params.join("&");
    }
  };

  // node_modules/@supabase/storage-js/dist/module/lib/version.js
  var version2 = "2.75.0";

  // node_modules/@supabase/storage-js/dist/module/lib/constants.js
  var DEFAULT_HEADERS = { "X-Client-Info": `storage-js/${version2}` };

  // node_modules/@supabase/storage-js/dist/module/packages/StorageBucketApi.js
  var __awaiter7 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve2) {
        resolve2(value);
      });
    }
    return new (P || (P = Promise))(function(resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var StorageBucketApi = class {
    constructor(url, headers = {}, fetch3, opts) {
      this.shouldThrowOnError = false;
      const baseUrl = new URL(url);
      if (opts === null || opts === void 0 ? void 0 : opts.useNewHostname) {
        const isSupabaseHost = /supabase\.(co|in|red)$/.test(baseUrl.hostname);
        if (isSupabaseHost && !baseUrl.hostname.includes("storage.supabase.")) {
          baseUrl.hostname = baseUrl.hostname.replace("supabase.", "storage.supabase.");
        }
      }
      this.url = baseUrl.href.replace(/\/$/, "");
      this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);
      this.fetch = resolveFetch2(fetch3);
    }
    /**
     * Enable throwing errors instead of returning them.
     */
    throwOnError() {
      this.shouldThrowOnError = true;
      return this;
    }
    /**
     * Retrieves the details of all Storage buckets within an existing project.
     */
    listBuckets() {
      return __awaiter7(this, void 0, void 0, function* () {
        try {
          const data = yield get(this.fetch, `${this.url}/bucket`, { headers: this.headers });
          return { data, error: null };
        } catch (error) {
          if (this.shouldThrowOnError) {
            throw error;
          }
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * Retrieves the details of an existing Storage bucket.
     *
     * @param id The unique identifier of the bucket you would like to retrieve.
     */
    getBucket(id) {
      return __awaiter7(this, void 0, void 0, function* () {
        try {
          const data = yield get(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers });
          return { data, error: null };
        } catch (error) {
          if (this.shouldThrowOnError) {
            throw error;
          }
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * Creates a new Storage bucket
     *
     * @param id A unique identifier for the bucket you are creating.
     * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.
     * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.
     * The global file size limit takes precedence over this value.
     * The default value is null, which doesn't set a per bucket file size limit.
     * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.
     * The default value is null, which allows files with all mime types to be uploaded.
     * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.
     * @returns newly created bucket id
     * @param options.type (private-beta) specifies the bucket type. see `BucketType` for more details.
     *   - default bucket type is `STANDARD`
     */
    createBucket(id_1) {
      return __awaiter7(this, arguments, void 0, function* (id, options = {
        public: false
      }) {
        try {
          const data = yield post(this.fetch, `${this.url}/bucket`, {
            id,
            name: id,
            type: options.type,
            public: options.public,
            file_size_limit: options.fileSizeLimit,
            allowed_mime_types: options.allowedMimeTypes
          }, { headers: this.headers });
          return { data, error: null };
        } catch (error) {
          if (this.shouldThrowOnError) {
            throw error;
          }
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * Updates a Storage bucket
     *
     * @param id A unique identifier for the bucket you are updating.
     * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.
     * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.
     * The global file size limit takes precedence over this value.
     * The default value is null, which doesn't set a per bucket file size limit.
     * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.
     * The default value is null, which allows files with all mime types to be uploaded.
     * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.
     */
    updateBucket(id, options) {
      return __awaiter7(this, void 0, void 0, function* () {
        try {
          const data = yield put(this.fetch, `${this.url}/bucket/${id}`, {
            id,
            name: id,
            public: options.public,
            file_size_limit: options.fileSizeLimit,
            allowed_mime_types: options.allowedMimeTypes
          }, { headers: this.headers });
          return { data, error: null };
        } catch (error) {
          if (this.shouldThrowOnError) {
            throw error;
          }
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * Removes all objects inside a single bucket.
     *
     * @param id The unique identifier of the bucket you would like to empty.
     */
    emptyBucket(id) {
      return __awaiter7(this, void 0, void 0, function* () {
        try {
          const data = yield post(this.fetch, `${this.url}/bucket/${id}/empty`, {}, { headers: this.headers });
          return { data, error: null };
        } catch (error) {
          if (this.shouldThrowOnError) {
            throw error;
          }
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.
     * You must first `empty()` the bucket.
     *
     * @param id The unique identifier of the bucket you would like to delete.
     */
    deleteBucket(id) {
      return __awaiter7(this, void 0, void 0, function* () {
        try {
          const data = yield remove(this.fetch, `${this.url}/bucket/${id}`, {}, { headers: this.headers });
          return { data, error: null };
        } catch (error) {
          if (this.shouldThrowOnError) {
            throw error;
          }
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
  };

  // node_modules/@supabase/storage-js/dist/module/StorageClient.js
  var StorageClient = class extends StorageBucketApi {
    constructor(url, headers = {}, fetch3, opts) {
      super(url, headers, fetch3, opts);
    }
    /**
     * Perform file operation in a bucket.
     *
     * @param id The bucket id to operate on.
     */
    from(id) {
      return new StorageFileApi(this.url, this.headers, id, this.fetch);
    }
  };

  // node_modules/@supabase/supabase-js/dist/module/lib/version.js
  var version3 = "2.75.0";

  // node_modules/@supabase/supabase-js/dist/module/lib/constants.js
  var JS_ENV = "";
  if (typeof Deno !== "undefined") {
    JS_ENV = "deno";
  } else if (typeof document !== "undefined") {
    JS_ENV = "web";
  } else if (typeof navigator !== "undefined" && navigator.product === "ReactNative") {
    JS_ENV = "react-native";
  } else {
    JS_ENV = "node";
  }
  var DEFAULT_HEADERS2 = { "X-Client-Info": `supabase-js-${JS_ENV}/${version3}` };
  var DEFAULT_GLOBAL_OPTIONS = {
    headers: DEFAULT_HEADERS2
  };
  var DEFAULT_DB_OPTIONS = {
    schema: "public"
  };
  var DEFAULT_AUTH_OPTIONS = {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    flowType: "implicit"
  };
  var DEFAULT_REALTIME_OPTIONS = {};

  // node_modules/@supabase/supabase-js/dist/module/lib/fetch.js
  init_browser();
  var __awaiter8 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve2) {
        resolve2(value);
      });
    }
    return new (P || (P = Promise))(function(resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var resolveFetch3 = (customFetch) => {
    let _fetch;
    if (customFetch) {
      _fetch = customFetch;
    } else if (typeof fetch === "undefined") {
      _fetch = browser_default;
    } else {
      _fetch = fetch;
    }
    return (...args) => _fetch(...args);
  };
  var resolveHeadersConstructor = () => {
    if (typeof Headers === "undefined") {
      return Headers2;
    }
    return Headers;
  };
  var fetchWithAuth = (supabaseKey, getAccessToken, customFetch) => {
    const fetch3 = resolveFetch3(customFetch);
    const HeadersConstructor = resolveHeadersConstructor();
    return (input, init) => __awaiter8(void 0, void 0, void 0, function* () {
      var _a;
      const accessToken = (_a = yield getAccessToken()) !== null && _a !== void 0 ? _a : supabaseKey;
      let headers = new HeadersConstructor(init === null || init === void 0 ? void 0 : init.headers);
      if (!headers.has("apikey")) {
        headers.set("apikey", supabaseKey);
      }
      if (!headers.has("Authorization")) {
        headers.set("Authorization", `Bearer ${accessToken}`);
      }
      return fetch3(input, Object.assign(Object.assign({}, init), { headers }));
    });
  };

  // node_modules/@supabase/supabase-js/dist/module/lib/helpers.js
  var __awaiter9 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve2) {
        resolve2(value);
      });
    }
    return new (P || (P = Promise))(function(resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  function ensureTrailingSlash(url) {
    return url.endsWith("/") ? url : url + "/";
  }
  function applySettingDefaults(options, defaults) {
    var _a, _b;
    const { db: dbOptions, auth: authOptions, realtime: realtimeOptions, global: globalOptions } = options;
    const { db: DEFAULT_DB_OPTIONS2, auth: DEFAULT_AUTH_OPTIONS2, realtime: DEFAULT_REALTIME_OPTIONS2, global: DEFAULT_GLOBAL_OPTIONS2 } = defaults;
    const result = {
      db: Object.assign(Object.assign({}, DEFAULT_DB_OPTIONS2), dbOptions),
      auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS2), authOptions),
      realtime: Object.assign(Object.assign({}, DEFAULT_REALTIME_OPTIONS2), realtimeOptions),
      storage: {},
      global: Object.assign(Object.assign(Object.assign({}, DEFAULT_GLOBAL_OPTIONS2), globalOptions), { headers: Object.assign(Object.assign({}, (_a = DEFAULT_GLOBAL_OPTIONS2 === null || DEFAULT_GLOBAL_OPTIONS2 === void 0 ? void 0 : DEFAULT_GLOBAL_OPTIONS2.headers) !== null && _a !== void 0 ? _a : {}), (_b = globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.headers) !== null && _b !== void 0 ? _b : {}) }),
      accessToken: () => __awaiter9(this, void 0, void 0, function* () {
        return "";
      })
    };
    if (options.accessToken) {
      result.accessToken = options.accessToken;
    } else {
      delete result.accessToken;
    }
    return result;
  }
  function validateSupabaseUrl(supabaseUrl2) {
    const trimmedUrl = supabaseUrl2 === null || supabaseUrl2 === void 0 ? void 0 : supabaseUrl2.trim();
    if (!trimmedUrl) {
      throw new Error("supabaseUrl is required.");
    }
    if (!trimmedUrl.match(/^https?:\/\//i)) {
      throw new Error("Invalid supabaseUrl: Must be a valid HTTP or HTTPS URL.");
    }
    try {
      return new URL(ensureTrailingSlash(trimmedUrl));
    } catch (_a) {
      throw Error("Invalid supabaseUrl: Provided URL is malformed.");
    }
  }

  // node_modules/@supabase/auth-js/dist/module/lib/version.js
  var version4 = "2.75.0";

  // node_modules/@supabase/auth-js/dist/module/lib/constants.js
  var AUTO_REFRESH_TICK_DURATION_MS = 30 * 1e3;
  var AUTO_REFRESH_TICK_THRESHOLD = 3;
  var EXPIRY_MARGIN_MS = AUTO_REFRESH_TICK_THRESHOLD * AUTO_REFRESH_TICK_DURATION_MS;
  var GOTRUE_URL = "http://localhost:9999";
  var STORAGE_KEY = "supabase.auth.token";
  var DEFAULT_HEADERS3 = { "X-Client-Info": `gotrue-js/${version4}` };
  var API_VERSION_HEADER_NAME = "X-Supabase-Api-Version";
  var API_VERSIONS = {
    "2024-01-01": {
      timestamp: Date.parse("2024-01-01T00:00:00.0Z"),
      name: "2024-01-01"
    }
  };
  var BASE64URL_REGEX = /^([a-z0-9_-]{4})*($|[a-z0-9_-]{3}$|[a-z0-9_-]{2}$)$/i;
  var JWKS_TTL = 10 * 60 * 1e3;

  // node_modules/@supabase/auth-js/dist/module/lib/errors.js
  var AuthError = class extends Error {
    constructor(message, status, code) {
      super(message);
      this.__isAuthError = true;
      this.name = "AuthError";
      this.status = status;
      this.code = code;
    }
  };
  function isAuthError(error) {
    return typeof error === "object" && error !== null && "__isAuthError" in error;
  }
  var AuthApiError = class extends AuthError {
    constructor(message, status, code) {
      super(message, status, code);
      this.name = "AuthApiError";
      this.status = status;
      this.code = code;
    }
  };
  function isAuthApiError(error) {
    return isAuthError(error) && error.name === "AuthApiError";
  }
  var AuthUnknownError = class extends AuthError {
    constructor(message, originalError) {
      super(message);
      this.name = "AuthUnknownError";
      this.originalError = originalError;
    }
  };
  var CustomAuthError = class extends AuthError {
    constructor(message, name, status, code) {
      super(message, status, code);
      this.name = name;
      this.status = status;
    }
  };
  var AuthSessionMissingError = class extends CustomAuthError {
    constructor() {
      super("Auth session missing!", "AuthSessionMissingError", 400, void 0);
    }
  };
  function isAuthSessionMissingError(error) {
    return isAuthError(error) && error.name === "AuthSessionMissingError";
  }
  var AuthInvalidTokenResponseError = class extends CustomAuthError {
    constructor() {
      super("Auth session or user missing", "AuthInvalidTokenResponseError", 500, void 0);
    }
  };
  var AuthInvalidCredentialsError = class extends CustomAuthError {
    constructor(message) {
      super(message, "AuthInvalidCredentialsError", 400, void 0);
    }
  };
  var AuthImplicitGrantRedirectError = class extends CustomAuthError {
    constructor(message, details = null) {
      super(message, "AuthImplicitGrantRedirectError", 500, void 0);
      this.details = null;
      this.details = details;
    }
    toJSON() {
      return {
        name: this.name,
        message: this.message,
        status: this.status,
        details: this.details
      };
    }
  };
  function isAuthImplicitGrantRedirectError(error) {
    return isAuthError(error) && error.name === "AuthImplicitGrantRedirectError";
  }
  var AuthPKCEGrantCodeExchangeError = class extends CustomAuthError {
    constructor(message, details = null) {
      super(message, "AuthPKCEGrantCodeExchangeError", 500, void 0);
      this.details = null;
      this.details = details;
    }
    toJSON() {
      return {
        name: this.name,
        message: this.message,
        status: this.status,
        details: this.details
      };
    }
  };
  var AuthRetryableFetchError = class extends CustomAuthError {
    constructor(message, status) {
      super(message, "AuthRetryableFetchError", status, void 0);
    }
  };
  function isAuthRetryableFetchError(error) {
    return isAuthError(error) && error.name === "AuthRetryableFetchError";
  }
  var AuthWeakPasswordError = class extends CustomAuthError {
    constructor(message, status, reasons) {
      super(message, "AuthWeakPasswordError", status, "weak_password");
      this.reasons = reasons;
    }
  };
  var AuthInvalidJwtError = class extends CustomAuthError {
    constructor(message) {
      super(message, "AuthInvalidJwtError", 400, "invalid_jwt");
    }
  };

  // node_modules/@supabase/auth-js/dist/module/lib/base64url.js
  var TO_BASE64URL = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".split("");
  var IGNORE_BASE64URL = " 	\n\r=".split("");
  var FROM_BASE64URL = (() => {
    const charMap = new Array(128);
    for (let i = 0; i < charMap.length; i += 1) {
      charMap[i] = -1;
    }
    for (let i = 0; i < IGNORE_BASE64URL.length; i += 1) {
      charMap[IGNORE_BASE64URL[i].charCodeAt(0)] = -2;
    }
    for (let i = 0; i < TO_BASE64URL.length; i += 1) {
      charMap[TO_BASE64URL[i].charCodeAt(0)] = i;
    }
    return charMap;
  })();
  function byteToBase64URL(byte, state, emit) {
    if (byte !== null) {
      state.queue = state.queue << 8 | byte;
      state.queuedBits += 8;
      while (state.queuedBits >= 6) {
        const pos = state.queue >> state.queuedBits - 6 & 63;
        emit(TO_BASE64URL[pos]);
        state.queuedBits -= 6;
      }
    } else if (state.queuedBits > 0) {
      state.queue = state.queue << 6 - state.queuedBits;
      state.queuedBits = 6;
      while (state.queuedBits >= 6) {
        const pos = state.queue >> state.queuedBits - 6 & 63;
        emit(TO_BASE64URL[pos]);
        state.queuedBits -= 6;
      }
    }
  }
  function byteFromBase64URL(charCode, state, emit) {
    const bits = FROM_BASE64URL[charCode];
    if (bits > -1) {
      state.queue = state.queue << 6 | bits;
      state.queuedBits += 6;
      while (state.queuedBits >= 8) {
        emit(state.queue >> state.queuedBits - 8 & 255);
        state.queuedBits -= 8;
      }
    } else if (bits === -2) {
      return;
    } else {
      throw new Error(`Invalid Base64-URL character "${String.fromCharCode(charCode)}"`);
    }
  }
  function stringFromBase64URL(str) {
    const conv = [];
    const utf8Emit = (codepoint) => {
      conv.push(String.fromCodePoint(codepoint));
    };
    const utf8State = {
      utf8seq: 0,
      codepoint: 0
    };
    const b64State = { queue: 0, queuedBits: 0 };
    const byteEmit = (byte) => {
      stringFromUTF8(byte, utf8State, utf8Emit);
    };
    for (let i = 0; i < str.length; i += 1) {
      byteFromBase64URL(str.charCodeAt(i), b64State, byteEmit);
    }
    return conv.join("");
  }
  function codepointToUTF8(codepoint, emit) {
    if (codepoint <= 127) {
      emit(codepoint);
      return;
    } else if (codepoint <= 2047) {
      emit(192 | codepoint >> 6);
      emit(128 | codepoint & 63);
      return;
    } else if (codepoint <= 65535) {
      emit(224 | codepoint >> 12);
      emit(128 | codepoint >> 6 & 63);
      emit(128 | codepoint & 63);
      return;
    } else if (codepoint <= 1114111) {
      emit(240 | codepoint >> 18);
      emit(128 | codepoint >> 12 & 63);
      emit(128 | codepoint >> 6 & 63);
      emit(128 | codepoint & 63);
      return;
    }
    throw new Error(`Unrecognized Unicode codepoint: ${codepoint.toString(16)}`);
  }
  function stringToUTF8(str, emit) {
    for (let i = 0; i < str.length; i += 1) {
      let codepoint = str.charCodeAt(i);
      if (codepoint > 55295 && codepoint <= 56319) {
        const highSurrogate = (codepoint - 55296) * 1024 & 65535;
        const lowSurrogate = str.charCodeAt(i + 1) - 56320 & 65535;
        codepoint = (lowSurrogate | highSurrogate) + 65536;
        i += 1;
      }
      codepointToUTF8(codepoint, emit);
    }
  }
  function stringFromUTF8(byte, state, emit) {
    if (state.utf8seq === 0) {
      if (byte <= 127) {
        emit(byte);
        return;
      }
      for (let leadingBit = 1; leadingBit < 6; leadingBit += 1) {
        if ((byte >> 7 - leadingBit & 1) === 0) {
          state.utf8seq = leadingBit;
          break;
        }
      }
      if (state.utf8seq === 2) {
        state.codepoint = byte & 31;
      } else if (state.utf8seq === 3) {
        state.codepoint = byte & 15;
      } else if (state.utf8seq === 4) {
        state.codepoint = byte & 7;
      } else {
        throw new Error("Invalid UTF-8 sequence");
      }
      state.utf8seq -= 1;
    } else if (state.utf8seq > 0) {
      if (byte <= 127) {
        throw new Error("Invalid UTF-8 sequence");
      }
      state.codepoint = state.codepoint << 6 | byte & 63;
      state.utf8seq -= 1;
      if (state.utf8seq === 0) {
        emit(state.codepoint);
      }
    }
  }
  function base64UrlToUint8Array(str) {
    const result = [];
    const state = { queue: 0, queuedBits: 0 };
    const onByte = (byte) => {
      result.push(byte);
    };
    for (let i = 0; i < str.length; i += 1) {
      byteFromBase64URL(str.charCodeAt(i), state, onByte);
    }
    return new Uint8Array(result);
  }
  function stringToUint8Array(str) {
    const result = [];
    stringToUTF8(str, (byte) => result.push(byte));
    return new Uint8Array(result);
  }
  function bytesToBase64URL(bytes) {
    const result = [];
    const state = { queue: 0, queuedBits: 0 };
    const onChar = (char) => {
      result.push(char);
    };
    bytes.forEach((byte) => byteToBase64URL(byte, state, onChar));
    byteToBase64URL(null, state, onChar);
    return result.join("");
  }

  // node_modules/@supabase/auth-js/dist/module/lib/helpers.js
  function expiresAt(expiresIn) {
    const timeNow = Math.round(Date.now() / 1e3);
    return timeNow + expiresIn;
  }
  function uuid() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
      const r = Math.random() * 16 | 0, v = c == "x" ? r : r & 3 | 8;
      return v.toString(16);
    });
  }
  var isBrowser2 = () => typeof window !== "undefined" && typeof document !== "undefined";
  var localStorageWriteTests = {
    tested: false,
    writable: false
  };
  var supportsLocalStorage = () => {
    if (!isBrowser2()) {
      return false;
    }
    try {
      if (typeof globalThis.localStorage !== "object") {
        return false;
      }
    } catch (e) {
      return false;
    }
    if (localStorageWriteTests.tested) {
      return localStorageWriteTests.writable;
    }
    const randomKey = `lswt-${Math.random()}${Math.random()}`;
    try {
      globalThis.localStorage.setItem(randomKey, randomKey);
      globalThis.localStorage.removeItem(randomKey);
      localStorageWriteTests.tested = true;
      localStorageWriteTests.writable = true;
    } catch (e) {
      localStorageWriteTests.tested = true;
      localStorageWriteTests.writable = false;
    }
    return localStorageWriteTests.writable;
  };
  function parseParametersFromURL(href) {
    const result = {};
    const url = new URL(href);
    if (url.hash && url.hash[0] === "#") {
      try {
        const hashSearchParams = new URLSearchParams(url.hash.substring(1));
        hashSearchParams.forEach((value, key) => {
          result[key] = value;
        });
      } catch (e) {
      }
    }
    url.searchParams.forEach((value, key) => {
      result[key] = value;
    });
    return result;
  }
  var resolveFetch4 = (customFetch) => {
    let _fetch;
    if (customFetch) {
      _fetch = customFetch;
    } else if (typeof fetch === "undefined") {
      _fetch = (...args) => Promise.resolve().then(() => (init_browser(), browser_exports)).then(({ default: fetch3 }) => fetch3(...args));
    } else {
      _fetch = fetch;
    }
    return (...args) => _fetch(...args);
  };
  var looksLikeFetchResponse = (maybeResponse) => {
    return typeof maybeResponse === "object" && maybeResponse !== null && "status" in maybeResponse && "ok" in maybeResponse && "json" in maybeResponse && typeof maybeResponse.json === "function";
  };
  var setItemAsync = async (storage, key, data) => {
    await storage.setItem(key, JSON.stringify(data));
  };
  var getItemAsync = async (storage, key) => {
    const value = await storage.getItem(key);
    if (!value) {
      return null;
    }
    try {
      return JSON.parse(value);
    } catch (_a) {
      return value;
    }
  };
  var removeItemAsync = async (storage, key) => {
    await storage.removeItem(key);
  };
  var Deferred = class _Deferred {
    constructor() {
      ;
      this.promise = new _Deferred.promiseConstructor((res, rej) => {
        ;
        this.resolve = res;
        this.reject = rej;
      });
    }
  };
  Deferred.promiseConstructor = Promise;
  function decodeJWT(token) {
    const parts = token.split(".");
    if (parts.length !== 3) {
      throw new AuthInvalidJwtError("Invalid JWT structure");
    }
    for (let i = 0; i < parts.length; i++) {
      if (!BASE64URL_REGEX.test(parts[i])) {
        throw new AuthInvalidJwtError("JWT not in base64url format");
      }
    }
    const data = {
      // using base64url lib
      header: JSON.parse(stringFromBase64URL(parts[0])),
      payload: JSON.parse(stringFromBase64URL(parts[1])),
      signature: base64UrlToUint8Array(parts[2]),
      raw: {
        header: parts[0],
        payload: parts[1]
      }
    };
    return data;
  }
  async function sleep(time) {
    return await new Promise((accept) => {
      setTimeout(() => accept(null), time);
    });
  }
  function retryable(fn, isRetryable) {
    const promise = new Promise((accept, reject) => {
      ;
      (async () => {
        for (let attempt = 0; attempt < Infinity; attempt++) {
          try {
            const result = await fn(attempt);
            if (!isRetryable(attempt, null, result)) {
              accept(result);
              return;
            }
          } catch (e) {
            if (!isRetryable(attempt, e)) {
              reject(e);
              return;
            }
          }
        }
      })();
    });
    return promise;
  }
  function dec2hex(dec) {
    return ("0" + dec.toString(16)).substr(-2);
  }
  function generatePKCEVerifier() {
    const verifierLength = 56;
    const array = new Uint32Array(verifierLength);
    if (typeof crypto === "undefined") {
      const charSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~";
      const charSetLen = charSet.length;
      let verifier = "";
      for (let i = 0; i < verifierLength; i++) {
        verifier += charSet.charAt(Math.floor(Math.random() * charSetLen));
      }
      return verifier;
    }
    crypto.getRandomValues(array);
    return Array.from(array, dec2hex).join("");
  }
  async function sha256(randomString) {
    const encoder = new TextEncoder();
    const encodedData = encoder.encode(randomString);
    const hash = await crypto.subtle.digest("SHA-256", encodedData);
    const bytes = new Uint8Array(hash);
    return Array.from(bytes).map((c) => String.fromCharCode(c)).join("");
  }
  async function generatePKCEChallenge(verifier) {
    const hasCryptoSupport = typeof crypto !== "undefined" && typeof crypto.subtle !== "undefined" && typeof TextEncoder !== "undefined";
    if (!hasCryptoSupport) {
      console.warn("WebCrypto API is not supported. Code challenge method will default to use plain instead of sha256.");
      return verifier;
    }
    const hashed = await sha256(verifier);
    return btoa(hashed).replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "");
  }
  async function getCodeChallengeAndMethod(storage, storageKey, isPasswordRecovery = false) {
    const codeVerifier = generatePKCEVerifier();
    let storedCodeVerifier = codeVerifier;
    if (isPasswordRecovery) {
      storedCodeVerifier += "/PASSWORD_RECOVERY";
    }
    await setItemAsync(storage, `${storageKey}-code-verifier`, storedCodeVerifier);
    const codeChallenge = await generatePKCEChallenge(codeVerifier);
    const codeChallengeMethod = codeVerifier === codeChallenge ? "plain" : "s256";
    return [codeChallenge, codeChallengeMethod];
  }
  var API_VERSION_REGEX = /^2[0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])$/i;
  function parseResponseAPIVersion(response) {
    const apiVersion = response.headers.get(API_VERSION_HEADER_NAME);
    if (!apiVersion) {
      return null;
    }
    if (!apiVersion.match(API_VERSION_REGEX)) {
      return null;
    }
    try {
      const date = /* @__PURE__ */ new Date(`${apiVersion}T00:00:00.0Z`);
      return date;
    } catch (e) {
      return null;
    }
  }
  function validateExp(exp) {
    if (!exp) {
      throw new Error("Missing exp claim");
    }
    const timeNow = Math.floor(Date.now() / 1e3);
    if (exp <= timeNow) {
      throw new Error("JWT has expired");
    }
  }
  function getAlgorithm(alg) {
    switch (alg) {
      case "RS256":
        return {
          name: "RSASSA-PKCS1-v1_5",
          hash: { name: "SHA-256" }
        };
      case "ES256":
        return {
          name: "ECDSA",
          namedCurve: "P-256",
          hash: { name: "SHA-256" }
        };
      default:
        throw new Error("Invalid alg claim");
    }
  }
  var UUID_REGEX = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;
  function validateUUID(str) {
    if (!UUID_REGEX.test(str)) {
      throw new Error("@supabase/auth-js: Expected parameter to be UUID but is not");
    }
  }
  function userNotAvailableProxy() {
    const proxyTarget = {};
    return new Proxy(proxyTarget, {
      get: (target, prop) => {
        if (prop === "__isUserNotAvailableProxy") {
          return true;
        }
        if (typeof prop === "symbol") {
          const sProp = prop.toString();
          if (sProp === "Symbol(Symbol.toPrimitive)" || sProp === "Symbol(Symbol.toStringTag)" || sProp === "Symbol(util.inspect.custom)") {
            return void 0;
          }
        }
        throw new Error(`@supabase/auth-js: client was created with userStorage option and there was no user stored in the user storage. Accessing the "${prop}" property of the session object is not supported. Please use getUser() instead.`);
      },
      set: (_target, prop) => {
        throw new Error(`@supabase/auth-js: client was created with userStorage option and there was no user stored in the user storage. Setting the "${prop}" property of the session object is not supported. Please use getUser() to fetch a user object you can manipulate.`);
      },
      deleteProperty: (_target, prop) => {
        throw new Error(`@supabase/auth-js: client was created with userStorage option and there was no user stored in the user storage. Deleting the "${prop}" property of the session object is not supported. Please use getUser() to fetch a user object you can manipulate.`);
      }
    });
  }
  function deepClone(obj) {
    return JSON.parse(JSON.stringify(obj));
  }

  // node_modules/@supabase/auth-js/dist/module/lib/fetch.js
  var __rest = function(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  };
  var _getErrorMessage2 = (err) => err.msg || err.message || err.error_description || err.error || JSON.stringify(err);
  var NETWORK_ERROR_CODES = [502, 503, 504];
  async function handleError2(error) {
    var _a;
    if (!looksLikeFetchResponse(error)) {
      throw new AuthRetryableFetchError(_getErrorMessage2(error), 0);
    }
    if (NETWORK_ERROR_CODES.includes(error.status)) {
      throw new AuthRetryableFetchError(_getErrorMessage2(error), error.status);
    }
    let data;
    try {
      data = await error.json();
    } catch (e) {
      throw new AuthUnknownError(_getErrorMessage2(e), e);
    }
    let errorCode = void 0;
    const responseAPIVersion = parseResponseAPIVersion(error);
    if (responseAPIVersion && responseAPIVersion.getTime() >= API_VERSIONS["2024-01-01"].timestamp && typeof data === "object" && data && typeof data.code === "string") {
      errorCode = data.code;
    } else if (typeof data === "object" && data && typeof data.error_code === "string") {
      errorCode = data.error_code;
    }
    if (!errorCode) {
      if (typeof data === "object" && data && typeof data.weak_password === "object" && data.weak_password && Array.isArray(data.weak_password.reasons) && data.weak_password.reasons.length && data.weak_password.reasons.reduce((a, i) => a && typeof i === "string", true)) {
        throw new AuthWeakPasswordError(_getErrorMessage2(data), error.status, data.weak_password.reasons);
      }
    } else if (errorCode === "weak_password") {
      throw new AuthWeakPasswordError(_getErrorMessage2(data), error.status, ((_a = data.weak_password) === null || _a === void 0 ? void 0 : _a.reasons) || []);
    } else if (errorCode === "session_not_found") {
      throw new AuthSessionMissingError();
    }
    throw new AuthApiError(_getErrorMessage2(data), error.status || 500, errorCode);
  }
  var _getRequestParams2 = (method, options, parameters, body) => {
    const params = { method, headers: (options === null || options === void 0 ? void 0 : options.headers) || {} };
    if (method === "GET") {
      return params;
    }
    params.headers = Object.assign({ "Content-Type": "application/json;charset=UTF-8" }, options === null || options === void 0 ? void 0 : options.headers);
    params.body = JSON.stringify(body);
    return Object.assign(Object.assign({}, params), parameters);
  };
  async function _request(fetcher, method, url, options) {
    var _a;
    const headers = Object.assign({}, options === null || options === void 0 ? void 0 : options.headers);
    if (!headers[API_VERSION_HEADER_NAME]) {
      headers[API_VERSION_HEADER_NAME] = API_VERSIONS["2024-01-01"].name;
    }
    if (options === null || options === void 0 ? void 0 : options.jwt) {
      headers["Authorization"] = `Bearer ${options.jwt}`;
    }
    const qs = (_a = options === null || options === void 0 ? void 0 : options.query) !== null && _a !== void 0 ? _a : {};
    if (options === null || options === void 0 ? void 0 : options.redirectTo) {
      qs["redirect_to"] = options.redirectTo;
    }
    const queryString = Object.keys(qs).length ? "?" + new URLSearchParams(qs).toString() : "";
    const data = await _handleRequest2(fetcher, method, url + queryString, {
      headers,
      noResolveJson: options === null || options === void 0 ? void 0 : options.noResolveJson
    }, {}, options === null || options === void 0 ? void 0 : options.body);
    return (options === null || options === void 0 ? void 0 : options.xform) ? options === null || options === void 0 ? void 0 : options.xform(data) : { data: Object.assign({}, data), error: null };
  }
  async function _handleRequest2(fetcher, method, url, options, parameters, body) {
    const requestParams = _getRequestParams2(method, options, parameters, body);
    let result;
    try {
      result = await fetcher(url, Object.assign({}, requestParams));
    } catch (e) {
      console.error(e);
      throw new AuthRetryableFetchError(_getErrorMessage2(e), 0);
    }
    if (!result.ok) {
      await handleError2(result);
    }
    if (options === null || options === void 0 ? void 0 : options.noResolveJson) {
      return result;
    }
    try {
      return await result.json();
    } catch (e) {
      await handleError2(e);
    }
  }
  function _sessionResponse(data) {
    var _a;
    let session = null;
    if (hasSession(data)) {
      session = Object.assign({}, data);
      if (!data.expires_at) {
        session.expires_at = expiresAt(data.expires_in);
      }
    }
    const user = (_a = data.user) !== null && _a !== void 0 ? _a : data;
    return { data: { session, user }, error: null };
  }
  function _sessionResponsePassword(data) {
    const response = _sessionResponse(data);
    if (!response.error && data.weak_password && typeof data.weak_password === "object" && Array.isArray(data.weak_password.reasons) && data.weak_password.reasons.length && data.weak_password.message && typeof data.weak_password.message === "string" && data.weak_password.reasons.reduce((a, i) => a && typeof i === "string", true)) {
      response.data.weak_password = data.weak_password;
    }
    return response;
  }
  function _userResponse(data) {
    var _a;
    const user = (_a = data.user) !== null && _a !== void 0 ? _a : data;
    return { data: { user }, error: null };
  }
  function _ssoResponse(data) {
    return { data, error: null };
  }
  function _generateLinkResponse(data) {
    const { action_link, email_otp, hashed_token, redirect_to, verification_type } = data, rest = __rest(data, ["action_link", "email_otp", "hashed_token", "redirect_to", "verification_type"]);
    const properties = {
      action_link,
      email_otp,
      hashed_token,
      redirect_to,
      verification_type
    };
    const user = Object.assign({}, rest);
    return {
      data: {
        properties,
        user
      },
      error: null
    };
  }
  function _noResolveJsonResponse(data) {
    return data;
  }
  function hasSession(data) {
    return data.access_token && data.refresh_token && data.expires_in;
  }

  // node_modules/@supabase/auth-js/dist/module/lib/types.js
  var SIGN_OUT_SCOPES = ["global", "local", "others"];

  // node_modules/@supabase/auth-js/dist/module/GoTrueAdminApi.js
  var __rest2 = function(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  };
  var GoTrueAdminApi = class {
    constructor({ url = "", headers = {}, fetch: fetch3 }) {
      this.url = url;
      this.headers = headers;
      this.fetch = resolveFetch4(fetch3);
      this.mfa = {
        listFactors: this._listFactors.bind(this),
        deleteFactor: this._deleteFactor.bind(this)
      };
      this.oauth = {
        listClients: this._listOAuthClients.bind(this),
        createClient: this._createOAuthClient.bind(this),
        getClient: this._getOAuthClient.bind(this),
        deleteClient: this._deleteOAuthClient.bind(this),
        regenerateClientSecret: this._regenerateOAuthClientSecret.bind(this)
      };
    }
    /**
     * Removes a logged-in session.
     * @param jwt A valid, logged-in JWT.
     * @param scope The logout sope.
     */
    async signOut(jwt, scope = SIGN_OUT_SCOPES[0]) {
      if (SIGN_OUT_SCOPES.indexOf(scope) < 0) {
        throw new Error(`@supabase/auth-js: Parameter scope must be one of ${SIGN_OUT_SCOPES.join(", ")}`);
      }
      try {
        await _request(this.fetch, "POST", `${this.url}/logout?scope=${scope}`, {
          headers: this.headers,
          jwt,
          noResolveJson: true
        });
        return { data: null, error: null };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    }
    /**
     * Sends an invite link to an email address.
     * @param email The email address of the user.
     * @param options Additional options to be included when inviting.
     */
    async inviteUserByEmail(email, options = {}) {
      try {
        return await _request(this.fetch, "POST", `${this.url}/invite`, {
          body: { email, data: options.data },
          headers: this.headers,
          redirectTo: options.redirectTo,
          xform: _userResponse
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null }, error };
        }
        throw error;
      }
    }
    /**
     * Generates email links and OTPs to be sent via a custom email provider.
     * @param email The user's email.
     * @param options.password User password. For signup only.
     * @param options.data Optional user metadata. For signup only.
     * @param options.redirectTo The redirect url which should be appended to the generated link
     */
    async generateLink(params) {
      try {
        const { options } = params, rest = __rest2(params, ["options"]);
        const body = Object.assign(Object.assign({}, rest), options);
        if ("newEmail" in rest) {
          body.new_email = rest === null || rest === void 0 ? void 0 : rest.newEmail;
          delete body["newEmail"];
        }
        return await _request(this.fetch, "POST", `${this.url}/admin/generate_link`, {
          body,
          headers: this.headers,
          xform: _generateLinkResponse,
          redirectTo: options === null || options === void 0 ? void 0 : options.redirectTo
        });
      } catch (error) {
        if (isAuthError(error)) {
          return {
            data: {
              properties: null,
              user: null
            },
            error
          };
        }
        throw error;
      }
    }
    // User Admin API
    /**
     * Creates a new user.
     * This function should only be called on a server. Never expose your `service_role` key in the browser.
     */
    async createUser(attributes) {
      try {
        return await _request(this.fetch, "POST", `${this.url}/admin/users`, {
          body: attributes,
          headers: this.headers,
          xform: _userResponse
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null }, error };
        }
        throw error;
      }
    }
    /**
     * Get a list of users.
     *
     * This function should only be called on a server. Never expose your `service_role` key in the browser.
     * @param params An object which supports `page` and `perPage` as numbers, to alter the paginated results.
     */
    async listUsers(params) {
      var _a, _b, _c, _d, _e, _f, _g;
      try {
        const pagination = { nextPage: null, lastPage: 0, total: 0 };
        const response = await _request(this.fetch, "GET", `${this.url}/admin/users`, {
          headers: this.headers,
          noResolveJson: true,
          query: {
            page: (_b = (_a = params === null || params === void 0 ? void 0 : params.page) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : "",
            per_page: (_d = (_c = params === null || params === void 0 ? void 0 : params.perPage) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : ""
          },
          xform: _noResolveJsonResponse
        });
        if (response.error)
          throw response.error;
        const users = await response.json();
        const total = (_e = response.headers.get("x-total-count")) !== null && _e !== void 0 ? _e : 0;
        const links = (_g = (_f = response.headers.get("link")) === null || _f === void 0 ? void 0 : _f.split(",")) !== null && _g !== void 0 ? _g : [];
        if (links.length > 0) {
          links.forEach((link) => {
            const page = parseInt(link.split(";")[0].split("=")[1].substring(0, 1));
            const rel = JSON.parse(link.split(";")[1].split("=")[1]);
            pagination[`${rel}Page`] = page;
          });
          pagination.total = parseInt(total);
        }
        return { data: Object.assign(Object.assign({}, users), pagination), error: null };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { users: [] }, error };
        }
        throw error;
      }
    }
    /**
     * Get user by id.
     *
     * @param uid The user's unique identifier
     *
     * This function should only be called on a server. Never expose your `service_role` key in the browser.
     */
    async getUserById(uid) {
      validateUUID(uid);
      try {
        return await _request(this.fetch, "GET", `${this.url}/admin/users/${uid}`, {
          headers: this.headers,
          xform: _userResponse
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null }, error };
        }
        throw error;
      }
    }
    /**
     * Updates the user data.
     *
     * @param attributes The data you want to update.
     *
     * This function should only be called on a server. Never expose your `service_role` key in the browser.
     */
    async updateUserById(uid, attributes) {
      validateUUID(uid);
      try {
        return await _request(this.fetch, "PUT", `${this.url}/admin/users/${uid}`, {
          body: attributes,
          headers: this.headers,
          xform: _userResponse
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null }, error };
        }
        throw error;
      }
    }
    /**
     * Delete a user. Requires a `service_role` key.
     *
     * @param id The user id you want to remove.
     * @param shouldSoftDelete If true, then the user will be soft-deleted from the auth schema. Soft deletion allows user identification from the hashed user ID but is not reversible.
     * Defaults to false for backward compatibility.
     *
     * This function should only be called on a server. Never expose your `service_role` key in the browser.
     */
    async deleteUser(id, shouldSoftDelete = false) {
      validateUUID(id);
      try {
        return await _request(this.fetch, "DELETE", `${this.url}/admin/users/${id}`, {
          headers: this.headers,
          body: {
            should_soft_delete: shouldSoftDelete
          },
          xform: _userResponse
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null }, error };
        }
        throw error;
      }
    }
    async _listFactors(params) {
      validateUUID(params.userId);
      try {
        const { data, error } = await _request(this.fetch, "GET", `${this.url}/admin/users/${params.userId}/factors`, {
          headers: this.headers,
          xform: (factors) => {
            return { data: { factors }, error: null };
          }
        });
        return { data, error };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    }
    async _deleteFactor(params) {
      validateUUID(params.userId);
      validateUUID(params.id);
      try {
        const data = await _request(this.fetch, "DELETE", `${this.url}/admin/users/${params.userId}/factors/${params.id}`, {
          headers: this.headers
        });
        return { data, error: null };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    }
    /**
     * Lists all OAuth clients with optional pagination.
     * Only relevant when the OAuth 2.1 server is enabled in Supabase Auth.
     *
     * This function should only be called on a server. Never expose your `service_role` key in the browser.
     */
    async _listOAuthClients(params) {
      var _a, _b, _c, _d, _e, _f, _g;
      try {
        const pagination = { nextPage: null, lastPage: 0, total: 0 };
        const response = await _request(this.fetch, "GET", `${this.url}/admin/oauth/clients`, {
          headers: this.headers,
          noResolveJson: true,
          query: {
            page: (_b = (_a = params === null || params === void 0 ? void 0 : params.page) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : "",
            per_page: (_d = (_c = params === null || params === void 0 ? void 0 : params.perPage) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : ""
          },
          xform: _noResolveJsonResponse
        });
        if (response.error)
          throw response.error;
        const clients = await response.json();
        const total = (_e = response.headers.get("x-total-count")) !== null && _e !== void 0 ? _e : 0;
        const links = (_g = (_f = response.headers.get("link")) === null || _f === void 0 ? void 0 : _f.split(",")) !== null && _g !== void 0 ? _g : [];
        if (links.length > 0) {
          links.forEach((link) => {
            const page = parseInt(link.split(";")[0].split("=")[1].substring(0, 1));
            const rel = JSON.parse(link.split(";")[1].split("=")[1]);
            pagination[`${rel}Page`] = page;
          });
          pagination.total = parseInt(total);
        }
        return { data: Object.assign(Object.assign({}, clients), pagination), error: null };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { clients: [] }, error };
        }
        throw error;
      }
    }
    /**
     * Creates a new OAuth client.
     * Only relevant when the OAuth 2.1 server is enabled in Supabase Auth.
     *
     * This function should only be called on a server. Never expose your `service_role` key in the browser.
     */
    async _createOAuthClient(params) {
      try {
        return await _request(this.fetch, "POST", `${this.url}/admin/oauth/clients`, {
          body: params,
          headers: this.headers,
          xform: (client) => {
            return { data: client, error: null };
          }
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    }
    /**
     * Gets details of a specific OAuth client.
     * Only relevant when the OAuth 2.1 server is enabled in Supabase Auth.
     *
     * This function should only be called on a server. Never expose your `service_role` key in the browser.
     */
    async _getOAuthClient(clientId) {
      try {
        return await _request(this.fetch, "GET", `${this.url}/admin/oauth/clients/${clientId}`, {
          headers: this.headers,
          xform: (client) => {
            return { data: client, error: null };
          }
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    }
    /**
     * Deletes an OAuth client.
     * Only relevant when the OAuth 2.1 server is enabled in Supabase Auth.
     *
     * This function should only be called on a server. Never expose your `service_role` key in the browser.
     */
    async _deleteOAuthClient(clientId) {
      try {
        return await _request(this.fetch, "DELETE", `${this.url}/admin/oauth/clients/${clientId}`, {
          headers: this.headers,
          xform: (client) => {
            return { data: client, error: null };
          }
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    }
    /**
     * Regenerates the secret for an OAuth client.
     * Only relevant when the OAuth 2.1 server is enabled in Supabase Auth.
     *
     * This function should only be called on a server. Never expose your `service_role` key in the browser.
     */
    async _regenerateOAuthClientSecret(clientId) {
      try {
        return await _request(this.fetch, "POST", `${this.url}/admin/oauth/clients/${clientId}/regenerate_secret`, {
          headers: this.headers,
          xform: (client) => {
            return { data: client, error: null };
          }
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    }
  };

  // node_modules/@supabase/auth-js/dist/module/lib/local-storage.js
  function memoryLocalStorageAdapter(store = {}) {
    return {
      getItem: (key) => {
        return store[key] || null;
      },
      setItem: (key, value) => {
        store[key] = value;
      },
      removeItem: (key) => {
        delete store[key];
      }
    };
  }

  // node_modules/@supabase/auth-js/dist/module/lib/locks.js
  var internals = {
    /**
     * @experimental
     */
    debug: !!(globalThis && supportsLocalStorage() && globalThis.localStorage && globalThis.localStorage.getItem("supabase.gotrue-js.locks.debug") === "true")
  };
  var LockAcquireTimeoutError = class extends Error {
    constructor(message) {
      super(message);
      this.isAcquireTimeout = true;
    }
  };
  var NavigatorLockAcquireTimeoutError = class extends LockAcquireTimeoutError {
  };
  async function navigatorLock(name, acquireTimeout, fn) {
    if (internals.debug) {
      console.log("@supabase/gotrue-js: navigatorLock: acquire lock", name, acquireTimeout);
    }
    const abortController = new globalThis.AbortController();
    if (acquireTimeout > 0) {
      setTimeout(() => {
        abortController.abort();
        if (internals.debug) {
          console.log("@supabase/gotrue-js: navigatorLock acquire timed out", name);
        }
      }, acquireTimeout);
    }
    return await Promise.resolve().then(() => globalThis.navigator.locks.request(name, acquireTimeout === 0 ? {
      mode: "exclusive",
      ifAvailable: true
    } : {
      mode: "exclusive",
      signal: abortController.signal
    }, async (lock) => {
      if (lock) {
        if (internals.debug) {
          console.log("@supabase/gotrue-js: navigatorLock: acquired", name, lock.name);
        }
        try {
          return await fn();
        } finally {
          if (internals.debug) {
            console.log("@supabase/gotrue-js: navigatorLock: released", name, lock.name);
          }
        }
      } else {
        if (acquireTimeout === 0) {
          if (internals.debug) {
            console.log("@supabase/gotrue-js: navigatorLock: not immediately available", name);
          }
          throw new NavigatorLockAcquireTimeoutError(`Acquiring an exclusive Navigator LockManager lock "${name}" immediately failed`);
        } else {
          if (internals.debug) {
            try {
              const result = await globalThis.navigator.locks.query();
              console.log("@supabase/gotrue-js: Navigator LockManager state", JSON.stringify(result, null, "  "));
            } catch (e) {
              console.warn("@supabase/gotrue-js: Error when querying Navigator LockManager state", e);
            }
          }
          console.warn("@supabase/gotrue-js: Navigator LockManager returned a null lock when using #request without ifAvailable set to true, it appears this browser is not following the LockManager spec https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request");
          return await fn();
        }
      }
    }));
  }

  // node_modules/@supabase/auth-js/dist/module/lib/polyfills.js
  function polyfillGlobalThis() {
    if (typeof globalThis === "object")
      return;
    try {
      Object.defineProperty(Object.prototype, "__magic__", {
        get: function() {
          return this;
        },
        configurable: true
      });
      __magic__.globalThis = __magic__;
      delete Object.prototype.__magic__;
    } catch (e) {
      if (typeof self !== "undefined") {
        self.globalThis = self;
      }
    }
  }

  // node_modules/@supabase/auth-js/dist/module/lib/web3/ethereum.js
  function getAddress(address) {
    if (!/^0x[a-fA-F0-9]{40}$/.test(address)) {
      throw new Error(`@supabase/auth-js: Address "${address}" is invalid.`);
    }
    return address.toLowerCase();
  }
  function fromHex(hex) {
    return parseInt(hex, 16);
  }
  function toHex(value) {
    const bytes = new TextEncoder().encode(value);
    const hex = Array.from(bytes, (byte) => byte.toString(16).padStart(2, "0")).join("");
    return "0x" + hex;
  }
  function createSiweMessage(parameters) {
    var _a;
    const { chainId, domain, expirationTime, issuedAt = /* @__PURE__ */ new Date(), nonce, notBefore, requestId, resources, scheme, uri, version: version5 } = parameters;
    {
      if (!Number.isInteger(chainId))
        throw new Error(`@supabase/auth-js: Invalid SIWE message field "chainId". Chain ID must be a EIP-155 chain ID. Provided value: ${chainId}`);
      if (!domain)
        throw new Error(`@supabase/auth-js: Invalid SIWE message field "domain". Domain must be provided.`);
      if (nonce && nonce.length < 8)
        throw new Error(`@supabase/auth-js: Invalid SIWE message field "nonce". Nonce must be at least 8 characters. Provided value: ${nonce}`);
      if (!uri)
        throw new Error(`@supabase/auth-js: Invalid SIWE message field "uri". URI must be provided.`);
      if (version5 !== "1")
        throw new Error(`@supabase/auth-js: Invalid SIWE message field "version". Version must be '1'. Provided value: ${version5}`);
      if ((_a = parameters.statement) === null || _a === void 0 ? void 0 : _a.includes("\n"))
        throw new Error(`@supabase/auth-js: Invalid SIWE message field "statement". Statement must not include '\\n'. Provided value: ${parameters.statement}`);
    }
    const address = getAddress(parameters.address);
    const origin = scheme ? `${scheme}://${domain}` : domain;
    const statement = parameters.statement ? `${parameters.statement}
` : "";
    const prefix = `${origin} wants you to sign in with your Ethereum account:
${address}

${statement}`;
    let suffix = `URI: ${uri}
Version: ${version5}
Chain ID: ${chainId}${nonce ? `
Nonce: ${nonce}` : ""}
Issued At: ${issuedAt.toISOString()}`;
    if (expirationTime)
      suffix += `
Expiration Time: ${expirationTime.toISOString()}`;
    if (notBefore)
      suffix += `
Not Before: ${notBefore.toISOString()}`;
    if (requestId)
      suffix += `
Request ID: ${requestId}`;
    if (resources) {
      let content = "\nResources:";
      for (const resource of resources) {
        if (!resource || typeof resource !== "string")
          throw new Error(`@supabase/auth-js: Invalid SIWE message field "resources". Every resource must be a valid string. Provided value: ${resource}`);
        content += `
- ${resource}`;
      }
      suffix += content;
    }
    return `${prefix}
${suffix}`;
  }

  // node_modules/@supabase/auth-js/dist/module/lib/webauthn.errors.js
  var WebAuthnError = class extends Error {
    constructor({ message, code, cause, name }) {
      var _a;
      super(message, { cause });
      this.__isWebAuthnError = true;
      this.name = (_a = name !== null && name !== void 0 ? name : cause instanceof Error ? cause.name : void 0) !== null && _a !== void 0 ? _a : "Unknown Error";
      this.code = code;
    }
  };
  var WebAuthnUnknownError = class extends WebAuthnError {
    constructor(message, originalError) {
      super({
        code: "ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY",
        cause: originalError,
        message
      });
      this.name = "WebAuthnUnknownError";
      this.originalError = originalError;
    }
  };
  function identifyRegistrationError({ error, options }) {
    var _a, _b, _c;
    const { publicKey } = options;
    if (!publicKey) {
      throw Error("options was missing required publicKey property");
    }
    if (error.name === "AbortError") {
      if (options.signal instanceof AbortSignal) {
        return new WebAuthnError({
          message: "Registration ceremony was sent an abort signal",
          code: "ERROR_CEREMONY_ABORTED",
          cause: error
        });
      }
    } else if (error.name === "ConstraintError") {
      if (((_a = publicKey.authenticatorSelection) === null || _a === void 0 ? void 0 : _a.requireResidentKey) === true) {
        return new WebAuthnError({
          message: "Discoverable credentials were required but no available authenticator supported it",
          code: "ERROR_AUTHENTICATOR_MISSING_DISCOVERABLE_CREDENTIAL_SUPPORT",
          cause: error
        });
      } else if (
        // @ts-ignore: `mediation` doesn't yet exist on CredentialCreationOptions but it's possible as of Sept 2024
        options.mediation === "conditional" && ((_b = publicKey.authenticatorSelection) === null || _b === void 0 ? void 0 : _b.userVerification) === "required"
      ) {
        return new WebAuthnError({
          message: "User verification was required during automatic registration but it could not be performed",
          code: "ERROR_AUTO_REGISTER_USER_VERIFICATION_FAILURE",
          cause: error
        });
      } else if (((_c = publicKey.authenticatorSelection) === null || _c === void 0 ? void 0 : _c.userVerification) === "required") {
        return new WebAuthnError({
          message: "User verification was required but no available authenticator supported it",
          code: "ERROR_AUTHENTICATOR_MISSING_USER_VERIFICATION_SUPPORT",
          cause: error
        });
      }
    } else if (error.name === "InvalidStateError") {
      return new WebAuthnError({
        message: "The authenticator was previously registered",
        code: "ERROR_AUTHENTICATOR_PREVIOUSLY_REGISTERED",
        cause: error
      });
    } else if (error.name === "NotAllowedError") {
      return new WebAuthnError({
        message: error.message,
        code: "ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY",
        cause: error
      });
    } else if (error.name === "NotSupportedError") {
      const validPubKeyCredParams = publicKey.pubKeyCredParams.filter((param) => param.type === "public-key");
      if (validPubKeyCredParams.length === 0) {
        return new WebAuthnError({
          message: 'No entry in pubKeyCredParams was of type "public-key"',
          code: "ERROR_MALFORMED_PUBKEYCREDPARAMS",
          cause: error
        });
      }
      return new WebAuthnError({
        message: "No available authenticator supported any of the specified pubKeyCredParams algorithms",
        code: "ERROR_AUTHENTICATOR_NO_SUPPORTED_PUBKEYCREDPARAMS_ALG",
        cause: error
      });
    } else if (error.name === "SecurityError") {
      const effectiveDomain = window.location.hostname;
      if (!isValidDomain(effectiveDomain)) {
        return new WebAuthnError({
          message: `${window.location.hostname} is an invalid domain`,
          code: "ERROR_INVALID_DOMAIN",
          cause: error
        });
      } else if (publicKey.rp.id !== effectiveDomain) {
        return new WebAuthnError({
          message: `The RP ID "${publicKey.rp.id}" is invalid for this domain`,
          code: "ERROR_INVALID_RP_ID",
          cause: error
        });
      }
    } else if (error.name === "TypeError") {
      if (publicKey.user.id.byteLength < 1 || publicKey.user.id.byteLength > 64) {
        return new WebAuthnError({
          message: "User ID was not between 1 and 64 characters",
          code: "ERROR_INVALID_USER_ID_LENGTH",
          cause: error
        });
      }
    } else if (error.name === "UnknownError") {
      return new WebAuthnError({
        message: "The authenticator was unable to process the specified options, or could not create a new credential",
        code: "ERROR_AUTHENTICATOR_GENERAL_ERROR",
        cause: error
      });
    }
    return new WebAuthnError({
      message: "a Non-Webauthn related error has occurred",
      code: "ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY",
      cause: error
    });
  }
  function identifyAuthenticationError({ error, options }) {
    const { publicKey } = options;
    if (!publicKey) {
      throw Error("options was missing required publicKey property");
    }
    if (error.name === "AbortError") {
      if (options.signal instanceof AbortSignal) {
        return new WebAuthnError({
          message: "Authentication ceremony was sent an abort signal",
          code: "ERROR_CEREMONY_ABORTED",
          cause: error
        });
      }
    } else if (error.name === "NotAllowedError") {
      return new WebAuthnError({
        message: error.message,
        code: "ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY",
        cause: error
      });
    } else if (error.name === "SecurityError") {
      const effectiveDomain = window.location.hostname;
      if (!isValidDomain(effectiveDomain)) {
        return new WebAuthnError({
          message: `${window.location.hostname} is an invalid domain`,
          code: "ERROR_INVALID_DOMAIN",
          cause: error
        });
      } else if (publicKey.rpId !== effectiveDomain) {
        return new WebAuthnError({
          message: `The RP ID "${publicKey.rpId}" is invalid for this domain`,
          code: "ERROR_INVALID_RP_ID",
          cause: error
        });
      }
    } else if (error.name === "UnknownError") {
      return new WebAuthnError({
        message: "The authenticator was unable to process the specified options, or could not create a new assertion signature",
        code: "ERROR_AUTHENTICATOR_GENERAL_ERROR",
        cause: error
      });
    }
    return new WebAuthnError({
      message: "a Non-Webauthn related error has occurred",
      code: "ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY",
      cause: error
    });
  }

  // node_modules/@supabase/auth-js/dist/module/lib/webauthn.js
  var __rest3 = function(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  };
  var WebAuthnAbortService = class {
    /**
     * Create an abort signal for a new WebAuthn operation.
     * Automatically cancels any existing operation.
     *
     * @returns {AbortSignal} Signal to pass to navigator.credentials.create() or .get()
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal MDN - AbortSignal}
     */
    createNewAbortSignal() {
      if (this.controller) {
        const abortError = new Error("Cancelling existing WebAuthn API call for new one");
        abortError.name = "AbortError";
        this.controller.abort(abortError);
      }
      const newController = new AbortController();
      this.controller = newController;
      return newController.signal;
    }
    /**
     * Manually cancel the current WebAuthn operation.
     * Useful for cleaning up when user cancels or navigates away.
     *
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/AbortController/abort MDN - AbortController.abort}
     */
    cancelCeremony() {
      if (this.controller) {
        const abortError = new Error("Manually cancelling existing WebAuthn API call");
        abortError.name = "AbortError";
        this.controller.abort(abortError);
        this.controller = void 0;
      }
    }
  };
  var webAuthnAbortService = new WebAuthnAbortService();
  function deserializeCredentialCreationOptions(options) {
    if (!options) {
      throw new Error("Credential creation options are required");
    }
    if (typeof PublicKeyCredential !== "undefined" && "parseCreationOptionsFromJSON" in PublicKeyCredential && typeof PublicKeyCredential.parseCreationOptionsFromJSON === "function") {
      return PublicKeyCredential.parseCreationOptionsFromJSON(
        /** we assert the options here as typescript still doesn't know about future webauthn types */
        options
      );
    }
    const { challenge: challengeStr, user: userOpts, excludeCredentials } = options, restOptions = __rest3(
      options,
      ["challenge", "user", "excludeCredentials"]
    );
    const challenge = base64UrlToUint8Array(challengeStr).buffer;
    const user = Object.assign(Object.assign({}, userOpts), { id: base64UrlToUint8Array(userOpts.id).buffer });
    const result = Object.assign(Object.assign({}, restOptions), {
      challenge,
      user
    });
    if (excludeCredentials && excludeCredentials.length > 0) {
      result.excludeCredentials = new Array(excludeCredentials.length);
      for (let i = 0; i < excludeCredentials.length; i++) {
        const cred = excludeCredentials[i];
        result.excludeCredentials[i] = Object.assign(Object.assign({}, cred), {
          id: base64UrlToUint8Array(cred.id).buffer,
          type: cred.type || "public-key",
          // Cast transports to handle future transport types like "cable"
          transports: cred.transports
        });
      }
    }
    return result;
  }
  function deserializeCredentialRequestOptions(options) {
    if (!options) {
      throw new Error("Credential request options are required");
    }
    if (typeof PublicKeyCredential !== "undefined" && "parseRequestOptionsFromJSON" in PublicKeyCredential && typeof PublicKeyCredential.parseRequestOptionsFromJSON === "function") {
      return PublicKeyCredential.parseRequestOptionsFromJSON(options);
    }
    const { challenge: challengeStr, allowCredentials } = options, restOptions = __rest3(
      options,
      ["challenge", "allowCredentials"]
    );
    const challenge = base64UrlToUint8Array(challengeStr).buffer;
    const result = Object.assign(Object.assign({}, restOptions), { challenge });
    if (allowCredentials && allowCredentials.length > 0) {
      result.allowCredentials = new Array(allowCredentials.length);
      for (let i = 0; i < allowCredentials.length; i++) {
        const cred = allowCredentials[i];
        result.allowCredentials[i] = Object.assign(Object.assign({}, cred), {
          id: base64UrlToUint8Array(cred.id).buffer,
          type: cred.type || "public-key",
          // Cast transports to handle future transport types like "cable"
          transports: cred.transports
        });
      }
    }
    return result;
  }
  function serializeCredentialCreationResponse(credential) {
    var _a;
    if ("toJSON" in credential && typeof credential.toJSON === "function") {
      return credential.toJSON();
    }
    const credentialWithAttachment = credential;
    return {
      id: credential.id,
      rawId: credential.id,
      response: {
        attestationObject: bytesToBase64URL(new Uint8Array(credential.response.attestationObject)),
        clientDataJSON: bytesToBase64URL(new Uint8Array(credential.response.clientDataJSON))
      },
      type: "public-key",
      clientExtensionResults: credential.getClientExtensionResults(),
      // Convert null to undefined and cast to AuthenticatorAttachment type
      authenticatorAttachment: (_a = credentialWithAttachment.authenticatorAttachment) !== null && _a !== void 0 ? _a : void 0
    };
  }
  function serializeCredentialRequestResponse(credential) {
    var _a;
    if ("toJSON" in credential && typeof credential.toJSON === "function") {
      return credential.toJSON();
    }
    const credentialWithAttachment = credential;
    const clientExtensionResults = credential.getClientExtensionResults();
    const assertionResponse = credential.response;
    return {
      id: credential.id,
      rawId: credential.id,
      // W3C spec expects rawId to match id for JSON format
      response: {
        authenticatorData: bytesToBase64URL(new Uint8Array(assertionResponse.authenticatorData)),
        clientDataJSON: bytesToBase64URL(new Uint8Array(assertionResponse.clientDataJSON)),
        signature: bytesToBase64URL(new Uint8Array(assertionResponse.signature)),
        userHandle: assertionResponse.userHandle ? bytesToBase64URL(new Uint8Array(assertionResponse.userHandle)) : void 0
      },
      type: "public-key",
      clientExtensionResults,
      // Convert null to undefined and cast to AuthenticatorAttachment type
      authenticatorAttachment: (_a = credentialWithAttachment.authenticatorAttachment) !== null && _a !== void 0 ? _a : void 0
    };
  }
  function isValidDomain(hostname) {
    return (
      // Consider localhost valid as well since it's okay wrt Secure Contexts
      hostname === "localhost" || /^([a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,}$/i.test(hostname)
    );
  }
  function browserSupportsWebAuthn() {
    var _a, _b;
    return !!(isBrowser2() && "PublicKeyCredential" in window && window.PublicKeyCredential && "credentials" in navigator && typeof ((_a = navigator === null || navigator === void 0 ? void 0 : navigator.credentials) === null || _a === void 0 ? void 0 : _a.create) === "function" && typeof ((_b = navigator === null || navigator === void 0 ? void 0 : navigator.credentials) === null || _b === void 0 ? void 0 : _b.get) === "function");
  }
  async function createCredential(options) {
    try {
      const response = await navigator.credentials.create(
        /** we assert the type here until typescript types are updated */
        options
      );
      if (!response) {
        return {
          data: null,
          error: new WebAuthnUnknownError("Empty credential response", response)
        };
      }
      if (!(response instanceof PublicKeyCredential)) {
        return {
          data: null,
          error: new WebAuthnUnknownError("Browser returned unexpected credential type", response)
        };
      }
      return { data: response, error: null };
    } catch (err) {
      return {
        data: null,
        error: identifyRegistrationError({
          error: err,
          options
        })
      };
    }
  }
  async function getCredential(options) {
    try {
      const response = await navigator.credentials.get(
        /** we assert the type here until typescript types are updated */
        options
      );
      if (!response) {
        return {
          data: null,
          error: new WebAuthnUnknownError("Empty credential response", response)
        };
      }
      if (!(response instanceof PublicKeyCredential)) {
        return {
          data: null,
          error: new WebAuthnUnknownError("Browser returned unexpected credential type", response)
        };
      }
      return { data: response, error: null };
    } catch (err) {
      return {
        data: null,
        error: identifyAuthenticationError({
          error: err,
          options
        })
      };
    }
  }
  var DEFAULT_CREATION_OPTIONS = {
    hints: ["security-key"],
    authenticatorSelection: {
      authenticatorAttachment: "cross-platform",
      requireResidentKey: false,
      /** set to preferred because older yubikeys don't have PIN/Biometric */
      userVerification: "preferred",
      residentKey: "discouraged"
    },
    attestation: "none"
  };
  var DEFAULT_REQUEST_OPTIONS = {
    /** set to preferred because older yubikeys don't have PIN/Biometric */
    userVerification: "preferred",
    hints: ["security-key"]
  };
  function deepMerge(...sources) {
    const isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
    const isArrayBufferLike = (val) => val instanceof ArrayBuffer || ArrayBuffer.isView(val);
    const result = {};
    for (const source of sources) {
      if (!source)
        continue;
      for (const key in source) {
        const value = source[key];
        if (value === void 0)
          continue;
        if (Array.isArray(value)) {
          result[key] = value;
        } else if (isArrayBufferLike(value)) {
          result[key] = value;
        } else if (isObject(value)) {
          const existing = result[key];
          if (isObject(existing)) {
            result[key] = deepMerge(existing, value);
          } else {
            result[key] = deepMerge(value);
          }
        } else {
          result[key] = value;
        }
      }
    }
    return result;
  }
  function mergeCredentialCreationOptions(baseOptions, overrides) {
    return deepMerge(DEFAULT_CREATION_OPTIONS, baseOptions, overrides || {});
  }
  function mergeCredentialRequestOptions(baseOptions, overrides) {
    return deepMerge(DEFAULT_REQUEST_OPTIONS, baseOptions, overrides || {});
  }
  var WebAuthnApi = class {
    constructor(client) {
      this.client = client;
      this.enroll = this._enroll.bind(this);
      this.challenge = this._challenge.bind(this);
      this.verify = this._verify.bind(this);
      this.authenticate = this._authenticate.bind(this);
      this.register = this._register.bind(this);
    }
    /**
     * Enroll a new WebAuthn factor.
     * Creates an unverified WebAuthn factor that must be verified with a credential.
     *
     * @experimental This method is experimental and may change in future releases
     * @param {Omit<MFAEnrollWebauthnParams, 'factorType'>} params - Enrollment parameters (friendlyName required)
     * @returns {Promise<AuthMFAEnrollWebauthnResponse>} Enrolled factor details or error
     * @see {@link https://w3c.github.io/webauthn/#sctn-registering-a-new-credential W3C WebAuthn Spec - Registering a New Credential}
     */
    async _enroll(params) {
      return this.client.mfa.enroll(Object.assign(Object.assign({}, params), { factorType: "webauthn" }));
    }
    /**
     * Challenge for WebAuthn credential creation or authentication.
     * Combines server challenge with browser credential operations.
     * Handles both registration (create) and authentication (request) flows.
     *
     * @experimental This method is experimental and may change in future releases
     * @param {MFAChallengeWebauthnParams & { friendlyName?: string; signal?: AbortSignal }} params - Challenge parameters including factorId
     * @param {Object} overrides - Allows you to override the parameters passed to navigator.credentials
     * @param {PublicKeyCredentialCreationOptionsFuture} overrides.create - Override options for credential creation
     * @param {PublicKeyCredentialRequestOptionsFuture} overrides.request - Override options for credential request
     * @returns {Promise<RequestResult>} Challenge response with credential or error
     * @see {@link https://w3c.github.io/webauthn/#sctn-credential-creation W3C WebAuthn Spec - Credential Creation}
     * @see {@link https://w3c.github.io/webauthn/#sctn-verifying-assertion W3C WebAuthn Spec - Verifying Assertion}
     */
    async _challenge({ factorId, webauthn, friendlyName, signal }, overrides) {
      try {
        const { data: challengeResponse, error: challengeError } = await this.client.mfa.challenge({
          factorId,
          webauthn
        });
        if (!challengeResponse) {
          return { data: null, error: challengeError };
        }
        const abortSignal = signal !== null && signal !== void 0 ? signal : webAuthnAbortService.createNewAbortSignal();
        if (challengeResponse.webauthn.type === "create") {
          const { user } = challengeResponse.webauthn.credential_options.publicKey;
          if (!user.name) {
            user.name = `${user.id}:${friendlyName}`;
          }
          if (!user.displayName) {
            user.displayName = user.name;
          }
        }
        switch (challengeResponse.webauthn.type) {
          case "create": {
            const options = mergeCredentialCreationOptions(challengeResponse.webauthn.credential_options.publicKey, overrides === null || overrides === void 0 ? void 0 : overrides.create);
            const { data, error } = await createCredential({
              publicKey: options,
              signal: abortSignal
            });
            if (data) {
              return {
                data: {
                  factorId,
                  challengeId: challengeResponse.id,
                  webauthn: {
                    type: challengeResponse.webauthn.type,
                    credential_response: data
                  }
                },
                error: null
              };
            }
            return { data: null, error };
          }
          case "request": {
            const options = mergeCredentialRequestOptions(challengeResponse.webauthn.credential_options.publicKey, overrides === null || overrides === void 0 ? void 0 : overrides.request);
            const { data, error } = await getCredential(Object.assign(Object.assign({}, challengeResponse.webauthn.credential_options), { publicKey: options, signal: abortSignal }));
            if (data) {
              return {
                data: {
                  factorId,
                  challengeId: challengeResponse.id,
                  webauthn: {
                    type: challengeResponse.webauthn.type,
                    credential_response: data
                  }
                },
                error: null
              };
            }
            return { data: null, error };
          }
        }
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        return {
          data: null,
          error: new AuthUnknownError("Unexpected error in challenge", error)
        };
      }
    }
    /**
     * Verify a WebAuthn credential with the server.
     * Completes the WebAuthn ceremony by sending the credential to the server for verification.
     *
     * @experimental This method is experimental and may change in future releases
     * @param {Object} params - Verification parameters
     * @param {string} params.challengeId - ID of the challenge being verified
     * @param {string} params.factorId - ID of the WebAuthn factor
     * @param {MFAVerifyWebauthnParams<T>['webauthn']} params.webauthn - WebAuthn credential response
     * @returns {Promise<AuthMFAVerifyResponse>} Verification result with session or error
     * @see {@link https://w3c.github.io/webauthn/#sctn-verifying-assertion W3C WebAuthn Spec - Verifying an Authentication Assertion}
     * */
    async _verify({ challengeId, factorId, webauthn }) {
      return this.client.mfa.verify({
        factorId,
        challengeId,
        webauthn
      });
    }
    /**
     * Complete WebAuthn authentication flow.
     * Performs challenge and verification in a single operation for existing credentials.
     *
     * @experimental This method is experimental and may change in future releases
     * @param {Object} params - Authentication parameters
     * @param {string} params.factorId - ID of the WebAuthn factor to authenticate with
     * @param {Object} params.webauthn - WebAuthn configuration
     * @param {string} params.webauthn.rpId - Relying Party ID (defaults to current hostname)
     * @param {string[]} params.webauthn.rpOrigins - Allowed origins (defaults to current origin)
     * @param {AbortSignal} params.webauthn.signal - Optional abort signal
     * @param {PublicKeyCredentialRequestOptionsFuture} overrides - Override options for navigator.credentials.get
     * @returns {Promise<RequestResult<AuthMFAVerifyResponseData, WebAuthnError | AuthError>>} Authentication result
     * @see {@link https://w3c.github.io/webauthn/#sctn-authentication W3C WebAuthn Spec - Authentication Ceremony}
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialRequestOptions MDN - PublicKeyCredentialRequestOptions}
     */
    async _authenticate({ factorId, webauthn: { rpId = typeof window !== "undefined" ? window.location.hostname : void 0, rpOrigins = typeof window !== "undefined" ? [window.location.origin] : void 0, signal } }, overrides) {
      if (!rpId) {
        return {
          data: null,
          error: new AuthError("rpId is required for WebAuthn authentication")
        };
      }
      try {
        if (!browserSupportsWebAuthn()) {
          return {
            data: null,
            error: new AuthUnknownError("Browser does not support WebAuthn", null)
          };
        }
        const { data: challengeResponse, error: challengeError } = await this.challenge({
          factorId,
          webauthn: { rpId, rpOrigins },
          signal
        }, { request: overrides });
        if (!challengeResponse) {
          return { data: null, error: challengeError };
        }
        const { webauthn } = challengeResponse;
        return this._verify({
          factorId,
          challengeId: challengeResponse.challengeId,
          webauthn: {
            type: webauthn.type,
            rpId,
            rpOrigins,
            credential_response: webauthn.credential_response
          }
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        return {
          data: null,
          error: new AuthUnknownError("Unexpected error in authenticate", error)
        };
      }
    }
    /**
     * Complete WebAuthn registration flow.
     * Performs enrollment, challenge, and verification in a single operation for new credentials.
     *
     * @experimental This method is experimental and may change in future releases
     * @param {Object} params - Registration parameters
     * @param {string} params.friendlyName - User-friendly name for the credential
     * @param {string} params.rpId - Relying Party ID (defaults to current hostname)
     * @param {string[]} params.rpOrigins - Allowed origins (defaults to current origin)
     * @param {AbortSignal} params.signal - Optional abort signal
     * @param {PublicKeyCredentialCreationOptionsFuture} overrides - Override options for navigator.credentials.create
     * @returns {Promise<RequestResult<AuthMFAVerifyResponseData, WebAuthnError | AuthError>>} Registration result
     * @see {@link https://w3c.github.io/webauthn/#sctn-registering-a-new-credential W3C WebAuthn Spec - Registration Ceremony}
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions MDN - PublicKeyCredentialCreationOptions}
     */
    async _register({ friendlyName, rpId = typeof window !== "undefined" ? window.location.hostname : void 0, rpOrigins = typeof window !== "undefined" ? [window.location.origin] : void 0, signal }, overrides) {
      if (!rpId) {
        return {
          data: null,
          error: new AuthError("rpId is required for WebAuthn registration")
        };
      }
      try {
        if (!browserSupportsWebAuthn()) {
          return {
            data: null,
            error: new AuthUnknownError("Browser does not support WebAuthn", null)
          };
        }
        const { data: factor, error: enrollError } = await this._enroll({
          friendlyName
        });
        if (!factor) {
          await this.client.mfa.listFactors().then((factors) => {
            var _a;
            return (_a = factors.data) === null || _a === void 0 ? void 0 : _a.all.find((v) => v.factor_type === "webauthn" && v.friendly_name === friendlyName && v.status !== "unverified");
          }).then((factor2) => factor2 ? this.client.mfa.unenroll({ factorId: factor2 === null || factor2 === void 0 ? void 0 : factor2.id }) : void 0);
          return { data: null, error: enrollError };
        }
        const { data: challengeResponse, error: challengeError } = await this._challenge({
          factorId: factor.id,
          friendlyName: factor.friendly_name,
          webauthn: { rpId, rpOrigins },
          signal
        }, {
          create: overrides
        });
        if (!challengeResponse) {
          return { data: null, error: challengeError };
        }
        return this._verify({
          factorId: factor.id,
          challengeId: challengeResponse.challengeId,
          webauthn: {
            rpId,
            rpOrigins,
            type: challengeResponse.webauthn.type,
            credential_response: challengeResponse.webauthn.credential_response
          }
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        return {
          data: null,
          error: new AuthUnknownError("Unexpected error in register", error)
        };
      }
    }
  };

  // node_modules/@supabase/auth-js/dist/module/GoTrueClient.js
  polyfillGlobalThis();
  var DEFAULT_OPTIONS = {
    url: GOTRUE_URL,
    storageKey: STORAGE_KEY,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    headers: DEFAULT_HEADERS3,
    flowType: "implicit",
    debug: false,
    hasCustomAuthorizationHeader: false
  };
  async function lockNoOp(name, acquireTimeout, fn) {
    return await fn();
  }
  var GLOBAL_JWKS = {};
  var GoTrueClient = class _GoTrueClient {
    /**
     * The JWKS used for verifying asymmetric JWTs
     */
    get jwks() {
      var _a, _b;
      return (_b = (_a = GLOBAL_JWKS[this.storageKey]) === null || _a === void 0 ? void 0 : _a.jwks) !== null && _b !== void 0 ? _b : { keys: [] };
    }
    set jwks(value) {
      GLOBAL_JWKS[this.storageKey] = Object.assign(Object.assign({}, GLOBAL_JWKS[this.storageKey]), { jwks: value });
    }
    get jwks_cached_at() {
      var _a, _b;
      return (_b = (_a = GLOBAL_JWKS[this.storageKey]) === null || _a === void 0 ? void 0 : _a.cachedAt) !== null && _b !== void 0 ? _b : Number.MIN_SAFE_INTEGER;
    }
    set jwks_cached_at(value) {
      GLOBAL_JWKS[this.storageKey] = Object.assign(Object.assign({}, GLOBAL_JWKS[this.storageKey]), { cachedAt: value });
    }
    /**
     * Create a new client for use in the browser.
     */
    constructor(options) {
      var _a, _b;
      this.userStorage = null;
      this.memoryStorage = null;
      this.stateChangeEmitters = /* @__PURE__ */ new Map();
      this.autoRefreshTicker = null;
      this.visibilityChangedCallback = null;
      this.refreshingDeferred = null;
      this.initializePromise = null;
      this.detectSessionInUrl = true;
      this.hasCustomAuthorizationHeader = false;
      this.suppressGetSessionWarning = false;
      this.lockAcquired = false;
      this.pendingInLock = [];
      this.broadcastChannel = null;
      this.logger = console.log;
      this.instanceID = _GoTrueClient.nextInstanceID;
      _GoTrueClient.nextInstanceID += 1;
      if (this.instanceID > 0 && isBrowser2()) {
        console.warn("Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key.");
      }
      const settings = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);
      this.logDebugMessages = !!settings.debug;
      if (typeof settings.debug === "function") {
        this.logger = settings.debug;
      }
      this.persistSession = settings.persistSession;
      this.storageKey = settings.storageKey;
      this.autoRefreshToken = settings.autoRefreshToken;
      this.admin = new GoTrueAdminApi({
        url: settings.url,
        headers: settings.headers,
        fetch: settings.fetch
      });
      this.url = settings.url;
      this.headers = settings.headers;
      this.fetch = resolveFetch4(settings.fetch);
      this.lock = settings.lock || lockNoOp;
      this.detectSessionInUrl = settings.detectSessionInUrl;
      this.flowType = settings.flowType;
      this.hasCustomAuthorizationHeader = settings.hasCustomAuthorizationHeader;
      if (settings.lock) {
        this.lock = settings.lock;
      } else if (isBrowser2() && ((_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.navigator) === null || _a === void 0 ? void 0 : _a.locks)) {
        this.lock = navigatorLock;
      } else {
        this.lock = lockNoOp;
      }
      if (!this.jwks) {
        this.jwks = { keys: [] };
        this.jwks_cached_at = Number.MIN_SAFE_INTEGER;
      }
      this.mfa = {
        verify: this._verify.bind(this),
        enroll: this._enroll.bind(this),
        unenroll: this._unenroll.bind(this),
        challenge: this._challenge.bind(this),
        listFactors: this._listFactors.bind(this),
        challengeAndVerify: this._challengeAndVerify.bind(this),
        getAuthenticatorAssuranceLevel: this._getAuthenticatorAssuranceLevel.bind(this),
        webauthn: new WebAuthnApi(this)
      };
      if (this.persistSession) {
        if (settings.storage) {
          this.storage = settings.storage;
        } else {
          if (supportsLocalStorage()) {
            this.storage = globalThis.localStorage;
          } else {
            this.memoryStorage = {};
            this.storage = memoryLocalStorageAdapter(this.memoryStorage);
          }
        }
        if (settings.userStorage) {
          this.userStorage = settings.userStorage;
        }
      } else {
        this.memoryStorage = {};
        this.storage = memoryLocalStorageAdapter(this.memoryStorage);
      }
      if (isBrowser2() && globalThis.BroadcastChannel && this.persistSession && this.storageKey) {
        try {
          this.broadcastChannel = new globalThis.BroadcastChannel(this.storageKey);
        } catch (e) {
          console.error("Failed to create a new BroadcastChannel, multi-tab state changes will not be available", e);
        }
        (_b = this.broadcastChannel) === null || _b === void 0 ? void 0 : _b.addEventListener("message", async (event) => {
          this._debug("received broadcast notification from other tab or client", event);
          await this._notifyAllSubscribers(event.data.event, event.data.session, false);
        });
      }
      this.initialize();
    }
    _debug(...args) {
      if (this.logDebugMessages) {
        this.logger(`GoTrueClient@${this.instanceID} (${version4}) ${(/* @__PURE__ */ new Date()).toISOString()}`, ...args);
      }
      return this;
    }
    /**
     * Initializes the client session either from the url or from storage.
     * This method is automatically called when instantiating the client, but should also be called
     * manually when checking for an error from an auth redirect (oauth, magiclink, password recovery, etc).
     */
    async initialize() {
      if (this.initializePromise) {
        return await this.initializePromise;
      }
      this.initializePromise = (async () => {
        return await this._acquireLock(-1, async () => {
          return await this._initialize();
        });
      })();
      return await this.initializePromise;
    }
    /**
     * IMPORTANT:
     * 1. Never throw in this method, as it is called from the constructor
     * 2. Never return a session from this method as it would be cached over
     *    the whole lifetime of the client
     */
    async _initialize() {
      var _a;
      try {
        const params = parseParametersFromURL(window.location.href);
        let callbackUrlType = "none";
        if (this._isImplicitGrantCallback(params)) {
          callbackUrlType = "implicit";
        } else if (await this._isPKCECallback(params)) {
          callbackUrlType = "pkce";
        }
        if (isBrowser2() && this.detectSessionInUrl && callbackUrlType !== "none") {
          const { data, error } = await this._getSessionFromURL(params, callbackUrlType);
          if (error) {
            this._debug("#_initialize()", "error detecting session from URL", error);
            if (isAuthImplicitGrantRedirectError(error)) {
              const errorCode = (_a = error.details) === null || _a === void 0 ? void 0 : _a.code;
              if (errorCode === "identity_already_exists" || errorCode === "identity_not_found" || errorCode === "single_identity_not_deletable") {
                return { error };
              }
            }
            await this._removeSession();
            return { error };
          }
          const { session, redirectType } = data;
          this._debug("#_initialize()", "detected session in URL", session, "redirect type", redirectType);
          await this._saveSession(session);
          setTimeout(async () => {
            if (redirectType === "recovery") {
              await this._notifyAllSubscribers("PASSWORD_RECOVERY", session);
            } else {
              await this._notifyAllSubscribers("SIGNED_IN", session);
            }
          }, 0);
          return { error: null };
        }
        await this._recoverAndRefresh();
        return { error: null };
      } catch (error) {
        if (isAuthError(error)) {
          return { error };
        }
        return {
          error: new AuthUnknownError("Unexpected error during initialization", error)
        };
      } finally {
        await this._handleVisibilityChange();
        this._debug("#_initialize()", "end");
      }
    }
    /**
     * Creates a new anonymous user.
     *
     * @returns A session where the is_anonymous claim in the access token JWT set to true
     */
    async signInAnonymously(credentials) {
      var _a, _b, _c;
      try {
        const res = await _request(this.fetch, "POST", `${this.url}/signup`, {
          headers: this.headers,
          body: {
            data: (_b = (_a = credentials === null || credentials === void 0 ? void 0 : credentials.options) === null || _a === void 0 ? void 0 : _a.data) !== null && _b !== void 0 ? _b : {},
            gotrue_meta_security: { captcha_token: (_c = credentials === null || credentials === void 0 ? void 0 : credentials.options) === null || _c === void 0 ? void 0 : _c.captchaToken }
          },
          xform: _sessionResponse
        });
        const { data, error } = res;
        if (error || !data) {
          return { data: { user: null, session: null }, error };
        }
        const session = data.session;
        const user = data.user;
        if (data.session) {
          await this._saveSession(data.session);
          await this._notifyAllSubscribers("SIGNED_IN", session);
        }
        return { data: { user, session }, error: null };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null, session: null }, error };
        }
        throw error;
      }
    }
    /**
     * Creates a new user.
     *
     * Be aware that if a user account exists in the system you may get back an
     * error message that attempts to hide this information from the user.
     * This method has support for PKCE via email signups. The PKCE flow cannot be used when autoconfirm is enabled.
     *
     * @returns A logged-in session if the server has "autoconfirm" ON
     * @returns A user if the server has "autoconfirm" OFF
     */
    async signUp(credentials) {
      var _a, _b, _c;
      try {
        let res;
        if ("email" in credentials) {
          const { email, password, options } = credentials;
          let codeChallenge = null;
          let codeChallengeMethod = null;
          if (this.flowType === "pkce") {
            ;
            [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);
          }
          res = await _request(this.fetch, "POST", `${this.url}/signup`, {
            headers: this.headers,
            redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,
            body: {
              email,
              password,
              data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},
              gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },
              code_challenge: codeChallenge,
              code_challenge_method: codeChallengeMethod
            },
            xform: _sessionResponse
          });
        } else if ("phone" in credentials) {
          const { phone, password, options } = credentials;
          res = await _request(this.fetch, "POST", `${this.url}/signup`, {
            headers: this.headers,
            body: {
              phone,
              password,
              data: (_b = options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : {},
              channel: (_c = options === null || options === void 0 ? void 0 : options.channel) !== null && _c !== void 0 ? _c : "sms",
              gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
            },
            xform: _sessionResponse
          });
        } else {
          throw new AuthInvalidCredentialsError("You must provide either an email or phone number and a password");
        }
        const { data, error } = res;
        if (error || !data) {
          return { data: { user: null, session: null }, error };
        }
        const session = data.session;
        const user = data.user;
        if (data.session) {
          await this._saveSession(data.session);
          await this._notifyAllSubscribers("SIGNED_IN", session);
        }
        return { data: { user, session }, error: null };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null, session: null }, error };
        }
        throw error;
      }
    }
    /**
     * Log in an existing user with an email and password or phone and password.
     *
     * Be aware that you may get back an error message that will not distinguish
     * between the cases where the account does not exist or that the
     * email/phone and password combination is wrong or that the account can only
     * be accessed via social login.
     */
    async signInWithPassword(credentials) {
      try {
        let res;
        if ("email" in credentials) {
          const { email, password, options } = credentials;
          res = await _request(this.fetch, "POST", `${this.url}/token?grant_type=password`, {
            headers: this.headers,
            body: {
              email,
              password,
              gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
            },
            xform: _sessionResponsePassword
          });
        } else if ("phone" in credentials) {
          const { phone, password, options } = credentials;
          res = await _request(this.fetch, "POST", `${this.url}/token?grant_type=password`, {
            headers: this.headers,
            body: {
              phone,
              password,
              gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
            },
            xform: _sessionResponsePassword
          });
        } else {
          throw new AuthInvalidCredentialsError("You must provide either an email or phone number and a password");
        }
        const { data, error } = res;
        if (error) {
          return { data: { user: null, session: null }, error };
        } else if (!data || !data.session || !data.user) {
          return { data: { user: null, session: null }, error: new AuthInvalidTokenResponseError() };
        }
        if (data.session) {
          await this._saveSession(data.session);
          await this._notifyAllSubscribers("SIGNED_IN", data.session);
        }
        return {
          data: Object.assign({ user: data.user, session: data.session }, data.weak_password ? { weakPassword: data.weak_password } : null),
          error
        };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null, session: null }, error };
        }
        throw error;
      }
    }
    /**
     * Log in an existing user via a third-party provider.
     * This method supports the PKCE flow.
     */
    async signInWithOAuth(credentials) {
      var _a, _b, _c, _d;
      return await this._handleProviderSignIn(credentials.provider, {
        redirectTo: (_a = credentials.options) === null || _a === void 0 ? void 0 : _a.redirectTo,
        scopes: (_b = credentials.options) === null || _b === void 0 ? void 0 : _b.scopes,
        queryParams: (_c = credentials.options) === null || _c === void 0 ? void 0 : _c.queryParams,
        skipBrowserRedirect: (_d = credentials.options) === null || _d === void 0 ? void 0 : _d.skipBrowserRedirect
      });
    }
    /**
     * Log in an existing user by exchanging an Auth Code issued during the PKCE flow.
     */
    async exchangeCodeForSession(authCode) {
      await this.initializePromise;
      return this._acquireLock(-1, async () => {
        return this._exchangeCodeForSession(authCode);
      });
    }
    /**
     * Signs in a user by verifying a message signed by the user's private key.
     * Supports Ethereum (via Sign-In-With-Ethereum) & Solana (Sign-In-With-Solana) standards,
     * both of which derive from the EIP-4361 standard
     * With slight variation on Solana's side.
     * @reference https://eips.ethereum.org/EIPS/eip-4361
     */
    async signInWithWeb3(credentials) {
      const { chain } = credentials;
      switch (chain) {
        case "ethereum":
          return await this.signInWithEthereum(credentials);
        case "solana":
          return await this.signInWithSolana(credentials);
        default:
          throw new Error(`@supabase/auth-js: Unsupported chain "${chain}"`);
      }
    }
    async signInWithEthereum(credentials) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
      let message;
      let signature;
      if ("message" in credentials) {
        message = credentials.message;
        signature = credentials.signature;
      } else {
        const { chain, wallet, statement, options } = credentials;
        let resolvedWallet;
        if (!isBrowser2()) {
          if (typeof wallet !== "object" || !(options === null || options === void 0 ? void 0 : options.url)) {
            throw new Error("@supabase/auth-js: Both wallet and url must be specified in non-browser environments.");
          }
          resolvedWallet = wallet;
        } else if (typeof wallet === "object") {
          resolvedWallet = wallet;
        } else {
          const windowAny = window;
          if ("ethereum" in windowAny && typeof windowAny.ethereum === "object" && "request" in windowAny.ethereum && typeof windowAny.ethereum.request === "function") {
            resolvedWallet = windowAny.ethereum;
          } else {
            throw new Error(`@supabase/auth-js: No compatible Ethereum wallet interface on the window object (window.ethereum) detected. Make sure the user already has a wallet installed and connected for this app. Prefer passing the wallet interface object directly to signInWithWeb3({ chain: 'ethereum', wallet: resolvedUserWallet }) instead.`);
          }
        }
        const url = new URL((_a = options === null || options === void 0 ? void 0 : options.url) !== null && _a !== void 0 ? _a : window.location.href);
        const accounts = await resolvedWallet.request({
          method: "eth_requestAccounts"
        }).then((accs) => accs).catch(() => {
          throw new Error(`@supabase/auth-js: Wallet method eth_requestAccounts is missing or invalid`);
        });
        if (!accounts || accounts.length === 0) {
          throw new Error(`@supabase/auth-js: No accounts available. Please ensure the wallet is connected.`);
        }
        const address = getAddress(accounts[0]);
        let chainId = (_b = options === null || options === void 0 ? void 0 : options.signInWithEthereum) === null || _b === void 0 ? void 0 : _b.chainId;
        if (!chainId) {
          const chainIdHex = await resolvedWallet.request({
            method: "eth_chainId"
          });
          chainId = fromHex(chainIdHex);
        }
        const siweMessage = {
          domain: url.host,
          address,
          statement,
          uri: url.href,
          version: "1",
          chainId,
          nonce: (_c = options === null || options === void 0 ? void 0 : options.signInWithEthereum) === null || _c === void 0 ? void 0 : _c.nonce,
          issuedAt: (_e = (_d = options === null || options === void 0 ? void 0 : options.signInWithEthereum) === null || _d === void 0 ? void 0 : _d.issuedAt) !== null && _e !== void 0 ? _e : /* @__PURE__ */ new Date(),
          expirationTime: (_f = options === null || options === void 0 ? void 0 : options.signInWithEthereum) === null || _f === void 0 ? void 0 : _f.expirationTime,
          notBefore: (_g = options === null || options === void 0 ? void 0 : options.signInWithEthereum) === null || _g === void 0 ? void 0 : _g.notBefore,
          requestId: (_h = options === null || options === void 0 ? void 0 : options.signInWithEthereum) === null || _h === void 0 ? void 0 : _h.requestId,
          resources: (_j = options === null || options === void 0 ? void 0 : options.signInWithEthereum) === null || _j === void 0 ? void 0 : _j.resources
        };
        message = createSiweMessage(siweMessage);
        signature = await resolvedWallet.request({
          method: "personal_sign",
          params: [toHex(message), address]
        });
      }
      try {
        const { data, error } = await _request(this.fetch, "POST", `${this.url}/token?grant_type=web3`, {
          headers: this.headers,
          body: Object.assign({
            chain: "ethereum",
            message,
            signature
          }, ((_k = credentials.options) === null || _k === void 0 ? void 0 : _k.captchaToken) ? { gotrue_meta_security: { captcha_token: (_l = credentials.options) === null || _l === void 0 ? void 0 : _l.captchaToken } } : null),
          xform: _sessionResponse
        });
        if (error) {
          throw error;
        }
        if (!data || !data.session || !data.user) {
          return {
            data: { user: null, session: null },
            error: new AuthInvalidTokenResponseError()
          };
        }
        if (data.session) {
          await this._saveSession(data.session);
          await this._notifyAllSubscribers("SIGNED_IN", data.session);
        }
        return { data: Object.assign({}, data), error };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null, session: null }, error };
        }
        throw error;
      }
    }
    async signInWithSolana(credentials) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
      let message;
      let signature;
      if ("message" in credentials) {
        message = credentials.message;
        signature = credentials.signature;
      } else {
        const { chain, wallet, statement, options } = credentials;
        let resolvedWallet;
        if (!isBrowser2()) {
          if (typeof wallet !== "object" || !(options === null || options === void 0 ? void 0 : options.url)) {
            throw new Error("@supabase/auth-js: Both wallet and url must be specified in non-browser environments.");
          }
          resolvedWallet = wallet;
        } else if (typeof wallet === "object") {
          resolvedWallet = wallet;
        } else {
          const windowAny = window;
          if ("solana" in windowAny && typeof windowAny.solana === "object" && ("signIn" in windowAny.solana && typeof windowAny.solana.signIn === "function" || "signMessage" in windowAny.solana && typeof windowAny.solana.signMessage === "function")) {
            resolvedWallet = windowAny.solana;
          } else {
            throw new Error(`@supabase/auth-js: No compatible Solana wallet interface on the window object (window.solana) detected. Make sure the user already has a wallet installed and connected for this app. Prefer passing the wallet interface object directly to signInWithWeb3({ chain: 'solana', wallet: resolvedUserWallet }) instead.`);
          }
        }
        const url = new URL((_a = options === null || options === void 0 ? void 0 : options.url) !== null && _a !== void 0 ? _a : window.location.href);
        if ("signIn" in resolvedWallet && resolvedWallet.signIn) {
          const output = await resolvedWallet.signIn(Object.assign(Object.assign(Object.assign({ issuedAt: (/* @__PURE__ */ new Date()).toISOString() }, options === null || options === void 0 ? void 0 : options.signInWithSolana), {
            // non-overridable properties
            version: "1",
            domain: url.host,
            uri: url.href
          }), statement ? { statement } : null));
          let outputToProcess;
          if (Array.isArray(output) && output[0] && typeof output[0] === "object") {
            outputToProcess = output[0];
          } else if (output && typeof output === "object" && "signedMessage" in output && "signature" in output) {
            outputToProcess = output;
          } else {
            throw new Error("@supabase/auth-js: Wallet method signIn() returned unrecognized value");
          }
          if ("signedMessage" in outputToProcess && "signature" in outputToProcess && (typeof outputToProcess.signedMessage === "string" || outputToProcess.signedMessage instanceof Uint8Array) && outputToProcess.signature instanceof Uint8Array) {
            message = typeof outputToProcess.signedMessage === "string" ? outputToProcess.signedMessage : new TextDecoder().decode(outputToProcess.signedMessage);
            signature = outputToProcess.signature;
          } else {
            throw new Error("@supabase/auth-js: Wallet method signIn() API returned object without signedMessage and signature fields");
          }
        } else {
          if (!("signMessage" in resolvedWallet) || typeof resolvedWallet.signMessage !== "function" || !("publicKey" in resolvedWallet) || typeof resolvedWallet !== "object" || !resolvedWallet.publicKey || !("toBase58" in resolvedWallet.publicKey) || typeof resolvedWallet.publicKey.toBase58 !== "function") {
            throw new Error("@supabase/auth-js: Wallet does not have a compatible signMessage() and publicKey.toBase58() API");
          }
          message = [
            `${url.host} wants you to sign in with your Solana account:`,
            resolvedWallet.publicKey.toBase58(),
            ...statement ? ["", statement, ""] : [""],
            "Version: 1",
            `URI: ${url.href}`,
            `Issued At: ${(_c = (_b = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _b === void 0 ? void 0 : _b.issuedAt) !== null && _c !== void 0 ? _c : (/* @__PURE__ */ new Date()).toISOString()}`,
            ...((_d = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _d === void 0 ? void 0 : _d.notBefore) ? [`Not Before: ${options.signInWithSolana.notBefore}`] : [],
            ...((_e = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _e === void 0 ? void 0 : _e.expirationTime) ? [`Expiration Time: ${options.signInWithSolana.expirationTime}`] : [],
            ...((_f = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _f === void 0 ? void 0 : _f.chainId) ? [`Chain ID: ${options.signInWithSolana.chainId}`] : [],
            ...((_g = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _g === void 0 ? void 0 : _g.nonce) ? [`Nonce: ${options.signInWithSolana.nonce}`] : [],
            ...((_h = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _h === void 0 ? void 0 : _h.requestId) ? [`Request ID: ${options.signInWithSolana.requestId}`] : [],
            ...((_k = (_j = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _j === void 0 ? void 0 : _j.resources) === null || _k === void 0 ? void 0 : _k.length) ? [
              "Resources",
              ...options.signInWithSolana.resources.map((resource) => `- ${resource}`)
            ] : []
          ].join("\n");
          const maybeSignature = await resolvedWallet.signMessage(new TextEncoder().encode(message), "utf8");
          if (!maybeSignature || !(maybeSignature instanceof Uint8Array)) {
            throw new Error("@supabase/auth-js: Wallet signMessage() API returned an recognized value");
          }
          signature = maybeSignature;
        }
      }
      try {
        const { data, error } = await _request(this.fetch, "POST", `${this.url}/token?grant_type=web3`, {
          headers: this.headers,
          body: Object.assign({ chain: "solana", message, signature: bytesToBase64URL(signature) }, ((_l = credentials.options) === null || _l === void 0 ? void 0 : _l.captchaToken) ? { gotrue_meta_security: { captcha_token: (_m = credentials.options) === null || _m === void 0 ? void 0 : _m.captchaToken } } : null),
          xform: _sessionResponse
        });
        if (error) {
          throw error;
        }
        if (!data || !data.session || !data.user) {
          return {
            data: { user: null, session: null },
            error: new AuthInvalidTokenResponseError()
          };
        }
        if (data.session) {
          await this._saveSession(data.session);
          await this._notifyAllSubscribers("SIGNED_IN", data.session);
        }
        return { data: Object.assign({}, data), error };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null, session: null }, error };
        }
        throw error;
      }
    }
    async _exchangeCodeForSession(authCode) {
      const storageItem = await getItemAsync(this.storage, `${this.storageKey}-code-verifier`);
      const [codeVerifier, redirectType] = (storageItem !== null && storageItem !== void 0 ? storageItem : "").split("/");
      try {
        const { data, error } = await _request(this.fetch, "POST", `${this.url}/token?grant_type=pkce`, {
          headers: this.headers,
          body: {
            auth_code: authCode,
            code_verifier: codeVerifier
          },
          xform: _sessionResponse
        });
        await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`);
        if (error) {
          throw error;
        }
        if (!data || !data.session || !data.user) {
          return {
            data: { user: null, session: null, redirectType: null },
            error: new AuthInvalidTokenResponseError()
          };
        }
        if (data.session) {
          await this._saveSession(data.session);
          await this._notifyAllSubscribers("SIGNED_IN", data.session);
        }
        return { data: Object.assign(Object.assign({}, data), { redirectType: redirectType !== null && redirectType !== void 0 ? redirectType : null }), error };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null, session: null, redirectType: null }, error };
        }
        throw error;
      }
    }
    /**
     * Allows signing in with an OIDC ID token. The authentication provider used
     * should be enabled and configured.
     */
    async signInWithIdToken(credentials) {
      try {
        const { options, provider, token, access_token, nonce } = credentials;
        const res = await _request(this.fetch, "POST", `${this.url}/token?grant_type=id_token`, {
          headers: this.headers,
          body: {
            provider,
            id_token: token,
            access_token,
            nonce,
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
          },
          xform: _sessionResponse
        });
        const { data, error } = res;
        if (error) {
          return { data: { user: null, session: null }, error };
        } else if (!data || !data.session || !data.user) {
          return {
            data: { user: null, session: null },
            error: new AuthInvalidTokenResponseError()
          };
        }
        if (data.session) {
          await this._saveSession(data.session);
          await this._notifyAllSubscribers("SIGNED_IN", data.session);
        }
        return { data, error };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null, session: null }, error };
        }
        throw error;
      }
    }
    /**
     * Log in a user using magiclink or a one-time password (OTP).
     *
     * If the `{{ .ConfirmationURL }}` variable is specified in the email template, a magiclink will be sent.
     * If the `{{ .Token }}` variable is specified in the email template, an OTP will be sent.
     * If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins.
     *
     * Be aware that you may get back an error message that will not distinguish
     * between the cases where the account does not exist or, that the account
     * can only be accessed via social login.
     *
     * Do note that you will need to configure a Whatsapp sender on Twilio
     * if you are using phone sign in with the 'whatsapp' channel. The whatsapp
     * channel is not supported on other providers
     * at this time.
     * This method supports PKCE when an email is passed.
     */
    async signInWithOtp(credentials) {
      var _a, _b, _c, _d, _e;
      try {
        if ("email" in credentials) {
          const { email, options } = credentials;
          let codeChallenge = null;
          let codeChallengeMethod = null;
          if (this.flowType === "pkce") {
            ;
            [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);
          }
          const { error } = await _request(this.fetch, "POST", `${this.url}/otp`, {
            headers: this.headers,
            body: {
              email,
              data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},
              create_user: (_b = options === null || options === void 0 ? void 0 : options.shouldCreateUser) !== null && _b !== void 0 ? _b : true,
              gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },
              code_challenge: codeChallenge,
              code_challenge_method: codeChallengeMethod
            },
            redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo
          });
          return { data: { user: null, session: null }, error };
        }
        if ("phone" in credentials) {
          const { phone, options } = credentials;
          const { data, error } = await _request(this.fetch, "POST", `${this.url}/otp`, {
            headers: this.headers,
            body: {
              phone,
              data: (_c = options === null || options === void 0 ? void 0 : options.data) !== null && _c !== void 0 ? _c : {},
              create_user: (_d = options === null || options === void 0 ? void 0 : options.shouldCreateUser) !== null && _d !== void 0 ? _d : true,
              gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },
              channel: (_e = options === null || options === void 0 ? void 0 : options.channel) !== null && _e !== void 0 ? _e : "sms"
            }
          });
          return { data: { user: null, session: null, messageId: data === null || data === void 0 ? void 0 : data.message_id }, error };
        }
        throw new AuthInvalidCredentialsError("You must provide either an email or phone number.");
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null, session: null }, error };
        }
        throw error;
      }
    }
    /**
     * Log in a user given a User supplied OTP or TokenHash received through mobile or email.
     */
    async verifyOtp(params) {
      var _a, _b;
      try {
        let redirectTo = void 0;
        let captchaToken = void 0;
        if ("options" in params) {
          redirectTo = (_a = params.options) === null || _a === void 0 ? void 0 : _a.redirectTo;
          captchaToken = (_b = params.options) === null || _b === void 0 ? void 0 : _b.captchaToken;
        }
        const { data, error } = await _request(this.fetch, "POST", `${this.url}/verify`, {
          headers: this.headers,
          body: Object.assign(Object.assign({}, params), { gotrue_meta_security: { captcha_token: captchaToken } }),
          redirectTo,
          xform: _sessionResponse
        });
        if (error) {
          throw error;
        }
        if (!data) {
          throw new Error("An error occurred on token verification.");
        }
        const session = data.session;
        const user = data.user;
        if (session === null || session === void 0 ? void 0 : session.access_token) {
          await this._saveSession(session);
          await this._notifyAllSubscribers(params.type == "recovery" ? "PASSWORD_RECOVERY" : "SIGNED_IN", session);
        }
        return { data: { user, session }, error: null };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null, session: null }, error };
        }
        throw error;
      }
    }
    /**
     * Attempts a single-sign on using an enterprise Identity Provider. A
     * successful SSO attempt will redirect the current page to the identity
     * provider authorization page. The redirect URL is implementation and SSO
     * protocol specific.
     *
     * You can use it by providing a SSO domain. Typically you can extract this
     * domain by asking users for their email address. If this domain is
     * registered on the Auth instance the redirect will use that organization's
     * currently active SSO Identity Provider for the login.
     *
     * If you have built an organization-specific login page, you can use the
     * organization's SSO Identity Provider UUID directly instead.
     */
    async signInWithSSO(params) {
      var _a, _b, _c;
      try {
        let codeChallenge = null;
        let codeChallengeMethod = null;
        if (this.flowType === "pkce") {
          ;
          [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);
        }
        return await _request(this.fetch, "POST", `${this.url}/sso`, {
          body: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, "providerId" in params ? { provider_id: params.providerId } : null), "domain" in params ? { domain: params.domain } : null), { redirect_to: (_b = (_a = params.options) === null || _a === void 0 ? void 0 : _a.redirectTo) !== null && _b !== void 0 ? _b : void 0 }), ((_c = params === null || params === void 0 ? void 0 : params.options) === null || _c === void 0 ? void 0 : _c.captchaToken) ? { gotrue_meta_security: { captcha_token: params.options.captchaToken } } : null), { skip_http_redirect: true, code_challenge: codeChallenge, code_challenge_method: codeChallengeMethod }),
          headers: this.headers,
          xform: _ssoResponse
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    }
    /**
     * Sends a reauthentication OTP to the user's email or phone number.
     * Requires the user to be signed-in.
     */
    async reauthenticate() {
      await this.initializePromise;
      return await this._acquireLock(-1, async () => {
        return await this._reauthenticate();
      });
    }
    async _reauthenticate() {
      try {
        return await this._useSession(async (result) => {
          const { data: { session }, error: sessionError } = result;
          if (sessionError)
            throw sessionError;
          if (!session)
            throw new AuthSessionMissingError();
          const { error } = await _request(this.fetch, "GET", `${this.url}/reauthenticate`, {
            headers: this.headers,
            jwt: session.access_token
          });
          return { data: { user: null, session: null }, error };
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null, session: null }, error };
        }
        throw error;
      }
    }
    /**
     * Resends an existing signup confirmation email, email change email, SMS OTP or phone change OTP.
     */
    async resend(credentials) {
      try {
        const endpoint = `${this.url}/resend`;
        if ("email" in credentials) {
          const { email, type, options } = credentials;
          const { error } = await _request(this.fetch, "POST", endpoint, {
            headers: this.headers,
            body: {
              email,
              type,
              gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
            },
            redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo
          });
          return { data: { user: null, session: null }, error };
        } else if ("phone" in credentials) {
          const { phone, type, options } = credentials;
          const { data, error } = await _request(this.fetch, "POST", endpoint, {
            headers: this.headers,
            body: {
              phone,
              type,
              gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
            }
          });
          return { data: { user: null, session: null, messageId: data === null || data === void 0 ? void 0 : data.message_id }, error };
        }
        throw new AuthInvalidCredentialsError("You must provide either an email or phone number and a type");
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null, session: null }, error };
        }
        throw error;
      }
    }
    /**
     * Returns the session, refreshing it if necessary.
     *
     * The session returned can be null if the session is not detected which can happen in the event a user is not signed-in or has logged out.
     *
     * **IMPORTANT:** This method loads values directly from the storage attached
     * to the client. If that storage is based on request cookies for example,
     * the values in it may not be authentic and therefore it's strongly advised
     * against using this method and its results in such circumstances. A warning
     * will be emitted if this is detected. Use {@link #getUser()} instead.
     */
    async getSession() {
      await this.initializePromise;
      const result = await this._acquireLock(-1, async () => {
        return this._useSession(async (result2) => {
          return result2;
        });
      });
      return result;
    }
    /**
     * Acquires a global lock based on the storage key.
     */
    async _acquireLock(acquireTimeout, fn) {
      this._debug("#_acquireLock", "begin", acquireTimeout);
      try {
        if (this.lockAcquired) {
          const last = this.pendingInLock.length ? this.pendingInLock[this.pendingInLock.length - 1] : Promise.resolve();
          const result = (async () => {
            await last;
            return await fn();
          })();
          this.pendingInLock.push((async () => {
            try {
              await result;
            } catch (e) {
            }
          })());
          return result;
        }
        return await this.lock(`lock:${this.storageKey}`, acquireTimeout, async () => {
          this._debug("#_acquireLock", "lock acquired for storage key", this.storageKey);
          try {
            this.lockAcquired = true;
            const result = fn();
            this.pendingInLock.push((async () => {
              try {
                await result;
              } catch (e) {
              }
            })());
            await result;
            while (this.pendingInLock.length) {
              const waitOn = [...this.pendingInLock];
              await Promise.all(waitOn);
              this.pendingInLock.splice(0, waitOn.length);
            }
            return await result;
          } finally {
            this._debug("#_acquireLock", "lock released for storage key", this.storageKey);
            this.lockAcquired = false;
          }
        });
      } finally {
        this._debug("#_acquireLock", "end");
      }
    }
    /**
     * Use instead of {@link #getSession} inside the library. It is
     * semantically usually what you want, as getting a session involves some
     * processing afterwards that requires only one client operating on the
     * session at once across multiple tabs or processes.
     */
    async _useSession(fn) {
      this._debug("#_useSession", "begin");
      try {
        const result = await this.__loadSession();
        return await fn(result);
      } finally {
        this._debug("#_useSession", "end");
      }
    }
    /**
     * NEVER USE DIRECTLY!
     *
     * Always use {@link #_useSession}.
     */
    async __loadSession() {
      this._debug("#__loadSession()", "begin");
      if (!this.lockAcquired) {
        this._debug("#__loadSession()", "used outside of an acquired lock!", new Error().stack);
      }
      try {
        let currentSession = null;
        const maybeSession = await getItemAsync(this.storage, this.storageKey);
        this._debug("#getSession()", "session from storage", maybeSession);
        if (maybeSession !== null) {
          if (this._isValidSession(maybeSession)) {
            currentSession = maybeSession;
          } else {
            this._debug("#getSession()", "session from storage is not valid");
            await this._removeSession();
          }
        }
        if (!currentSession) {
          return { data: { session: null }, error: null };
        }
        const hasExpired = currentSession.expires_at ? currentSession.expires_at * 1e3 - Date.now() < EXPIRY_MARGIN_MS : false;
        this._debug("#__loadSession()", `session has${hasExpired ? "" : " not"} expired`, "expires_at", currentSession.expires_at);
        if (!hasExpired) {
          if (this.userStorage) {
            const maybeUser = await getItemAsync(this.userStorage, this.storageKey + "-user");
            if (maybeUser === null || maybeUser === void 0 ? void 0 : maybeUser.user) {
              currentSession.user = maybeUser.user;
            } else {
              currentSession.user = userNotAvailableProxy();
            }
          }
          if (this.storage.isServer && currentSession.user) {
            let suppressWarning = this.suppressGetSessionWarning;
            const proxySession = new Proxy(currentSession, {
              get: (target, prop, receiver) => {
                if (!suppressWarning && prop === "user") {
                  console.warn("Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server.");
                  suppressWarning = true;
                  this.suppressGetSessionWarning = true;
                }
                return Reflect.get(target, prop, receiver);
              }
            });
            currentSession = proxySession;
          }
          return { data: { session: currentSession }, error: null };
        }
        const { data: session, error } = await this._callRefreshToken(currentSession.refresh_token);
        if (error) {
          return { data: { session: null }, error };
        }
        return { data: { session }, error: null };
      } finally {
        this._debug("#__loadSession()", "end");
      }
    }
    /**
     * Gets the current user details if there is an existing session. This method
     * performs a network request to the Supabase Auth server, so the returned
     * value is authentic and can be used to base authorization rules on.
     *
     * @param jwt Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.
     */
    async getUser(jwt) {
      if (jwt) {
        return await this._getUser(jwt);
      }
      await this.initializePromise;
      const result = await this._acquireLock(-1, async () => {
        return await this._getUser();
      });
      return result;
    }
    async _getUser(jwt) {
      try {
        if (jwt) {
          return await _request(this.fetch, "GET", `${this.url}/user`, {
            headers: this.headers,
            jwt,
            xform: _userResponse
          });
        }
        return await this._useSession(async (result) => {
          var _a, _b, _c;
          const { data, error } = result;
          if (error) {
            throw error;
          }
          if (!((_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) && !this.hasCustomAuthorizationHeader) {
            return { data: { user: null }, error: new AuthSessionMissingError() };
          }
          return await _request(this.fetch, "GET", `${this.url}/user`, {
            headers: this.headers,
            jwt: (_c = (_b = data.session) === null || _b === void 0 ? void 0 : _b.access_token) !== null && _c !== void 0 ? _c : void 0,
            xform: _userResponse
          });
        });
      } catch (error) {
        if (isAuthError(error)) {
          if (isAuthSessionMissingError(error)) {
            await this._removeSession();
            await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`);
          }
          return { data: { user: null }, error };
        }
        throw error;
      }
    }
    /**
     * Updates user data for a logged in user.
     */
    async updateUser(attributes, options = {}) {
      await this.initializePromise;
      return await this._acquireLock(-1, async () => {
        return await this._updateUser(attributes, options);
      });
    }
    async _updateUser(attributes, options = {}) {
      try {
        return await this._useSession(async (result) => {
          const { data: sessionData, error: sessionError } = result;
          if (sessionError) {
            throw sessionError;
          }
          if (!sessionData.session) {
            throw new AuthSessionMissingError();
          }
          const session = sessionData.session;
          let codeChallenge = null;
          let codeChallengeMethod = null;
          if (this.flowType === "pkce" && attributes.email != null) {
            ;
            [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);
          }
          const { data, error: userError } = await _request(this.fetch, "PUT", `${this.url}/user`, {
            headers: this.headers,
            redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,
            body: Object.assign(Object.assign({}, attributes), { code_challenge: codeChallenge, code_challenge_method: codeChallengeMethod }),
            jwt: session.access_token,
            xform: _userResponse
          });
          if (userError)
            throw userError;
          session.user = data.user;
          await this._saveSession(session);
          await this._notifyAllSubscribers("USER_UPDATED", session);
          return { data: { user: session.user }, error: null };
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null }, error };
        }
        throw error;
      }
    }
    /**
     * Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session.
     * If the refresh token or access token in the current session is invalid, an error will be thrown.
     * @param currentSession The current session that minimally contains an access token and refresh token.
     */
    async setSession(currentSession) {
      await this.initializePromise;
      return await this._acquireLock(-1, async () => {
        return await this._setSession(currentSession);
      });
    }
    async _setSession(currentSession) {
      try {
        if (!currentSession.access_token || !currentSession.refresh_token) {
          throw new AuthSessionMissingError();
        }
        const timeNow = Date.now() / 1e3;
        let expiresAt2 = timeNow;
        let hasExpired = true;
        let session = null;
        const { payload } = decodeJWT(currentSession.access_token);
        if (payload.exp) {
          expiresAt2 = payload.exp;
          hasExpired = expiresAt2 <= timeNow;
        }
        if (hasExpired) {
          const { data: refreshedSession, error } = await this._callRefreshToken(currentSession.refresh_token);
          if (error) {
            return { data: { user: null, session: null }, error };
          }
          if (!refreshedSession) {
            return { data: { user: null, session: null }, error: null };
          }
          session = refreshedSession;
        } else {
          const { data, error } = await this._getUser(currentSession.access_token);
          if (error) {
            throw error;
          }
          session = {
            access_token: currentSession.access_token,
            refresh_token: currentSession.refresh_token,
            user: data.user,
            token_type: "bearer",
            expires_in: expiresAt2 - timeNow,
            expires_at: expiresAt2
          };
          await this._saveSession(session);
          await this._notifyAllSubscribers("SIGNED_IN", session);
        }
        return { data: { user: session.user, session }, error: null };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { session: null, user: null }, error };
        }
        throw error;
      }
    }
    /**
     * Returns a new session, regardless of expiry status.
     * Takes in an optional current session. If not passed in, then refreshSession() will attempt to retrieve it from getSession().
     * If the current session's refresh token is invalid, an error will be thrown.
     * @param currentSession The current session. If passed in, it must contain a refresh token.
     */
    async refreshSession(currentSession) {
      await this.initializePromise;
      return await this._acquireLock(-1, async () => {
        return await this._refreshSession(currentSession);
      });
    }
    async _refreshSession(currentSession) {
      try {
        return await this._useSession(async (result) => {
          var _a;
          if (!currentSession) {
            const { data, error: error2 } = result;
            if (error2) {
              throw error2;
            }
            currentSession = (_a = data.session) !== null && _a !== void 0 ? _a : void 0;
          }
          if (!(currentSession === null || currentSession === void 0 ? void 0 : currentSession.refresh_token)) {
            throw new AuthSessionMissingError();
          }
          const { data: session, error } = await this._callRefreshToken(currentSession.refresh_token);
          if (error) {
            return { data: { user: null, session: null }, error };
          }
          if (!session) {
            return { data: { user: null, session: null }, error: null };
          }
          return { data: { user: session.user, session }, error: null };
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null, session: null }, error };
        }
        throw error;
      }
    }
    /**
     * Gets the session data from a URL string
     */
    async _getSessionFromURL(params, callbackUrlType) {
      try {
        if (!isBrowser2())
          throw new AuthImplicitGrantRedirectError("No browser detected.");
        if (params.error || params.error_description || params.error_code) {
          throw new AuthImplicitGrantRedirectError(params.error_description || "Error in URL with unspecified error_description", {
            error: params.error || "unspecified_error",
            code: params.error_code || "unspecified_code"
          });
        }
        switch (callbackUrlType) {
          case "implicit":
            if (this.flowType === "pkce") {
              throw new AuthPKCEGrantCodeExchangeError("Not a valid PKCE flow url.");
            }
            break;
          case "pkce":
            if (this.flowType === "implicit") {
              throw new AuthImplicitGrantRedirectError("Not a valid implicit grant flow url.");
            }
            break;
          default:
        }
        if (callbackUrlType === "pkce") {
          this._debug("#_initialize()", "begin", "is PKCE flow", true);
          if (!params.code)
            throw new AuthPKCEGrantCodeExchangeError("No code detected.");
          const { data: data2, error: error2 } = await this._exchangeCodeForSession(params.code);
          if (error2)
            throw error2;
          const url = new URL(window.location.href);
          url.searchParams.delete("code");
          window.history.replaceState(window.history.state, "", url.toString());
          return { data: { session: data2.session, redirectType: null }, error: null };
        }
        const { provider_token, provider_refresh_token, access_token, refresh_token, expires_in, expires_at, token_type } = params;
        if (!access_token || !expires_in || !refresh_token || !token_type) {
          throw new AuthImplicitGrantRedirectError("No session defined in URL");
        }
        const timeNow = Math.round(Date.now() / 1e3);
        const expiresIn = parseInt(expires_in);
        let expiresAt2 = timeNow + expiresIn;
        if (expires_at) {
          expiresAt2 = parseInt(expires_at);
        }
        const actuallyExpiresIn = expiresAt2 - timeNow;
        if (actuallyExpiresIn * 1e3 <= AUTO_REFRESH_TICK_DURATION_MS) {
          console.warn(`@supabase/gotrue-js: Session as retrieved from URL expires in ${actuallyExpiresIn}s, should have been closer to ${expiresIn}s`);
        }
        const issuedAt = expiresAt2 - expiresIn;
        if (timeNow - issuedAt >= 120) {
          console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued over 120s ago, URL could be stale", issuedAt, expiresAt2, timeNow);
        } else if (timeNow - issuedAt < 0) {
          console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued in the future? Check the device clock for skew", issuedAt, expiresAt2, timeNow);
        }
        const { data, error } = await this._getUser(access_token);
        if (error)
          throw error;
        const session = {
          provider_token,
          provider_refresh_token,
          access_token,
          expires_in: expiresIn,
          expires_at: expiresAt2,
          refresh_token,
          token_type,
          user: data.user
        };
        window.location.hash = "";
        this._debug("#_getSessionFromURL()", "clearing window.location.hash");
        return { data: { session, redirectType: params.type }, error: null };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { session: null, redirectType: null }, error };
        }
        throw error;
      }
    }
    /**
     * Checks if the current URL contains parameters given by an implicit oauth grant flow (https://www.rfc-editor.org/rfc/rfc6749.html#section-4.2)
     */
    _isImplicitGrantCallback(params) {
      return Boolean(params.access_token || params.error_description);
    }
    /**
     * Checks if the current URL and backing storage contain parameters given by a PKCE flow
     */
    async _isPKCECallback(params) {
      const currentStorageContent = await getItemAsync(this.storage, `${this.storageKey}-code-verifier`);
      return !!(params.code && currentStorageContent);
    }
    /**
     * Inside a browser context, `signOut()` will remove the logged in user from the browser session and log them out - removing all items from localstorage and then trigger a `"SIGNED_OUT"` event.
     *
     * For server-side management, you can revoke all refresh tokens for a user by passing a user's JWT through to `auth.api.signOut(JWT: string)`.
     * There is no way to revoke a user's access token jwt until it expires. It is recommended to set a shorter expiry on the jwt for this reason.
     *
     * If using `others` scope, no `SIGNED_OUT` event is fired!
     */
    async signOut(options = { scope: "global" }) {
      await this.initializePromise;
      return await this._acquireLock(-1, async () => {
        return await this._signOut(options);
      });
    }
    async _signOut({ scope } = { scope: "global" }) {
      return await this._useSession(async (result) => {
        var _a;
        const { data, error: sessionError } = result;
        if (sessionError) {
          return { error: sessionError };
        }
        const accessToken = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token;
        if (accessToken) {
          const { error } = await this.admin.signOut(accessToken, scope);
          if (error) {
            if (!(isAuthApiError(error) && (error.status === 404 || error.status === 401 || error.status === 403))) {
              return { error };
            }
          }
        }
        if (scope !== "others") {
          await this._removeSession();
          await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`);
        }
        return { error: null };
      });
    }
    onAuthStateChange(callback) {
      const id = uuid();
      const subscription = {
        id,
        callback,
        unsubscribe: () => {
          this._debug("#unsubscribe()", "state change callback with id removed", id);
          this.stateChangeEmitters.delete(id);
        }
      };
      this._debug("#onAuthStateChange()", "registered callback with id", id);
      this.stateChangeEmitters.set(id, subscription);
      (async () => {
        await this.initializePromise;
        await this._acquireLock(-1, async () => {
          this._emitInitialSession(id);
        });
      })();
      return { data: { subscription } };
    }
    async _emitInitialSession(id) {
      return await this._useSession(async (result) => {
        var _a, _b;
        try {
          const { data: { session }, error } = result;
          if (error)
            throw error;
          await ((_a = this.stateChangeEmitters.get(id)) === null || _a === void 0 ? void 0 : _a.callback("INITIAL_SESSION", session));
          this._debug("INITIAL_SESSION", "callback id", id, "session", session);
        } catch (err) {
          await ((_b = this.stateChangeEmitters.get(id)) === null || _b === void 0 ? void 0 : _b.callback("INITIAL_SESSION", null));
          this._debug("INITIAL_SESSION", "callback id", id, "error", err);
          console.error(err);
        }
      });
    }
    /**
     * Sends a password reset request to an email address. This method supports the PKCE flow.
     *
     * @param email The email address of the user.
     * @param options.redirectTo The URL to send the user to after they click the password reset link.
     * @param options.captchaToken Verification token received when the user completes the captcha on the site.
     */
    async resetPasswordForEmail(email, options = {}) {
      let codeChallenge = null;
      let codeChallengeMethod = null;
      if (this.flowType === "pkce") {
        ;
        [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(
          this.storage,
          this.storageKey,
          true
          // isPasswordRecovery
        );
      }
      try {
        return await _request(this.fetch, "POST", `${this.url}/recover`, {
          body: {
            email,
            code_challenge: codeChallenge,
            code_challenge_method: codeChallengeMethod,
            gotrue_meta_security: { captcha_token: options.captchaToken }
          },
          headers: this.headers,
          redirectTo: options.redirectTo
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    }
    /**
     * Gets all the identities linked to a user.
     */
    async getUserIdentities() {
      var _a;
      try {
        const { data, error } = await this.getUser();
        if (error)
          throw error;
        return { data: { identities: (_a = data.user.identities) !== null && _a !== void 0 ? _a : [] }, error: null };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    }
    async linkIdentity(credentials) {
      if ("token" in credentials) {
        return this.linkIdentityIdToken(credentials);
      }
      return this.linkIdentityOAuth(credentials);
    }
    async linkIdentityOAuth(credentials) {
      var _a;
      try {
        const { data, error } = await this._useSession(async (result) => {
          var _a2, _b, _c, _d, _e;
          const { data: data2, error: error2 } = result;
          if (error2)
            throw error2;
          const url = await this._getUrlForProvider(`${this.url}/user/identities/authorize`, credentials.provider, {
            redirectTo: (_a2 = credentials.options) === null || _a2 === void 0 ? void 0 : _a2.redirectTo,
            scopes: (_b = credentials.options) === null || _b === void 0 ? void 0 : _b.scopes,
            queryParams: (_c = credentials.options) === null || _c === void 0 ? void 0 : _c.queryParams,
            skipBrowserRedirect: true
          });
          return await _request(this.fetch, "GET", url, {
            headers: this.headers,
            jwt: (_e = (_d = data2.session) === null || _d === void 0 ? void 0 : _d.access_token) !== null && _e !== void 0 ? _e : void 0
          });
        });
        if (error)
          throw error;
        if (isBrowser2() && !((_a = credentials.options) === null || _a === void 0 ? void 0 : _a.skipBrowserRedirect)) {
          window.location.assign(data === null || data === void 0 ? void 0 : data.url);
        }
        return { data: { provider: credentials.provider, url: data === null || data === void 0 ? void 0 : data.url }, error: null };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { provider: credentials.provider, url: null }, error };
        }
        throw error;
      }
    }
    async linkIdentityIdToken(credentials) {
      return await this._useSession(async (result) => {
        var _a;
        try {
          const { error: sessionError, data: { session } } = result;
          if (sessionError)
            throw sessionError;
          const { options, provider, token, access_token, nonce } = credentials;
          const res = await _request(this.fetch, "POST", `${this.url}/token?grant_type=id_token`, {
            headers: this.headers,
            jwt: (_a = session === null || session === void 0 ? void 0 : session.access_token) !== null && _a !== void 0 ? _a : void 0,
            body: {
              provider,
              id_token: token,
              access_token,
              nonce,
              link_identity: true,
              gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
            },
            xform: _sessionResponse
          });
          const { data, error } = res;
          if (error) {
            return { data: { user: null, session: null }, error };
          } else if (!data || !data.session || !data.user) {
            return {
              data: { user: null, session: null },
              error: new AuthInvalidTokenResponseError()
            };
          }
          if (data.session) {
            await this._saveSession(data.session);
            await this._notifyAllSubscribers("USER_UPDATED", data.session);
          }
          return { data, error };
        } catch (error) {
          if (isAuthError(error)) {
            return { data: { user: null, session: null }, error };
          }
          throw error;
        }
      });
    }
    /**
     * Unlinks an identity from a user by deleting it. The user will no longer be able to sign in with that identity once it's unlinked.
     */
    async unlinkIdentity(identity) {
      try {
        return await this._useSession(async (result) => {
          var _a, _b;
          const { data, error } = result;
          if (error) {
            throw error;
          }
          return await _request(this.fetch, "DELETE", `${this.url}/user/identities/${identity.identity_id}`, {
            headers: this.headers,
            jwt: (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : void 0
          });
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    }
    /**
     * Generates a new JWT.
     * @param refreshToken A valid refresh token that was returned on login.
     */
    async _refreshAccessToken(refreshToken) {
      const debugName = `#_refreshAccessToken(${refreshToken.substring(0, 5)}...)`;
      this._debug(debugName, "begin");
      try {
        const startedAt = Date.now();
        return await retryable(async (attempt) => {
          if (attempt > 0) {
            await sleep(200 * Math.pow(2, attempt - 1));
          }
          this._debug(debugName, "refreshing attempt", attempt);
          return await _request(this.fetch, "POST", `${this.url}/token?grant_type=refresh_token`, {
            body: { refresh_token: refreshToken },
            headers: this.headers,
            xform: _sessionResponse
          });
        }, (attempt, error) => {
          const nextBackOffInterval = 200 * Math.pow(2, attempt);
          return error && isAuthRetryableFetchError(error) && // retryable only if the request can be sent before the backoff overflows the tick duration
          Date.now() + nextBackOffInterval - startedAt < AUTO_REFRESH_TICK_DURATION_MS;
        });
      } catch (error) {
        this._debug(debugName, "error", error);
        if (isAuthError(error)) {
          return { data: { session: null, user: null }, error };
        }
        throw error;
      } finally {
        this._debug(debugName, "end");
      }
    }
    _isValidSession(maybeSession) {
      const isValidSession = typeof maybeSession === "object" && maybeSession !== null && "access_token" in maybeSession && "refresh_token" in maybeSession && "expires_at" in maybeSession;
      return isValidSession;
    }
    async _handleProviderSignIn(provider, options) {
      const url = await this._getUrlForProvider(`${this.url}/authorize`, provider, {
        redirectTo: options.redirectTo,
        scopes: options.scopes,
        queryParams: options.queryParams
      });
      this._debug("#_handleProviderSignIn()", "provider", provider, "options", options, "url", url);
      if (isBrowser2() && !options.skipBrowserRedirect) {
        window.location.assign(url);
      }
      return { data: { provider, url }, error: null };
    }
    /**
     * Recovers the session from LocalStorage and refreshes the token
     * Note: this method is async to accommodate for AsyncStorage e.g. in React native.
     */
    async _recoverAndRefresh() {
      var _a, _b;
      const debugName = "#_recoverAndRefresh()";
      this._debug(debugName, "begin");
      try {
        const currentSession = await getItemAsync(this.storage, this.storageKey);
        if (currentSession && this.userStorage) {
          let maybeUser = await getItemAsync(this.userStorage, this.storageKey + "-user");
          if (!this.storage.isServer && Object.is(this.storage, this.userStorage) && !maybeUser) {
            maybeUser = { user: currentSession.user };
            await setItemAsync(this.userStorage, this.storageKey + "-user", maybeUser);
          }
          currentSession.user = (_a = maybeUser === null || maybeUser === void 0 ? void 0 : maybeUser.user) !== null && _a !== void 0 ? _a : userNotAvailableProxy();
        } else if (currentSession && !currentSession.user) {
          if (!currentSession.user) {
            const separateUser = await getItemAsync(this.storage, this.storageKey + "-user");
            if (separateUser && (separateUser === null || separateUser === void 0 ? void 0 : separateUser.user)) {
              currentSession.user = separateUser.user;
              await removeItemAsync(this.storage, this.storageKey + "-user");
              await setItemAsync(this.storage, this.storageKey, currentSession);
            } else {
              currentSession.user = userNotAvailableProxy();
            }
          }
        }
        this._debug(debugName, "session from storage", currentSession);
        if (!this._isValidSession(currentSession)) {
          this._debug(debugName, "session is not valid");
          if (currentSession !== null) {
            await this._removeSession();
          }
          return;
        }
        const expiresWithMargin = ((_b = currentSession.expires_at) !== null && _b !== void 0 ? _b : Infinity) * 1e3 - Date.now() < EXPIRY_MARGIN_MS;
        this._debug(debugName, `session has${expiresWithMargin ? "" : " not"} expired with margin of ${EXPIRY_MARGIN_MS}s`);
        if (expiresWithMargin) {
          if (this.autoRefreshToken && currentSession.refresh_token) {
            const { error } = await this._callRefreshToken(currentSession.refresh_token);
            if (error) {
              console.error(error);
              if (!isAuthRetryableFetchError(error)) {
                this._debug(debugName, "refresh failed with a non-retryable error, removing the session", error);
                await this._removeSession();
              }
            }
          }
        } else if (currentSession.user && currentSession.user.__isUserNotAvailableProxy === true) {
          try {
            const { data, error: userError } = await this._getUser(currentSession.access_token);
            if (!userError && (data === null || data === void 0 ? void 0 : data.user)) {
              currentSession.user = data.user;
              await this._saveSession(currentSession);
              await this._notifyAllSubscribers("SIGNED_IN", currentSession);
            } else {
              this._debug(debugName, "could not get user data, skipping SIGNED_IN notification");
            }
          } catch (getUserError) {
            console.error("Error getting user data:", getUserError);
            this._debug(debugName, "error getting user data, skipping SIGNED_IN notification", getUserError);
          }
        } else {
          await this._notifyAllSubscribers("SIGNED_IN", currentSession);
        }
      } catch (err) {
        this._debug(debugName, "error", err);
        console.error(err);
        return;
      } finally {
        this._debug(debugName, "end");
      }
    }
    async _callRefreshToken(refreshToken) {
      var _a, _b;
      if (!refreshToken) {
        throw new AuthSessionMissingError();
      }
      if (this.refreshingDeferred) {
        return this.refreshingDeferred.promise;
      }
      const debugName = `#_callRefreshToken(${refreshToken.substring(0, 5)}...)`;
      this._debug(debugName, "begin");
      try {
        this.refreshingDeferred = new Deferred();
        const { data, error } = await this._refreshAccessToken(refreshToken);
        if (error)
          throw error;
        if (!data.session)
          throw new AuthSessionMissingError();
        await this._saveSession(data.session);
        await this._notifyAllSubscribers("TOKEN_REFRESHED", data.session);
        const result = { data: data.session, error: null };
        this.refreshingDeferred.resolve(result);
        return result;
      } catch (error) {
        this._debug(debugName, "error", error);
        if (isAuthError(error)) {
          const result = { data: null, error };
          if (!isAuthRetryableFetchError(error)) {
            await this._removeSession();
          }
          (_a = this.refreshingDeferred) === null || _a === void 0 ? void 0 : _a.resolve(result);
          return result;
        }
        (_b = this.refreshingDeferred) === null || _b === void 0 ? void 0 : _b.reject(error);
        throw error;
      } finally {
        this.refreshingDeferred = null;
        this._debug(debugName, "end");
      }
    }
    async _notifyAllSubscribers(event, session, broadcast = true) {
      const debugName = `#_notifyAllSubscribers(${event})`;
      this._debug(debugName, "begin", session, `broadcast = ${broadcast}`);
      try {
        if (this.broadcastChannel && broadcast) {
          this.broadcastChannel.postMessage({ event, session });
        }
        const errors = [];
        const promises = Array.from(this.stateChangeEmitters.values()).map(async (x) => {
          try {
            await x.callback(event, session);
          } catch (e) {
            errors.push(e);
          }
        });
        await Promise.all(promises);
        if (errors.length > 0) {
          for (let i = 0; i < errors.length; i += 1) {
            console.error(errors[i]);
          }
          throw errors[0];
        }
      } finally {
        this._debug(debugName, "end");
      }
    }
    /**
     * set currentSession and currentUser
     * process to _startAutoRefreshToken if possible
     */
    async _saveSession(session) {
      this._debug("#_saveSession()", session);
      this.suppressGetSessionWarning = true;
      const sessionToProcess = Object.assign({}, session);
      const userIsProxy = sessionToProcess.user && sessionToProcess.user.__isUserNotAvailableProxy === true;
      if (this.userStorage) {
        if (!userIsProxy && sessionToProcess.user) {
          await setItemAsync(this.userStorage, this.storageKey + "-user", {
            user: sessionToProcess.user
          });
        } else if (userIsProxy) {
        }
        const mainSessionData = Object.assign({}, sessionToProcess);
        delete mainSessionData.user;
        const clonedMainSessionData = deepClone(mainSessionData);
        await setItemAsync(this.storage, this.storageKey, clonedMainSessionData);
      } else {
        const clonedSession = deepClone(sessionToProcess);
        await setItemAsync(this.storage, this.storageKey, clonedSession);
      }
    }
    async _removeSession() {
      this._debug("#_removeSession()");
      await removeItemAsync(this.storage, this.storageKey);
      await removeItemAsync(this.storage, this.storageKey + "-code-verifier");
      await removeItemAsync(this.storage, this.storageKey + "-user");
      if (this.userStorage) {
        await removeItemAsync(this.userStorage, this.storageKey + "-user");
      }
      await this._notifyAllSubscribers("SIGNED_OUT", null);
    }
    /**
     * Removes any registered visibilitychange callback.
     *
     * {@see #startAutoRefresh}
     * {@see #stopAutoRefresh}
     */
    _removeVisibilityChangedCallback() {
      this._debug("#_removeVisibilityChangedCallback()");
      const callback = this.visibilityChangedCallback;
      this.visibilityChangedCallback = null;
      try {
        if (callback && isBrowser2() && (window === null || window === void 0 ? void 0 : window.removeEventListener)) {
          window.removeEventListener("visibilitychange", callback);
        }
      } catch (e) {
        console.error("removing visibilitychange callback failed", e);
      }
    }
    /**
     * This is the private implementation of {@link #startAutoRefresh}. Use this
     * within the library.
     */
    async _startAutoRefresh() {
      await this._stopAutoRefresh();
      this._debug("#_startAutoRefresh()");
      const ticker = setInterval(() => this._autoRefreshTokenTick(), AUTO_REFRESH_TICK_DURATION_MS);
      this.autoRefreshTicker = ticker;
      if (ticker && typeof ticker === "object" && typeof ticker.unref === "function") {
        ticker.unref();
      } else if (typeof Deno !== "undefined" && typeof Deno.unrefTimer === "function") {
        Deno.unrefTimer(ticker);
      }
      setTimeout(async () => {
        await this.initializePromise;
        await this._autoRefreshTokenTick();
      }, 0);
    }
    /**
     * This is the private implementation of {@link #stopAutoRefresh}. Use this
     * within the library.
     */
    async _stopAutoRefresh() {
      this._debug("#_stopAutoRefresh()");
      const ticker = this.autoRefreshTicker;
      this.autoRefreshTicker = null;
      if (ticker) {
        clearInterval(ticker);
      }
    }
    /**
     * Starts an auto-refresh process in the background. The session is checked
     * every few seconds. Close to the time of expiration a process is started to
     * refresh the session. If refreshing fails it will be retried for as long as
     * necessary.
     *
     * If you set the {@link GoTrueClientOptions#autoRefreshToken} you don't need
     * to call this function, it will be called for you.
     *
     * On browsers the refresh process works only when the tab/window is in the
     * foreground to conserve resources as well as prevent race conditions and
     * flooding auth with requests. If you call this method any managed
     * visibility change callback will be removed and you must manage visibility
     * changes on your own.
     *
     * On non-browser platforms the refresh process works *continuously* in the
     * background, which may not be desirable. You should hook into your
     * platform's foreground indication mechanism and call these methods
     * appropriately to conserve resources.
     *
     * {@see #stopAutoRefresh}
     */
    async startAutoRefresh() {
      this._removeVisibilityChangedCallback();
      await this._startAutoRefresh();
    }
    /**
     * Stops an active auto refresh process running in the background (if any).
     *
     * If you call this method any managed visibility change callback will be
     * removed and you must manage visibility changes on your own.
     *
     * See {@link #startAutoRefresh} for more details.
     */
    async stopAutoRefresh() {
      this._removeVisibilityChangedCallback();
      await this._stopAutoRefresh();
    }
    /**
     * Runs the auto refresh token tick.
     */
    async _autoRefreshTokenTick() {
      this._debug("#_autoRefreshTokenTick()", "begin");
      try {
        await this._acquireLock(0, async () => {
          try {
            const now2 = Date.now();
            try {
              return await this._useSession(async (result) => {
                const { data: { session } } = result;
                if (!session || !session.refresh_token || !session.expires_at) {
                  this._debug("#_autoRefreshTokenTick()", "no session");
                  return;
                }
                const expiresInTicks = Math.floor((session.expires_at * 1e3 - now2) / AUTO_REFRESH_TICK_DURATION_MS);
                this._debug("#_autoRefreshTokenTick()", `access token expires in ${expiresInTicks} ticks, a tick lasts ${AUTO_REFRESH_TICK_DURATION_MS}ms, refresh threshold is ${AUTO_REFRESH_TICK_THRESHOLD} ticks`);
                if (expiresInTicks <= AUTO_REFRESH_TICK_THRESHOLD) {
                  await this._callRefreshToken(session.refresh_token);
                }
              });
            } catch (e) {
              console.error("Auto refresh tick failed with error. This is likely a transient error.", e);
            }
          } finally {
            this._debug("#_autoRefreshTokenTick()", "end");
          }
        });
      } catch (e) {
        if (e.isAcquireTimeout || e instanceof LockAcquireTimeoutError) {
          this._debug("auto refresh token tick lock not available");
        } else {
          throw e;
        }
      }
    }
    /**
     * Registers callbacks on the browser / platform, which in-turn run
     * algorithms when the browser window/tab are in foreground. On non-browser
     * platforms it assumes always foreground.
     */
    async _handleVisibilityChange() {
      this._debug("#_handleVisibilityChange()");
      if (!isBrowser2() || !(window === null || window === void 0 ? void 0 : window.addEventListener)) {
        if (this.autoRefreshToken) {
          this.startAutoRefresh();
        }
        return false;
      }
      try {
        this.visibilityChangedCallback = async () => await this._onVisibilityChanged(false);
        window === null || window === void 0 ? void 0 : window.addEventListener("visibilitychange", this.visibilityChangedCallback);
        await this._onVisibilityChanged(true);
      } catch (error) {
        console.error("_handleVisibilityChange", error);
      }
    }
    /**
     * Callback registered with `window.addEventListener('visibilitychange')`.
     */
    async _onVisibilityChanged(calledFromInitialize) {
      const methodName = `#_onVisibilityChanged(${calledFromInitialize})`;
      this._debug(methodName, "visibilityState", document.visibilityState);
      if (document.visibilityState === "visible") {
        if (this.autoRefreshToken) {
          this._startAutoRefresh();
        }
        if (!calledFromInitialize) {
          await this.initializePromise;
          await this._acquireLock(-1, async () => {
            if (document.visibilityState !== "visible") {
              this._debug(methodName, "acquired the lock to recover the session, but the browser visibilityState is no longer visible, aborting");
              return;
            }
            await this._recoverAndRefresh();
          });
        }
      } else if (document.visibilityState === "hidden") {
        if (this.autoRefreshToken) {
          this._stopAutoRefresh();
        }
      }
    }
    /**
     * Generates the relevant login URL for a third-party provider.
     * @param options.redirectTo A URL or mobile address to send the user to after they are confirmed.
     * @param options.scopes A space-separated list of scopes granted to the OAuth application.
     * @param options.queryParams An object of key-value pairs containing query parameters granted to the OAuth application.
     */
    async _getUrlForProvider(url, provider, options) {
      const urlParams = [`provider=${encodeURIComponent(provider)}`];
      if (options === null || options === void 0 ? void 0 : options.redirectTo) {
        urlParams.push(`redirect_to=${encodeURIComponent(options.redirectTo)}`);
      }
      if (options === null || options === void 0 ? void 0 : options.scopes) {
        urlParams.push(`scopes=${encodeURIComponent(options.scopes)}`);
      }
      if (this.flowType === "pkce") {
        const [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);
        const flowParams = new URLSearchParams({
          code_challenge: `${encodeURIComponent(codeChallenge)}`,
          code_challenge_method: `${encodeURIComponent(codeChallengeMethod)}`
        });
        urlParams.push(flowParams.toString());
      }
      if (options === null || options === void 0 ? void 0 : options.queryParams) {
        const query = new URLSearchParams(options.queryParams);
        urlParams.push(query.toString());
      }
      if (options === null || options === void 0 ? void 0 : options.skipBrowserRedirect) {
        urlParams.push(`skip_http_redirect=${options.skipBrowserRedirect}`);
      }
      return `${url}?${urlParams.join("&")}`;
    }
    async _unenroll(params) {
      try {
        return await this._useSession(async (result) => {
          var _a;
          const { data: sessionData, error: sessionError } = result;
          if (sessionError) {
            return { data: null, error: sessionError };
          }
          return await _request(this.fetch, "DELETE", `${this.url}/factors/${params.factorId}`, {
            headers: this.headers,
            jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token
          });
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    }
    async _enroll(params) {
      try {
        return await this._useSession(async (result) => {
          var _a, _b;
          const { data: sessionData, error: sessionError } = result;
          if (sessionError) {
            return { data: null, error: sessionError };
          }
          const body = Object.assign({ friendly_name: params.friendlyName, factor_type: params.factorType }, params.factorType === "phone" ? { phone: params.phone } : params.factorType === "totp" ? { issuer: params.issuer } : {});
          const { data, error } = await _request(this.fetch, "POST", `${this.url}/factors`, {
            body,
            headers: this.headers,
            jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token
          });
          if (error) {
            return { data: null, error };
          }
          if (params.factorType === "totp" && data.type === "totp" && ((_b = data === null || data === void 0 ? void 0 : data.totp) === null || _b === void 0 ? void 0 : _b.qr_code)) {
            data.totp.qr_code = `data:image/svg+xml;utf-8,${data.totp.qr_code}`;
          }
          return { data, error: null };
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    }
    async _verify(params) {
      return this._acquireLock(-1, async () => {
        try {
          return await this._useSession(async (result) => {
            var _a;
            const { data: sessionData, error: sessionError } = result;
            if (sessionError) {
              return { data: null, error: sessionError };
            }
            const body = Object.assign({ challenge_id: params.challengeId }, "webauthn" in params ? {
              webauthn: Object.assign(Object.assign({}, params.webauthn), { credential_response: params.webauthn.type === "create" ? serializeCredentialCreationResponse(params.webauthn.credential_response) : serializeCredentialRequestResponse(params.webauthn.credential_response) })
            } : { code: params.code });
            const { data, error } = await _request(this.fetch, "POST", `${this.url}/factors/${params.factorId}/verify`, {
              body,
              headers: this.headers,
              jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token
            });
            if (error) {
              return { data: null, error };
            }
            await this._saveSession(Object.assign({ expires_at: Math.round(Date.now() / 1e3) + data.expires_in }, data));
            await this._notifyAllSubscribers("MFA_CHALLENGE_VERIFIED", data);
            return { data, error };
          });
        } catch (error) {
          if (isAuthError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    async _challenge(params) {
      return this._acquireLock(-1, async () => {
        try {
          return await this._useSession(async (result) => {
            var _a;
            const { data: sessionData, error: sessionError } = result;
            if (sessionError) {
              return { data: null, error: sessionError };
            }
            const response = await _request(this.fetch, "POST", `${this.url}/factors/${params.factorId}/challenge`, {
              body: params,
              headers: this.headers,
              jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token
            });
            if (response.error) {
              return response;
            }
            const { data } = response;
            if (data.type !== "webauthn") {
              return { data, error: null };
            }
            switch (data.webauthn.type) {
              case "create":
                return {
                  data: Object.assign(Object.assign({}, data), { webauthn: Object.assign(Object.assign({}, data.webauthn), { credential_options: Object.assign(Object.assign({}, data.webauthn.credential_options), { publicKey: deserializeCredentialCreationOptions(data.webauthn.credential_options.publicKey) }) }) }),
                  error: null
                };
              case "request":
                return {
                  data: Object.assign(Object.assign({}, data), { webauthn: Object.assign(Object.assign({}, data.webauthn), { credential_options: Object.assign(Object.assign({}, data.webauthn.credential_options), { publicKey: deserializeCredentialRequestOptions(data.webauthn.credential_options.publicKey) }) }) }),
                  error: null
                };
            }
          });
        } catch (error) {
          if (isAuthError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * {@see GoTrueMFAApi#challengeAndVerify}
     */
    async _challengeAndVerify(params) {
      const { data: challengeData, error: challengeError } = await this._challenge({
        factorId: params.factorId
      });
      if (challengeError) {
        return { data: null, error: challengeError };
      }
      return await this._verify({
        factorId: params.factorId,
        challengeId: challengeData.id,
        code: params.code
      });
    }
    /**
     * {@see GoTrueMFAApi#listFactors}
     */
    async _listFactors() {
      var _a;
      const { data: { user }, error: userError } = await this.getUser();
      if (userError) {
        return { data: null, error: userError };
      }
      const data = {
        all: [],
        phone: [],
        totp: [],
        webauthn: []
      };
      for (const factor of (_a = user === null || user === void 0 ? void 0 : user.factors) !== null && _a !== void 0 ? _a : []) {
        data.all.push(factor);
        if (factor.status === "verified") {
          ;
          data[factor.factor_type].push(factor);
        }
      }
      return {
        data,
        error: null
      };
    }
    /**
     * {@see GoTrueMFAApi#getAuthenticatorAssuranceLevel}
     */
    async _getAuthenticatorAssuranceLevel() {
      return this._acquireLock(-1, async () => {
        return await this._useSession(async (result) => {
          var _a, _b;
          const { data: { session }, error: sessionError } = result;
          if (sessionError) {
            return { data: null, error: sessionError };
          }
          if (!session) {
            return {
              data: { currentLevel: null, nextLevel: null, currentAuthenticationMethods: [] },
              error: null
            };
          }
          const { payload } = decodeJWT(session.access_token);
          let currentLevel = null;
          if (payload.aal) {
            currentLevel = payload.aal;
          }
          let nextLevel = currentLevel;
          const verifiedFactors = (_b = (_a = session.user.factors) === null || _a === void 0 ? void 0 : _a.filter((factor) => factor.status === "verified")) !== null && _b !== void 0 ? _b : [];
          if (verifiedFactors.length > 0) {
            nextLevel = "aal2";
          }
          const currentAuthenticationMethods = payload.amr || [];
          return { data: { currentLevel, nextLevel, currentAuthenticationMethods }, error: null };
        });
      });
    }
    async fetchJwk(kid, jwks = { keys: [] }) {
      let jwk = jwks.keys.find((key) => key.kid === kid);
      if (jwk) {
        return jwk;
      }
      const now2 = Date.now();
      jwk = this.jwks.keys.find((key) => key.kid === kid);
      if (jwk && this.jwks_cached_at + JWKS_TTL > now2) {
        return jwk;
      }
      const { data, error } = await _request(this.fetch, "GET", `${this.url}/.well-known/jwks.json`, {
        headers: this.headers
      });
      if (error) {
        throw error;
      }
      if (!data.keys || data.keys.length === 0) {
        return null;
      }
      this.jwks = data;
      this.jwks_cached_at = now2;
      jwk = data.keys.find((key) => key.kid === kid);
      if (!jwk) {
        return null;
      }
      return jwk;
    }
    /**
     * Extracts the JWT claims present in the access token by first verifying the
     * JWT against the server's JSON Web Key Set endpoint
     * `/.well-known/jwks.json` which is often cached, resulting in significantly
     * faster responses. Prefer this method over {@link #getUser} which always
     * sends a request to the Auth server for each JWT.
     *
     * If the project is not using an asymmetric JWT signing key (like ECC or
     * RSA) it always sends a request to the Auth server (similar to {@link
     * #getUser}) to verify the JWT.
     *
     * @param jwt An optional specific JWT you wish to verify, not the one you
     *            can obtain from {@link #getSession}.
     * @param options Various additional options that allow you to customize the
     *                behavior of this method.
     */
    async getClaims(jwt, options = {}) {
      try {
        let token = jwt;
        if (!token) {
          const { data, error } = await this.getSession();
          if (error || !data.session) {
            return { data: null, error };
          }
          token = data.session.access_token;
        }
        const { header, payload, signature, raw: { header: rawHeader, payload: rawPayload } } = decodeJWT(token);
        if (!(options === null || options === void 0 ? void 0 : options.allowExpired)) {
          validateExp(payload.exp);
        }
        const signingKey = !header.alg || header.alg.startsWith("HS") || !header.kid || !("crypto" in globalThis && "subtle" in globalThis.crypto) ? null : await this.fetchJwk(header.kid, (options === null || options === void 0 ? void 0 : options.keys) ? { keys: options.keys } : options === null || options === void 0 ? void 0 : options.jwks);
        if (!signingKey) {
          const { error } = await this.getUser(token);
          if (error) {
            throw error;
          }
          return {
            data: {
              claims: payload,
              header,
              signature
            },
            error: null
          };
        }
        const algorithm = getAlgorithm(header.alg);
        const publicKey = await crypto.subtle.importKey("jwk", signingKey, algorithm, true, [
          "verify"
        ]);
        const isValid = await crypto.subtle.verify(algorithm, publicKey, signature, stringToUint8Array(`${rawHeader}.${rawPayload}`));
        if (!isValid) {
          throw new AuthInvalidJwtError("Invalid JWT signature");
        }
        return {
          data: {
            claims: payload,
            header,
            signature
          },
          error: null
        };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    }
  };
  GoTrueClient.nextInstanceID = 0;
  var GoTrueClient_default = GoTrueClient;

  // node_modules/@supabase/auth-js/dist/module/AuthClient.js
  var AuthClient = GoTrueClient_default;
  var AuthClient_default = AuthClient;

  // node_modules/@supabase/supabase-js/dist/module/lib/SupabaseAuthClient.js
  var SupabaseAuthClient = class extends AuthClient_default {
    constructor(options) {
      super(options);
    }
  };

  // node_modules/@supabase/supabase-js/dist/module/SupabaseClient.js
  var __awaiter10 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve2) {
        resolve2(value);
      });
    }
    return new (P || (P = Promise))(function(resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var SupabaseClient = class {
    /**
     * Create a new client for use in the browser.
     * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.
     * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.
     * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.
     * @param options.auth.autoRefreshToken Set to "true" if you want to automatically refresh the token before expiring.
     * @param options.auth.persistSession Set to "true" if you want to automatically save the user session into local storage.
     * @param options.auth.detectSessionInUrl Set to "true" if you want to automatically detects OAuth grants in the URL and signs in the user.
     * @param options.realtime Options passed along to realtime-js constructor.
     * @param options.storage Options passed along to the storage-js constructor.
     * @param options.global.fetch A custom fetch implementation.
     * @param options.global.headers Any additional headers to send with each network request.
     */
    constructor(supabaseUrl2, supabaseKey, options) {
      var _a, _b, _c;
      this.supabaseUrl = supabaseUrl2;
      this.supabaseKey = supabaseKey;
      const baseUrl = validateSupabaseUrl(supabaseUrl2);
      if (!supabaseKey)
        throw new Error("supabaseKey is required.");
      this.realtimeUrl = new URL("realtime/v1", baseUrl);
      this.realtimeUrl.protocol = this.realtimeUrl.protocol.replace("http", "ws");
      this.authUrl = new URL("auth/v1", baseUrl);
      this.storageUrl = new URL("storage/v1", baseUrl);
      this.functionsUrl = new URL("functions/v1", baseUrl);
      const defaultStorageKey = `sb-${baseUrl.hostname.split(".")[0]}-auth-token`;
      const DEFAULTS = {
        db: DEFAULT_DB_OPTIONS,
        realtime: DEFAULT_REALTIME_OPTIONS,
        auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), { storageKey: defaultStorageKey }),
        global: DEFAULT_GLOBAL_OPTIONS
      };
      const settings = applySettingDefaults(options !== null && options !== void 0 ? options : {}, DEFAULTS);
      this.storageKey = (_a = settings.auth.storageKey) !== null && _a !== void 0 ? _a : "";
      this.headers = (_b = settings.global.headers) !== null && _b !== void 0 ? _b : {};
      if (!settings.accessToken) {
        this.auth = this._initSupabaseAuthClient((_c = settings.auth) !== null && _c !== void 0 ? _c : {}, this.headers, settings.global.fetch);
      } else {
        this.accessToken = settings.accessToken;
        this.auth = new Proxy({}, {
          get: (_, prop) => {
            throw new Error(`@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(prop)} is not possible`);
          }
        });
      }
      this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), settings.global.fetch);
      this.realtime = this._initRealtimeClient(Object.assign({ headers: this.headers, accessToken: this._getAccessToken.bind(this) }, settings.realtime));
      this.rest = new PostgrestClient(new URL("rest/v1", baseUrl).href, {
        headers: this.headers,
        schema: settings.db.schema,
        fetch: this.fetch
      });
      this.storage = new StorageClient(this.storageUrl.href, this.headers, this.fetch, options === null || options === void 0 ? void 0 : options.storage);
      if (!settings.accessToken) {
        this._listenForAuthEvents();
      }
    }
    /**
     * Supabase Functions allows you to deploy and invoke edge functions.
     */
    get functions() {
      return new FunctionsClient(this.functionsUrl.href, {
        headers: this.headers,
        customFetch: this.fetch
      });
    }
    /**
     * Perform a query on a table or a view.
     *
     * @param relation - The table or view name to query
     */
    from(relation) {
      return this.rest.from(relation);
    }
    // NOTE: signatures must be kept in sync with PostgrestClient.schema
    /**
     * Select a schema to query or perform an function (rpc) call.
     *
     * The schema needs to be on the list of exposed schemas inside Supabase.
     *
     * @param schema - The schema to query
     */
    schema(schema) {
      return this.rest.schema(schema);
    }
    // NOTE: signatures must be kept in sync with PostgrestClient.rpc
    /**
     * Perform a function call.
     *
     * @param fn - The function name to call
     * @param args - The arguments to pass to the function call
     * @param options - Named parameters
     * @param options.head - When set to `true`, `data` will not be returned.
     * Useful if you only need the count.
     * @param options.get - When set to `true`, the function will be called with
     * read-only access mode.
     * @param options.count - Count algorithm to use to count rows returned by the
     * function. Only applicable for [set-returning
     * functions](https://www.postgresql.org/docs/current/functions-srf.html).
     *
     * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
     * hood.
     *
     * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
     * statistics under the hood.
     *
     * `"estimated"`: Uses exact count for low numbers and planned count for high
     * numbers.
     */
    rpc(fn, args = {}, options = {
      head: false,
      get: false,
      count: void 0
    }) {
      return this.rest.rpc(fn, args, options);
    }
    /**
     * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.
     *
     * @param {string} name - The name of the Realtime channel.
     * @param {Object} opts - The options to pass to the Realtime channel.
     *
     */
    channel(name, opts = { config: {} }) {
      return this.realtime.channel(name, opts);
    }
    /**
     * Returns all Realtime channels.
     */
    getChannels() {
      return this.realtime.getChannels();
    }
    /**
     * Unsubscribes and removes Realtime channel from Realtime client.
     *
     * @param {RealtimeChannel} channel - The name of the Realtime channel.
     *
     */
    removeChannel(channel) {
      return this.realtime.removeChannel(channel);
    }
    /**
     * Unsubscribes and removes all Realtime channels from Realtime client.
     */
    removeAllChannels() {
      return this.realtime.removeAllChannels();
    }
    _getAccessToken() {
      return __awaiter10(this, void 0, void 0, function* () {
        var _a, _b;
        if (this.accessToken) {
          return yield this.accessToken();
        }
        const { data } = yield this.auth.getSession();
        return (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : this.supabaseKey;
      });
    }
    _initSupabaseAuthClient({ autoRefreshToken, persistSession, detectSessionInUrl, storage, userStorage, storageKey, flowType, lock, debug }, headers, fetch3) {
      const authHeaders = {
        Authorization: `Bearer ${this.supabaseKey}`,
        apikey: `${this.supabaseKey}`
      };
      return new SupabaseAuthClient({
        url: this.authUrl.href,
        headers: Object.assign(Object.assign({}, authHeaders), headers),
        storageKey,
        autoRefreshToken,
        persistSession,
        detectSessionInUrl,
        storage,
        userStorage,
        flowType,
        lock,
        debug,
        fetch: fetch3,
        // auth checks if there is a custom authorizaiton header using this flag
        // so it knows whether to return an error when getUser is called with no session
        hasCustomAuthorizationHeader: Object.keys(this.headers).some((key) => key.toLowerCase() === "authorization")
      });
    }
    _initRealtimeClient(options) {
      return new RealtimeClient(this.realtimeUrl.href, Object.assign(Object.assign({}, options), { params: Object.assign({ apikey: this.supabaseKey }, options === null || options === void 0 ? void 0 : options.params) }));
    }
    _listenForAuthEvents() {
      const data = this.auth.onAuthStateChange((event, session) => {
        this._handleTokenChanged(event, "CLIENT", session === null || session === void 0 ? void 0 : session.access_token);
      });
      return data;
    }
    _handleTokenChanged(event, source, token) {
      if ((event === "TOKEN_REFRESHED" || event === "SIGNED_IN") && this.changedAccessToken !== token) {
        this.changedAccessToken = token;
        this.realtime.setAuth(token);
      } else if (event === "SIGNED_OUT") {
        this.realtime.setAuth();
        if (source == "STORAGE")
          this.auth.signOut();
        this.changedAccessToken = void 0;
      }
    }
  };

  // node_modules/@supabase/supabase-js/dist/module/index.js
  var createClient = (supabaseUrl2, supabaseKey, options) => {
    return new SupabaseClient(supabaseUrl2, supabaseKey, options);
  };
  function shouldShowDeprecationWarning() {
    if (typeof window !== "undefined") {
      return false;
    }
    if (typeof process === "undefined") {
      return false;
    }
    const processVersion = process["version"];
    if (processVersion === void 0 || processVersion === null) {
      return false;
    }
    const versionMatch = processVersion.match(/^v(\d+)\./);
    if (!versionMatch) {
      return false;
    }
    const majorVersion = parseInt(versionMatch[1], 10);
    return majorVersion <= 18;
  }
  if (shouldShowDeprecationWarning()) {
    console.warn(`\u26A0\uFE0F  Node.js 18 and below are deprecated and will no longer be supported in future versions of @supabase/supabase-js. Please upgrade to Node.js 20 or later. For more information, visit: https://github.com/orgs/supabase/discussions/37217`);
  }

  // utils/supabase.ts
  var supabaseUrl = "https://jtebtntpwimxxfsspezs.supabase.co";
  var supabaseAnonKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp0ZWJ0bnRwd2lteHhmc3NwZXpzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk0MDU1NjcsImV4cCI6MjA3NDk4MTU2N30.yfqRqNMle1FVAvvsutsFZLK_9WkynRQdNlXAUOkE49U";
  var supabase = createClient(supabaseUrl, supabaseAnonKey);

  // data/mockData.tsx
  var initialTasksData = [];
  var initialListsData = [];
  var initialMomentsData = [];
  var initialFocusHistoryData = [];

  // hooks/useLocalStorage.tsx
  var import_react = __toESM(require_react());
  function useLocalStorage(key, initialValue) {
    const [storedValue, setStoredValue] = (0, import_react.useState)(() => {
      if (typeof window === "undefined") {
        return initialValue;
      }
      try {
        const item = window.localStorage.getItem(key);
        return item ? JSON.parse(item) : initialValue;
      } catch (error) {
        console.error(error);
        return initialValue;
      }
    });
    (0, import_react.useEffect)(() => {
      if (typeof window === "undefined") {
        return;
      }
      try {
        window.localStorage.setItem(key, JSON.stringify(storedValue));
      } catch (error) {
        console.error(error);
      }
    }, [key, storedValue]);
    return [storedValue, setStoredValue];
  }
  var useLocalStorage_default = useLocalStorage;

  // node_modules/@capacitor/local-notifications/dist/esm/index.js
  init_dist();

  // node_modules/@capacitor/local-notifications/dist/esm/definitions.js
  var Weekday;
  (function(Weekday2) {
    Weekday2[Weekday2["Sunday"] = 1] = "Sunday";
    Weekday2[Weekday2["Monday"] = 2] = "Monday";
    Weekday2[Weekday2["Tuesday"] = 3] = "Tuesday";
    Weekday2[Weekday2["Wednesday"] = 4] = "Wednesday";
    Weekday2[Weekday2["Thursday"] = 5] = "Thursday";
    Weekday2[Weekday2["Friday"] = 6] = "Friday";
    Weekday2[Weekday2["Saturday"] = 7] = "Saturday";
  })(Weekday || (Weekday = {}));

  // node_modules/@capacitor/local-notifications/dist/esm/index.js
  var LocalNotifications = registerPlugin("LocalNotifications", {
    web: () => Promise.resolve().then(() => (init_web(), web_exports)).then((m) => new m.LocalNotificationsWeb())
  });

  // utils/permissions.ts
  init_dist();

  // node_modules/@capacitor/camera/dist/esm/index.js
  init_dist();

  // node_modules/@capacitor/camera/dist/esm/web.js
  init_dist();

  // node_modules/@capacitor/camera/dist/esm/definitions.js
  var CameraSource;
  (function(CameraSource2) {
    CameraSource2["Prompt"] = "PROMPT";
    CameraSource2["Camera"] = "CAMERA";
    CameraSource2["Photos"] = "PHOTOS";
  })(CameraSource || (CameraSource = {}));
  var CameraDirection;
  (function(CameraDirection2) {
    CameraDirection2["Rear"] = "REAR";
    CameraDirection2["Front"] = "FRONT";
  })(CameraDirection || (CameraDirection = {}));
  var CameraResultType;
  (function(CameraResultType2) {
    CameraResultType2["Uri"] = "uri";
    CameraResultType2["Base64"] = "base64";
    CameraResultType2["DataUrl"] = "dataUrl";
  })(CameraResultType || (CameraResultType = {}));

  // node_modules/@capacitor/camera/dist/esm/web.js
  var CameraWeb = class extends WebPlugin {
    async getPhoto(options) {
      return new Promise(async (resolve2, reject) => {
        if (options.webUseInput || options.source === CameraSource.Photos) {
          this.fileInputExperience(options, resolve2, reject);
        } else if (options.source === CameraSource.Prompt) {
          let actionSheet = document.querySelector("pwa-action-sheet");
          if (!actionSheet) {
            actionSheet = document.createElement("pwa-action-sheet");
            document.body.appendChild(actionSheet);
          }
          actionSheet.header = options.promptLabelHeader || "Photo";
          actionSheet.cancelable = false;
          actionSheet.options = [
            { title: options.promptLabelPhoto || "From Photos" },
            { title: options.promptLabelPicture || "Take Picture" }
          ];
          actionSheet.addEventListener("onSelection", async (e) => {
            const selection = e.detail;
            if (selection === 0) {
              this.fileInputExperience(options, resolve2, reject);
            } else {
              this.cameraExperience(options, resolve2, reject);
            }
          });
        } else {
          this.cameraExperience(options, resolve2, reject);
        }
      });
    }
    async pickImages(_options) {
      return new Promise(async (resolve2, reject) => {
        this.multipleFileInputExperience(resolve2, reject);
      });
    }
    async cameraExperience(options, resolve2, reject) {
      if (customElements.get("pwa-camera-modal")) {
        const cameraModal = document.createElement("pwa-camera-modal");
        cameraModal.facingMode = options.direction === CameraDirection.Front ? "user" : "environment";
        document.body.appendChild(cameraModal);
        try {
          await cameraModal.componentOnReady();
          cameraModal.addEventListener("onPhoto", async (e) => {
            const photo = e.detail;
            if (photo === null) {
              reject(new CapacitorException("User cancelled photos app"));
            } else if (photo instanceof Error) {
              reject(photo);
            } else {
              resolve2(await this._getCameraPhoto(photo, options));
            }
            cameraModal.dismiss();
            document.body.removeChild(cameraModal);
          });
          cameraModal.present();
        } catch (e) {
          this.fileInputExperience(options, resolve2, reject);
        }
      } else {
        console.error(`Unable to load PWA Element 'pwa-camera-modal'. See the docs: https://capacitorjs.com/docs/web/pwa-elements.`);
        this.fileInputExperience(options, resolve2, reject);
      }
    }
    fileInputExperience(options, resolve2, reject) {
      let input = document.querySelector("#_capacitor-camera-input");
      const cleanup = () => {
        var _a;
        (_a = input.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(input);
      };
      if (!input) {
        input = document.createElement("input");
        input.id = "_capacitor-camera-input";
        input.type = "file";
        input.hidden = true;
        document.body.appendChild(input);
        input.addEventListener("change", (_e) => {
          const file = input.files[0];
          let format = "jpeg";
          if (file.type === "image/png") {
            format = "png";
          } else if (file.type === "image/gif") {
            format = "gif";
          }
          if (options.resultType === "dataUrl" || options.resultType === "base64") {
            const reader = new FileReader();
            reader.addEventListener("load", () => {
              if (options.resultType === "dataUrl") {
                resolve2({
                  dataUrl: reader.result,
                  format
                });
              } else if (options.resultType === "base64") {
                const b64 = reader.result.split(",")[1];
                resolve2({
                  base64String: b64,
                  format
                });
              }
              cleanup();
            });
            reader.readAsDataURL(file);
          } else {
            resolve2({
              webPath: URL.createObjectURL(file),
              format
            });
            cleanup();
          }
        });
        input.addEventListener("cancel", (_e) => {
          reject(new CapacitorException("User cancelled photos app"));
          cleanup();
        });
      }
      input.accept = "image/*";
      input.capture = true;
      if (options.source === CameraSource.Photos || options.source === CameraSource.Prompt) {
        input.removeAttribute("capture");
      } else if (options.direction === CameraDirection.Front) {
        input.capture = "user";
      } else if (options.direction === CameraDirection.Rear) {
        input.capture = "environment";
      }
      input.click();
    }
    multipleFileInputExperience(resolve2, reject) {
      let input = document.querySelector("#_capacitor-camera-input-multiple");
      const cleanup = () => {
        var _a;
        (_a = input.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(input);
      };
      if (!input) {
        input = document.createElement("input");
        input.id = "_capacitor-camera-input-multiple";
        input.type = "file";
        input.hidden = true;
        input.multiple = true;
        document.body.appendChild(input);
        input.addEventListener("change", (_e) => {
          const photos = [];
          for (let i = 0; i < input.files.length; i++) {
            const file = input.files[i];
            let format = "jpeg";
            if (file.type === "image/png") {
              format = "png";
            } else if (file.type === "image/gif") {
              format = "gif";
            }
            photos.push({
              webPath: URL.createObjectURL(file),
              format
            });
          }
          resolve2({ photos });
          cleanup();
        });
        input.addEventListener("cancel", (_e) => {
          reject(new CapacitorException("User cancelled photos app"));
          cleanup();
        });
      }
      input.accept = "image/*";
      input.click();
    }
    _getCameraPhoto(photo, options) {
      return new Promise((resolve2, reject) => {
        const reader = new FileReader();
        const format = photo.type.split("/")[1];
        if (options.resultType === "uri") {
          resolve2({
            webPath: URL.createObjectURL(photo),
            format,
            saved: false
          });
        } else {
          reader.readAsDataURL(photo);
          reader.onloadend = () => {
            const r = reader.result;
            if (options.resultType === "dataUrl") {
              resolve2({
                dataUrl: r,
                format,
                saved: false
              });
            } else {
              resolve2({
                base64String: r.split(",")[1],
                format,
                saved: false
              });
            }
          };
          reader.onerror = (e) => {
            reject(e);
          };
        }
      });
    }
    async checkPermissions() {
      if (typeof navigator === "undefined" || !navigator.permissions) {
        throw this.unavailable("Permissions API not available in this browser");
      }
      try {
        const permission = await window.navigator.permissions.query({
          name: "camera"
        });
        return {
          camera: permission.state,
          photos: "granted"
        };
      } catch (_a) {
        throw this.unavailable("Camera permissions are not available in this browser");
      }
    }
    async requestPermissions() {
      throw this.unimplemented("Not implemented on web.");
    }
    async pickLimitedLibraryPhotos() {
      throw this.unavailable("Not implemented on web.");
    }
    async getLimitedLibraryPhotos() {
      throw this.unavailable("Not implemented on web.");
    }
  };
  var Camera = new CameraWeb();

  // node_modules/@capacitor/camera/dist/esm/index.js
  var Camera2 = registerPlugin("Camera", {
    web: () => new CameraWeb()
  });

  // node_modules/@capacitor/haptics/dist/esm/index.js
  init_dist();
  init_definitions();
  var Haptics = registerPlugin("Haptics", {
    web: () => Promise.resolve().then(() => (init_web2(), web_exports2)).then((m) => new m.HapticsWeb())
  });

  // utils/permissions.ts
  var import_react2 = __toESM(require_react());

  // node_modules/@capacitor/keyboard/dist/esm/index.js
  init_dist();

  // node_modules/@capacitor/keyboard/dist/esm/definitions.js
  var KeyboardStyle;
  (function(KeyboardStyle2) {
    KeyboardStyle2["Dark"] = "DARK";
    KeyboardStyle2["Light"] = "LIGHT";
    KeyboardStyle2["Default"] = "DEFAULT";
  })(KeyboardStyle || (KeyboardStyle = {}));
  var KeyboardResize;
  (function(KeyboardResize2) {
    KeyboardResize2["Body"] = "body";
    KeyboardResize2["Ionic"] = "ionic";
    KeyboardResize2["Native"] = "native";
    KeyboardResize2["None"] = "none";
  })(KeyboardResize || (KeyboardResize = {}));

  // node_modules/@capacitor/keyboard/dist/esm/index.js
  var Keyboard = registerPlugin("Keyboard");

  // utils/permissions.ts
  var showSettingsAlert = (message) => {
    alert(message);
  };
  var checkAndRequestCameraPermission = async () => {
    if (!Capacitor2.isNativePlatform()) {
      return true;
    }
    try {
      let permissions = await Camera2.checkPermissions();
      if (permissions.camera === "granted") {
        return true;
      }
      if (permissions.camera === "denied") {
        showSettingsAlert("Camera permission is required. Please enable it in your app settings to use this feature.");
        return false;
      }
      permissions = await Camera2.requestPermissions({
        permissions: ["camera"]
      });
      if (permissions.camera === "granted") {
        return true;
      } else {
        showSettingsAlert("Camera permission is required. Please enable it in your app settings to use this feature.");
        return false;
      }
    } catch (e) {
      console.error("Permission check failed:", e);
      alert("Could not check camera permissions.");
      return false;
    }
  };
  var checkAndRequestNotificationPermission = async () => {
    if (!Capacitor2.isNativePlatform()) {
      const status = await Notification.requestPermission();
      return status === "granted";
    }
    try {
      let permissions = await LocalNotifications.checkPermissions();
      if (permissions.display === "granted") {
        return true;
      }
      if (permissions.display === "denied") {
        showSettingsAlert("Notification permission is required for reminders. Please enable it in your app settings.");
        return false;
      }
      permissions = await LocalNotifications.requestPermissions();
      if (permissions.display === "denied") {
        showSettingsAlert("Notification permission is required for reminders. Please enable it in your app settings.");
      }
      return permissions.display === "granted";
    } catch (e) {
      console.error("Notification permission check failed:", e);
      alert("Could not check notification permissions.");
      return false;
    }
  };
  var takePhotoWithCapacitor = async () => {
    const hasPermission = await checkAndRequestCameraPermission();
    if (!hasPermission) {
      return null;
    }
    try {
      const image = await Camera2.getPhoto({
        quality: 90,
        allowEditing: false,
        // Use our custom cropper instead
        resultType: CameraResultType.DataUrl,
        // Get base64 data URL
        source: CameraSource.Camera
      });
      return image.dataUrl || null;
    } catch (error) {
      if (error instanceof Error && (error.message.includes("User cancelled") || error.message.includes("cancelled"))) {
        console.log("User cancelled photo capture.");
        return null;
      }
      console.error("Error taking photo:", error);
      alert("Failed to take photo.");
      return null;
    }
  };
  var triggerHapticImpact = async (style = ImpactStyle2.Light) => {
    if (Capacitor2.isNativePlatform()) {
      try {
        await Haptics.impact({ style });
      } catch (e) {
        console.warn("Haptic impact failed", e);
      }
    }
  };
  var triggerHapticNotification = async (type = NotificationType.Success) => {
    if (Capacitor2.isNativePlatform()) {
      try {
        await Haptics.notification({ type });
      } catch (e) {
        console.warn("Haptic notification failed", e);
      }
    }
  };
  var triggerHapticSelection = async () => {
    if (Capacitor2.isNativePlatform()) {
      try {
        await Haptics.selectionStart();
        setTimeout(() => {
          try {
            Haptics.selectionEnd();
          } catch (e) {
          }
        }, 30);
      } catch (e) {
        console.warn("Haptic selection failed", e);
      }
    }
  };
  var useKeyboardHeight = () => {
    const [keyboardHeight, setKeyboardHeight] = (0, import_react2.useState)(0);
    (0, import_react2.useEffect)(() => {
      if (Capacitor2.isNativePlatform()) {
        const showListener = Keyboard.addListener("keyboardWillShow", (info) => {
          setKeyboardHeight(info.keyboardHeight);
        });
        const hideListener = Keyboard.addListener("keyboardWillHide", () => {
          setKeyboardHeight(0);
        });
        return () => {
          showListener.remove();
          hideListener.remove();
        };
      }
    }, []);
    return keyboardHeight;
  };

  // contexts/DataContext.tsx
  init_dist();
  var import_jsx_runtime = __toESM(require_jsx_runtime());
  var DataContext = (0, import_react3.createContext)(void 0);
  var getErrorMessage = (error) => {
    console.error("Supabase error object (raw):", error);
    if (!error) return "An unknown error occurred.";
    if (typeof error === "object" && error !== null && "message" in error) {
      return String(error.message);
    }
    if (error instanceof Error) {
      return error.message;
    }
    try {
      const str = JSON.stringify(error, null, 2);
      if (str !== "{}" && str !== "[]") return str;
    } catch {
    }
    return String(error);
  };
  var cleanTaskForSupabase = (task) => {
    const cleaned = { ...task };
    delete cleaned.id;
    delete cleaned.user_id;
    delete cleaned.created_at;
    delete cleaned.updated_at;
    delete cleaned.status;
    delete cleaned.color;
    delete cleaned.time;
    delete cleaned.calendar_event_id;
    delete cleaned.calendar_provider;
    const cleanedPayload = { ...cleaned };
    if ("dueDate" in cleanedPayload && (cleanedPayload.dueDate === "" || cleanedPayload.dueDate === void 0)) cleanedPayload.dueDate = null;
    if ("startDate" in cleanedPayload && (cleanedPayload.startDate === "" || cleanedPayload.startDate === void 0)) cleanedPayload.startDate = null;
    if ("startTime" in cleanedPayload && (cleanedPayload.startTime === "" || cleanedPayload.startTime === void 0)) cleanedPayload.startTime = null;
    if ("notes" in cleanedPayload && (cleanedPayload.notes === "" || cleanedPayload.notes === void 0)) cleanedPayload.notes = null;
    if ("today_assigned_date" in cleanedPayload && (cleanedPayload.today_assigned_date === "" || cleanedPayload.today_assigned_date === void 0)) cleanedPayload.today_assigned_date = null;
    if ("reminder" in cleanedPayload && cleanedPayload.reminder === void 0) cleanedPayload.reminder = null;
    if ("completed_at" in cleanedPayload && (cleanedPayload.completed_at === "" || cleanedPayload.completed_at === void 0)) cleanedPayload.completed_at = null;
    if ("subtasks" in cleanedPayload && (cleanedPayload.subtasks === void 0 || cleanedPayload.subtasks === null)) {
      cleanedPayload.subtasks = [];
    }
    Object.keys(cleanedPayload).forEach((key) => {
      if (cleanedPayload[key] === void 0) {
        delete cleanedPayload[key];
      }
    });
    return cleanedPayload;
  };
  var getNotificationId = (taskId) => {
    if (typeof taskId === "number") {
      return taskId;
    }
    const timestampPart = parseInt(taskId.substring(taskId.length - 9), 10);
    return timestampPart;
  };
  var areNotificationsGloballyEnabled = () => {
    try {
      const item = window.localStorage.getItem("notifications_taskReminders");
      return item ? JSON.parse(item) : true;
    } catch {
      return true;
    }
  };
  var DataProvider = ({ children }) => {
    const [session, setSession] = (0, import_react3.useState)(null);
    const [user, setUser] = (0, import_react3.useState)(null);
    const [loading, setLoading] = (0, import_react3.useState)(true);
    const [tasks, setTasks] = useLocalStorage_default("tasks", initialTasksData);
    const [lists, setLists] = useLocalStorage_default("lists", initialListsData);
    const [moments, setMoments] = useLocalStorage_default("moments", initialMomentsData);
    const [profile, setProfile] = useLocalStorage_default("userProfile", null);
    const [tags, setTags] = useLocalStorage_default("checkinTags", []);
    const [focusHistory, setFocusHistory] = useLocalStorage_default("focusHistory", initialFocusHistoryData);
    const [theme, setTheme] = useLocalStorage_default("app-theme", "System");
    const [fontSize, setFontSize] = useLocalStorage_default("app-font-size", "lg");
    const [isOnline, setIsOnline] = (0, import_react3.useState)(navigator.onLine);
    const [isSyncing, setIsSyncing] = (0, import_react3.useState)(false);
    const [offlineQueue, setOfflineQueue] = useLocalStorage_default("offlineQueue", []);
    const [syncError, setSyncError] = (0, import_react3.useState)(null);
    const isProcessingQueue = (0, import_react3.useRef)(false);
    const cleanupRun = (0, import_react3.useRef)(false);
    const webNotificationTimeouts = (0, import_react3.useRef)(/* @__PURE__ */ new Map());
    const cancelNotification = (0, import_react3.useCallback)(async (taskId) => {
      try {
        if (Capacitor2.isNativePlatform()) {
          const notificationId = getNotificationId(taskId);
          await LocalNotifications.cancel({ notifications: [{ id: notificationId }] });
        } else {
          const timeoutId = webNotificationTimeouts.current.get(taskId);
          if (timeoutId) {
            clearTimeout(timeoutId);
            webNotificationTimeouts.current.delete(taskId);
          }
        }
      } catch (e) {
        console.error("Failed to cancel notification:", e);
      }
    }, []);
    const scheduleNotification = (0, import_react3.useCallback)(async (task) => {
      await cancelNotification(task.id);
      if (!areNotificationsGloballyEnabled() || task.reminder === null || task.reminder === void 0 || !task.dueDate || !task.startTime || task.completed) {
        return;
      }
      const permissionGranted = await checkAndRequestNotificationPermission();
      if (!permissionGranted) {
        return;
      }
      const [year, month, day] = task.dueDate.split("-").map(Number);
      const [hour, minute] = task.startTime.split(":").map(Number);
      if (isNaN(year) || isNaN(month) || isNaN(day) || isNaN(hour) || isNaN(minute)) {
        console.warn("Invalid date/time for notification scheduling:", task.dueDate, task.startTime);
        return;
      }
      const eventTime = new Date(year, month - 1, day, hour, minute);
      const notifyAt = new Date(eventTime.getTime() - task.reminder * 60 * 1e3);
      if (notifyAt < /* @__PURE__ */ new Date()) {
        return;
      }
      try {
        if (Capacitor2.isNativePlatform()) {
          await LocalNotifications.schedule({
            notifications: [{
              title: "Task Reminder",
              body: task.title,
              id: getNotificationId(task.id),
              schedule: { at: notifyAt },
              sound: "default"
            }]
          });
        } else {
          const delay = notifyAt.getTime() - Date.now();
          if (delay > 0) {
            const timeoutId = setTimeout(() => {
              if (Notification.permission === "granted") {
                new Notification("Task Reminder", {
                  body: task.title,
                  icon: "data:image/svg+xml,<svg viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg' stroke='%236D55A6' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'><path d='M20 16.2A4.5 4.5 0 0 0 17.5 8h-1.8A7 7 0 1 0 4 14.9' /><path d='m9 12 2 2 4-4' /></svg>"
                });
              }
              webNotificationTimeouts.current.delete(task.id);
            }, delay);
            webNotificationTimeouts.current.set(task.id, timeoutId);
          }
        }
      } catch (e) {
        console.error("Failed to schedule notification:", e);
      }
    }, [cancelNotification]);
    const processOfflineQueueInternal = (0, import_react3.useCallback)(async (targetUser) => {
      if (!isOnline || isProcessingQueue.current || offlineQueue.length === 0) {
        return;
      }
      isProcessingQueue.current = true;
      setSyncError(null);
      const queueToProcess = [...offlineQueue];
      const processedOperationIds = /* @__PURE__ */ new Set();
      for (const operation of queueToProcess) {
        try {
          let success = false;
          switch (operation.type) {
            case "ADD_TASK": {
              const { data: synced, error } = await supabase.from("tasks").insert({ ...operation.payload.taskData, user_id: targetUser.id }).select().single();
              if (error) throw error;
              await cancelNotification(operation.tempId);
              await scheduleNotification({ ...synced, status: "synced" });
              setTasks((current) => current.map((t) => t.id === operation.tempId ? { ...synced, status: "synced" } : t));
              success = true;
              break;
            }
            case "UPDATE_TASK": {
              const { error } = await supabase.from("tasks").update(operation.payload.updates).eq("id", operation.payload.taskId);
              if (error) throw error;
              setTasks((current) => current.map((t) => t.id === operation.payload.taskId ? { ...t, status: "synced" } : t));
              success = true;
              break;
            }
            case "DELETE_TASK": {
              const { error } = await supabase.from("tasks").delete().eq("id", operation.payload.taskId);
              if (error) throw error;
              success = true;
              break;
            }
            case "ADD_LIST": {
              const { data: synced, error } = await supabase.from("lists").insert({ ...operation.payload.listData, user_id: targetUser.id }).select().single();
              if (error) throw error;
              setLists((current) => current.map((l) => l.id === operation.tempId ? { ...synced, status: "synced" } : l));
              success = true;
              break;
            }
            case "UPDATE_LIST": {
              const { updates, listId, oldName } = operation.payload;
              if (updates.name && oldName && oldName !== updates.name) {
                await supabase.from("tasks").update({ category: updates.name }).eq("category", oldName);
              }
              const { error } = await supabase.from("lists").update(updates).eq("id", listId);
              if (error) throw error;
              setLists((current) => current.map((l) => l.id === listId ? { ...l, status: "synced" } : l));
              success = true;
              break;
            }
            case "DELETE_LIST": {
              const { listId, listName, defaultListCategory, defaultListColor } = operation.payload;
              if (defaultListCategory) {
                await supabase.from("tasks").update({ category: defaultListCategory, color: defaultListColor }).eq("category", listName);
              }
              const { error } = await supabase.from("lists").delete().eq("id", listId);
              if (error) throw error;
              success = true;
              break;
            }
            case "ADD_MOMENT": {
              const { data: synced, error } = await supabase.from("moments").insert({ ...operation.payload.momentData, user_id: targetUser.id }).select().single();
              if (error) throw error;
              setMoments((current) => current.map((m) => m.id === operation.tempId ? { ...synced, status: "synced" } : m));
              success = true;
              break;
            }
            case "UPDATE_MOMENT": {
              const { error } = await supabase.from("moments").update(operation.payload.updates).eq("id", operation.payload.momentId);
              if (error) throw error;
              setMoments((current) => current.map((m) => m.id === operation.payload.momentId ? { ...m, status: "synced" } : m));
              success = true;
              break;
            }
            case "DELETE_MOMENT": {
              const { error } = await supabase.from("moments").delete().eq("id", operation.payload.momentId);
              if (error) throw error;
              success = true;
              break;
            }
            case "ADD_FOCUS_SESSION": {
              const { data: synced, error } = await supabase.from("focus_sessions").insert({ ...operation.payload.sessionData, user_id: targetUser.id }).select().single();
              if (error) throw error;
              setFocusHistory((current) => current.map((s) => s.plant_id.toString() === operation.tempId ? { ...synced, status: "synced" } : s));
              success = true;
              break;
            }
          }
          if (success) {
            processedOperationIds.add(operation.id);
          }
        } catch (error) {
          console.error(`Failed to process offline operation "${operation.type}":`, error);
          const errorMessage = getErrorMessage(error);
          setSyncError(`Failed to process offline operation "${operation.type}": ${errorMessage}`);
          if (processedOperationIds.size > 0) {
            setOfflineQueue((current) => current.filter((op) => !processedOperationIds.has(op.id)));
          }
          isProcessingQueue.current = false;
          return;
        }
      }
      if (processedOperationIds.size > 0) {
        setOfflineQueue((current) => current.filter((op) => !processedOperationIds.has(op.id)));
      }
      isProcessingQueue.current = false;
    }, [isOnline, offlineQueue, setOfflineQueue, setTasks, setLists, setMoments, setFocusHistory, scheduleNotification, cancelNotification]);
    const syncData = (0, import_react3.useCallback)(async (userOverride) => {
      const targetUser = userOverride !== void 0 ? userOverride : user;
      if (!targetUser || !isOnline || isSyncing) {
        return;
      }
      setIsSyncing(true);
      setSyncError(null);
      try {
        await processOfflineQueueInternal(targetUser);
        const [{ data: profileData, error: profileError }, { data: listsData, error: listsError }, { data: tasksData, error: tasksError }, { data: momentsData, error: momentsError }, { data: focusData, error: focusError }] = await Promise.all([
          supabase.from("profiles").select("*").eq("id", targetUser.id).single(),
          supabase.from("lists").select("*").eq("user_id", targetUser.id),
          supabase.from("tasks").select("*").eq("user_id", targetUser.id),
          supabase.from("moments").select("*").eq("user_id", targetUser.id),
          supabase.from("focus_sessions").select("*").eq("user_id", targetUser.id)
        ]);
        if (profileError && profileError.code !== "PGRST116") throw profileError;
        if (listsError) throw listsError;
        if (tasksError) throw tasksError;
        if (momentsError) throw momentsError;
        if (focusError) throw focusError;
        if (profileData) setProfile(profileData);
        if (listsData) {
          setLists((currentLocalLists) => {
            const pendingDeletionIds = new Set(offlineQueue.filter((op) => op.type === "DELETE_LIST").map((op) => op.payload.listId));
            const serverDataFiltered = listsData.filter((l) => !pendingDeletionIds.has(l.id));
            const localUpdates = new Map(currentLocalLists.filter((l) => l.status === "pending").map((l) => [l.id, l]));
            const syncedData = serverDataFiltered.map((serverList) => localUpdates.get(serverList.id) || serverList);
            const syncedIds = new Set(syncedData.map((l) => l.id));
            const newItems = currentLocalLists.filter((l) => l.status === "pending" && !syncedIds.has(l.id));
            return [...syncedData, ...newItems];
          });
        }
        if (tasksData) {
          setTasks((currentLocalTasks) => {
            const pendingDeletionIds = new Set(offlineQueue.filter((op) => op.type === "DELETE_TASK").map((op) => op.payload.taskId));
            const serverDataFiltered = tasksData.filter((t) => !pendingDeletionIds.has(t.id));
            const localUpdates = new Map(currentLocalTasks.filter((t) => t.status === "pending").map((t) => [t.id, t]));
            const syncedData = serverDataFiltered.map((serverTask) => localUpdates.get(serverTask.id) || serverTask);
            const syncedIds = new Set(syncedData.map((t) => t.id));
            const newItems = currentLocalTasks.filter((t) => t.status === "pending" && !syncedIds.has(t.id));
            return [...syncedData, ...newItems];
          });
        }
        if (momentsData) {
          setMoments((currentLocalMoments) => {
            const pendingDeletionIds = new Set(offlineQueue.filter((op) => op.type === "DELETE_MOMENT").map((op) => op.payload.momentId));
            const serverDataFiltered = momentsData.filter((m) => !pendingDeletionIds.has(m.id));
            const localUpdates = new Map(currentLocalMoments.filter((m) => m.status === "pending").map((m) => [m.id, m]));
            const syncedData = serverDataFiltered.map((serverMoment) => localUpdates.get(serverMoment.id) || serverMoment);
            const syncedIds = new Set(syncedData.map((m) => m.id));
            const newItems = currentLocalMoments.filter((m) => m.status === "pending" && !syncedIds.has(m.id));
            return [...syncedData, ...newItems];
          });
        }
        if (focusData) {
          setFocusHistory((currentLocal) => {
            const localPending = currentLocal.filter((s) => s.status === "pending");
            const localPendingIds = new Set(localPending.map((s) => s.plant_id));
            const serverDataFiltered = focusData.filter((s) => !localPendingIds.has(s.plant_id));
            return [...serverDataFiltered, ...localPending];
          });
        }
      } catch (error) {
        console.error("A critical error occurred during data sync:");
        console.dir(error);
        const errorMessage = getErrorMessage(error);
        setSyncError(`Data sync failed: ${errorMessage}`);
      } finally {
        setIsSyncing(false);
      }
    }, [user, isOnline, isSyncing, offlineQueue, processOfflineQueueInternal, setProfile, setLists, setTasks, setMoments, setFocusHistory]);
    const syncDataRef = (0, import_react3.useRef)(syncData);
    (0, import_react3.useEffect)(() => {
      syncDataRef.current = syncData;
    }, [syncData]);
    (0, import_react3.useEffect)(() => {
      const handleOnline = () => setIsOnline(true);
      const handleOffline = () => setIsOnline(false);
      window.addEventListener("online", handleOnline);
      window.addEventListener("offline", handleOffline);
      return () => {
        window.removeEventListener("online", handleOnline);
        window.removeEventListener("offline", handleOffline);
      };
    }, []);
    (0, import_react3.useEffect)(() => {
      if (isOnline && !isSyncing && offlineQueue.length > 0) {
        syncDataRef.current();
      }
    }, [isOnline, isSyncing, offlineQueue.length]);
    (0, import_react3.useEffect)(() => {
      setLoading(true);
      supabase.auth.getSession().then(({ data: { session: session2 } }) => {
        setSession(session2);
        const currentUser = session2?.user ?? null;
        setUser(currentUser);
        setLoading(false);
        if (currentUser) {
          syncDataRef.current(currentUser);
        }
      }).catch((err) => {
        console.error("Error getting session:", err);
        setLoading(false);
      });
      const { data: authListener } = supabase.auth.onAuthStateChange(
        (event, session2) => {
          const currentUser = session2?.user ?? null;
          setSession(session2);
          setUser(currentUser);
          if (event === "SIGNED_IN" && currentUser) {
            syncDataRef.current(currentUser);
          }
          if (event === "SIGNED_OUT") {
            cleanupRun.current = false;
            setProfile(null);
            setTasks([]);
            setLists([]);
            setMoments([]);
            setFocusHistory([]);
            setOfflineQueue([]);
            setSyncError(null);
          }
        }
      );
      return () => authListener.subscription.unsubscribe();
    }, [setOfflineQueue, setFocusHistory]);
    const addToQueue = (0, import_react3.useCallback)((operation) => {
      const newOperation = {
        ...operation,
        id: `op_${Date.now()}_${Math.random()}`,
        timestamp: Date.now()
      };
      setSyncError(null);
      setOfflineQueue((current) => [...current, newOperation]);
    }, [setOfflineQueue]);
    const clearOfflineQueue = (0, import_react3.useCallback)(() => {
      setOfflineQueue([]);
      setSyncError(null);
    }, [setOfflineQueue]);
    const addTask = (0, import_react3.useCallback)(async (taskData) => {
      if (!user) {
        console.error("User not logged in");
        return;
      }
      const tempId = `temp_${Date.now()}`;
      const dataForSupabase = { ...taskData, completed: false };
      if (dataForSupabase.today) {
        dataForSupabase.today_assigned_date = (/* @__PURE__ */ new Date()).toISOString().split("T")[0];
      }
      const newTask = { ...dataForSupabase, id: tempId, user_id: user.id, status: "pending" };
      setTasks((current) => [...current, newTask]);
      await scheduleNotification(newTask);
      const supabaseTaskData = cleanTaskForSupabase(dataForSupabase);
      addToQueue({ type: "ADD_TASK", payload: { taskData: supabaseTaskData }, tempId });
      return tempId;
    }, [user, setTasks, addToQueue, scheduleNotification]);
    const updateTask = (0, import_react3.useCallback)(async (taskId, updates) => {
      let updatedTask;
      const fullUpdates = { ...updates };
      if (fullUpdates.today === true) {
        fullUpdates.today_assigned_date = (/* @__PURE__ */ new Date()).toISOString().split("T")[0];
      } else if (fullUpdates.today === false) {
        fullUpdates.today_assigned_date = void 0;
      }
      if (fullUpdates.completed === true) {
        fullUpdates.completed_at = (/* @__PURE__ */ new Date()).toISOString();
      } else if (fullUpdates.completed === false) {
        fullUpdates.completed_at = void 0;
      }
      setTasks((current) => current.map((t) => {
        if (t.id === taskId) {
          updatedTask = { ...t, ...fullUpdates, status: "pending" };
          return updatedTask;
        }
        return t;
      }));
      if (updatedTask) {
        await scheduleNotification(updatedTask);
      }
      if (typeof taskId === "string" && taskId.startsWith("temp_")) {
        setOfflineQueue((currentQueue) => currentQueue.map((op) => {
          if (op.tempId === taskId && op.type === "ADD_TASK") {
            const updatedPayloadData = { ...op.payload.taskData, ...cleanTaskForSupabase(fullUpdates) };
            return { ...op, payload: { taskData: updatedPayloadData } };
          }
          return op;
        }));
      } else {
        const supabaseUpdates = cleanTaskForSupabase(fullUpdates);
        addToQueue({ type: "UPDATE_TASK", payload: { taskId, updates: supabaseUpdates } });
      }
    }, [setTasks, setOfflineQueue, addToQueue, scheduleNotification]);
    const deleteTask = (0, import_react3.useCallback)(async (taskId) => {
      await cancelNotification(taskId);
      setTasks((current) => current.filter((t) => t.id !== taskId));
      if (typeof taskId === "string" && taskId.startsWith("temp_")) {
        setOfflineQueue((currentQueue) => currentQueue.filter((op) => op.tempId !== taskId));
      } else {
        addToQueue({ type: "DELETE_TASK", payload: { taskId } });
      }
    }, [setTasks, setOfflineQueue, addToQueue, cancelNotification]);
    const addList = (0, import_react3.useCallback)(async (listData) => {
      if (!user) throw new Error("User not logged in");
      const tempId = `temp_${Date.now()}`;
      const newList = { ...listData, id: tempId, user_id: user.id, status: "pending" };
      setLists((current) => [...current, newList]);
      addToQueue({ type: "ADD_LIST", payload: { listData }, tempId });
    }, [user, setLists, addToQueue]);
    const updateList = (0, import_react3.useCallback)(async (listId, updates) => {
      const cleanUpdates = { ...updates };
      delete cleanUpdates.id;
      delete cleanUpdates.user_id;
      delete cleanUpdates.created_at;
      delete cleanUpdates.updated_at;
      delete cleanUpdates.status;
      const oldList = lists.find((l) => l.id === listId);
      const oldName = oldList?.name;
      if (updates.name && oldName && oldName !== updates.name) {
        setTasks((current) => current.map((t) => t.category === oldName ? { ...t, category: updates.name, status: "pending" } : t));
      }
      setLists((current) => current.map((l) => l.id === listId ? { ...l, ...updates, status: "pending" } : l));
      if (typeof listId === "string" && listId.startsWith("temp_")) {
        setOfflineQueue((currentQueue) => {
          return currentQueue.map((op) => {
            if (op.tempId === listId && op.type === "ADD_LIST") {
              const newOp = { ...op, payload: { listData: { ...op.payload.listData, ...cleanUpdates } } };
              if (updates.name && oldName && oldName !== updates.name) {
                currentQueue.forEach((taskOp) => {
                  if (taskOp.type === "ADD_TASK" && taskOp.payload.taskData.category === oldName) {
                    taskOp.payload.taskData.category = updates.name;
                  }
                });
              }
              return newOp;
            }
            return op;
          });
        });
      } else {
        addToQueue({ type: "UPDATE_LIST", payload: { listId, updates: cleanUpdates, oldName } });
      }
    }, [lists, setLists, setTasks, setOfflineQueue, addToQueue]);
    const deleteList = (0, import_react3.useCallback)(async (listId, listName) => {
      const defaultList = lists.find((l) => l.name.toLowerCase() === "personal") || lists.find((l) => l.id !== listId);
      if (defaultList && defaultList.id !== listId) {
        setTasks((current) => current.map((t) => t.category === listName ? { ...t, category: defaultList.name, color: defaultList.color, status: "pending" } : t));
      }
      setLists((current) => current.filter((l) => l.id !== listId));
      if (typeof listId === "string" && listId.startsWith("temp_")) {
        setOfflineQueue((currentQueue) => currentQueue.filter((op) => op.tempId !== listId));
      } else {
        addToQueue({ type: "DELETE_LIST", payload: { listId, listName, defaultListCategory: defaultList?.name, defaultListColor: defaultList?.color } });
      }
    }, [lists, setLists, setTasks, setOfflineQueue, addToQueue]);
    const addMoment = (0, import_react3.useCallback)(async (momentData) => {
      if (!user) throw new Error("User not logged in");
      const tempId = `temp_${Date.now()}`;
      const newMoment = { ...momentData, id: tempId, user_id: user.id, status: "pending", created_at: (/* @__PURE__ */ new Date()).toISOString() };
      setMoments((current) => [newMoment, ...current]);
      addToQueue({ type: "ADD_MOMENT", payload: { momentData }, tempId });
    }, [user, setMoments, addToQueue]);
    const updateMoment = (0, import_react3.useCallback)(async (momentId, updates) => {
      const cleanUpdates = { ...updates };
      delete cleanUpdates.id;
      delete cleanUpdates.user_id;
      delete cleanUpdates.created_at;
      delete cleanUpdates.updated_at;
      delete cleanUpdates.status;
      setMoments((current) => current.map((m) => m.id === momentId ? { ...m, ...updates, status: "pending" } : m));
      if (typeof momentId === "string" && momentId.startsWith("temp_")) {
        setOfflineQueue((currentQueue) => {
          return currentQueue.map((op) => {
            if (op.tempId === momentId && op.type === "ADD_MOMENT") {
              return { ...op, payload: { momentData: { ...op.payload.momentData, ...cleanUpdates } } };
            }
            return op;
          });
        });
      } else {
        addToQueue({ type: "UPDATE_MOMENT", payload: { momentId, updates: cleanUpdates } });
      }
    }, [setMoments, setOfflineQueue, addToQueue]);
    const deleteMoment = (0, import_react3.useCallback)(async (momentId) => {
      setMoments((current) => current.filter((m) => m.id !== momentId));
      if (typeof momentId === "string" && momentId.startsWith("temp_")) {
        setOfflineQueue((currentQueue) => currentQueue.filter((op) => op.tempId !== momentId));
      } else {
        addToQueue({ type: "DELETE_MOMENT", payload: { momentId } });
      }
    }, [setMoments, setOfflineQueue, addToQueue]);
    const addFocusSession = (0, import_react3.useCallback)(async (sessionData) => {
      if (!user) throw new Error("User not logged in");
      const newSession = { ...sessionData, user_id: user.id, status: "pending" };
      setFocusHistory((current) => [...current, newSession]);
      const { status, user_id, id, created_at, ...payloadForSupabase } = newSession;
      addToQueue({ type: "ADD_FOCUS_SESSION", payload: { sessionData: payloadForSupabase }, tempId: String(sessionData.plant_id) });
    }, [user, setFocusHistory, addToQueue]);
    const rescheduleAllNotifications = (0, import_react3.useCallback)(async () => {
      if (!areNotificationsGloballyEnabled()) return;
      const permissionGranted = await checkAndRequestNotificationPermission();
      if (!permissionGranted) return;
      if (Capacitor2.isNativePlatform()) {
        try {
          const pending = await LocalNotifications.getPending();
          if (pending.notifications.length > 0) {
            await LocalNotifications.cancel(pending);
          }
        } catch (e) {
          console.error("Error clearing native notifications:", e);
        }
      } else {
        webNotificationTimeouts.current.forEach((timeoutId) => clearTimeout(timeoutId));
        webNotificationTimeouts.current.clear();
      }
      for (const task of tasks) {
        await scheduleNotification(task);
      }
    }, [tasks, scheduleNotification]);
    (0, import_react3.useEffect)(() => {
      if (user && tasks.length > 0 && !cleanupRun.current) {
        const todayStr = (/* @__PURE__ */ new Date()).toISOString().split("T")[0];
        tasks.forEach((task) => {
          if (task.today && task.today_assigned_date && task.today_assigned_date !== todayStr) {
            updateTask(task.id, { today: false });
          }
        });
        cleanupRun.current = true;
      }
    }, [user, tasks, updateTask]);
    const addTag = (0, import_react3.useCallback)((newTag) => {
      const trimmedTag = newTag.trim();
      if (trimmedTag && !tags.find((t) => t.toLowerCase() === trimmedTag.toLowerCase())) {
        setTags((current) => [...current, trimmedTag].sort());
      }
    }, [tags, setTags]);
    const deleteTag = (0, import_react3.useCallback)(async (tagToDelete) => {
      const momentsToUpdate = moments.filter((m) => m.tags?.includes(tagToDelete));
      const updatePromises = momentsToUpdate.map((moment) => {
        const newTags = moment.tags?.filter((t) => t !== tagToDelete);
        return updateMoment(moment.id, { tags: newTags });
      });
      await Promise.all(updatePromises);
      setTags((current) => current.filter((t) => t !== tagToDelete));
    }, [moments, updateMoment, setTags]);
    const value = (0, import_react3.useMemo)(() => ({
      session,
      user,
      loading,
      login: (email, pass) => supabase.auth.signInWithPassword({ email, password: pass }),
      signup: (email, pass, fullName, username) => supabase.auth.signUp({ email, password: pass, options: { data: { full_name: fullName, username, avatar_url: `https://i.pravatar.cc/150?u=${username}` } } }),
      logout: () => supabase.auth.signOut(),
      resetPassword: (email) => supabase.auth.resetPasswordForEmail(email, { redirectTo: window.location.origin }),
      tasks,
      setTasks,
      lists,
      setLists,
      moments,
      setMoments,
      focusHistory,
      profile,
      setProfile,
      syncData,
      isOnline,
      isSyncing,
      offlineQueue,
      syncError,
      clearOfflineQueue,
      rescheduleAllNotifications,
      addTask,
      updateTask,
      deleteTask,
      addList,
      updateList,
      deleteList,
      addMoment,
      updateMoment,
      deleteMoment,
      addFocusSession,
      tags,
      addTag,
      deleteTag,
      theme,
      setTheme,
      fontSize,
      setFontSize
    }), [session, user, loading, tasks, lists, moments, focusHistory, profile, isOnline, isSyncing, offlineQueue, syncError, syncData, setTasks, setLists, setMoments, setProfile, clearOfflineQueue, rescheduleAllNotifications, addTask, updateTask, deleteTask, addList, updateList, deleteList, addMoment, updateMoment, deleteMoment, addFocusSession, tags, addTag, deleteTag, theme, setTheme, fontSize, setFontSize]);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DataContext.Provider, { value, children });
  };
  var useData = () => {
    const context = (0, import_react3.useContext)(DataContext);
    if (context === void 0) {
      throw new Error("useData must be used within a DataProvider");
    }
    return context;
  };

  // App.tsx
  init_dist();

  // node_modules/@capacitor/status-bar/dist/esm/index.js
  init_dist();

  // node_modules/@capacitor/status-bar/dist/esm/definitions.js
  var Style;
  (function(Style2) {
    Style2["Dark"] = "DARK";
    Style2["Light"] = "LIGHT";
    Style2["Default"] = "DEFAULT";
  })(Style || (Style = {}));
  var Animation;
  (function(Animation2) {
    Animation2["None"] = "NONE";
    Animation2["Slide"] = "SLIDE";
    Animation2["Fade"] = "FADE";
  })(Animation || (Animation = {}));

  // node_modules/@capacitor/status-bar/dist/esm/index.js
  var StatusBar = registerPlugin("StatusBar");

  // node_modules/@capacitor/app/dist/esm/index.js
  init_dist();
  var App = registerPlugin("App", {
    web: () => Promise.resolve().then(() => (init_web3(), web_exports3)).then((m) => new m.AppWeb())
  });

  // screens/LoginScreen.tsx
  var import_react4 = __toESM(require_react());

  // components/icons/Logo.tsx
  var import_jsx_runtime2 = __toESM(require_jsx_runtime());
  var Logo = ({ className = "h-12 w-12" }) => /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(
    "svg",
    {
      className,
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      strokeWidth: "1.5",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("path", { d: "M20 16.2A4.5 4.5 0 0 0 17.5 8h-1.8A7 7 0 1 0 4 14.9" }),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("path", { d: "m9 12 2 2 4-4" })
      ]
    }
  );
  var Logo_default = Logo;

  // components/layouts/AuthLayout.tsx
  var import_jsx_runtime3 = __toESM(require_jsx_runtime());
  var AuthLayout = ({ title, children }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { className: "h-full w-full flex flex-col items-center justify-center p-4 sm:p-6 text-[var(--color-text-primary)]", children: /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "w-full max-w-md bg-[var(--color-surface-container)] p-6 rounded-2xl card-shadow", children: [
      /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "text-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { className: "flex justify-center mb-4 text-[var(--color-primary-500)]", children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Logo_default, { className: "h-12 w-12" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("h1", { className: "text-3xl font-bold", children: "TaskMaster" }),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("h2", { className: "text-2xl font-bold mt-6 text-[var(--color-text-primary)]", children: title })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { className: "mt-6", children })
    ] }) });
  };
  var AuthLayout_default = AuthLayout;

  // components/common/InputField.tsx
  var import_jsx_runtime4 = __toESM(require_jsx_runtime());
  var InputField = ({ label, id, type = "text", ...props }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("label", { htmlFor: id, className: "block text-sm font-medium text-[var(--color-text-secondary)] mb-1", children: label }),
      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
        "input",
        {
          id,
          name: id,
          type,
          className: "w-full px-4 py-2.5 bg-[var(--color-surface-container)] text-[var(--color-text-primary)] border border-[var(--color-border)] rounded-[var(--border-radius-md)] focus:outline-none focus:ring-2 focus:ring-[var(--color-primary-500)] focus:border-transparent transition text-sm",
          ...props
        }
      )
    ] });
  };
  var InputField_default = InputField;

  // components/common/Button.tsx
  var import_jsx_runtime5 = __toESM(require_jsx_runtime());
  var Button = ({ children, variant = "primary", className, ...props }) => {
    const baseStyles = "w-full flex justify-center items-center gap-2 rounded-[var(--border-radius-md)] px-4 py-2.5 font-[var(--font-weight-medium)] text-sm transition-all duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-offset-2";
    const variantStyles = {
      primary: "bg-[var(--color-primary-500)] text-[var(--color-on-primary)] hover:opacity-90 focus:ring-[var(--color-primary-500)]",
      secondary: "bg-[var(--color-surface-container-low)] text-[var(--color-text-secondary)] hover:bg-[var(--color-border)] focus:ring-gray-400",
      social: "bg-[var(--color-surface-container)] text-[var(--color-text-primary)] border border-[var(--color-border)] hover:bg-[var(--color-surface-container-low)] focus:ring-gray-300"
    };
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("button", { className: `${baseStyles} ${variantStyles[variant]} ${className}`, ...props, children });
  };
  var Button_default = Button;

  // screens/LoginScreen.tsx
  var import_jsx_runtime6 = __toESM(require_jsx_runtime());
  var GoogleIcon = () => /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("svg", { className: "h-5 w-5", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("path", { fill: "currentColor", d: "M21.35,11.1H12.18V13.83H18.69C18.36,17.64 15.19,19.27 12.19,19.27C8.36,19.27 5,16.25 5,12C5,7.9 8.2,4.73 12.19,4.73C14.03,4.73 15.69,5.36 16.95,6.58L19.05,4.58C17.22,2.91 14.88,2 12.19,2C6.42,2 2.03,6.8 2.03,12C2.03,17.05 6.16,22 12.19,22C17.6,22 21.54,18.33 21.54,12.29C21.54,11.76 21.48,11.43 21.35,11.1Z" }) });
  var AppleIcon = () => /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("svg", { className: "h-6 w-6", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("path", { fill: "currentColor", d: "M19.1,12.87c0-2,.83-3.6,2.2-4.71a.51.51,0,0,0,.1-.55,4.48,4.48,0,0,0-3.3-2.07c-1.3-.11-2.91.56-3.71,1.44a4.1,4.1,0,0,0-1.4,3.1,3.42,3.42,0,0,0,1,2.44,3.23,3.23,0,0,0,2.1,1.15.5.5,0,0,0,.4-.13,3.74,3.74,0,0,0,1.3-2.73m-4-6.41c.81-.88,1.62-1.4,2.81-1.46a4.34,4.34,0,0,1,1.61.29,3.8,3.8,0,0,0-3.1,3.12,3.94,3.94,0,0,0,1.4,2.83c.8.9,1.5,1.5,2.9,1.5a2.58,2.58,0,0,0,1.6-.51,4.5,4.5,0,0,1-3.7,2.57,4.8,4.8,0,0,1-4.2-2.4c-2.3-3.71-.8-8,1.4-10.38" }) });
  var LoginScreen = () => {
    const navigate = useNavigate();
    const { login } = useData();
    const [email, setEmail] = (0, import_react4.useState)("");
    const [password, setPassword] = (0, import_react4.useState)("");
    const [error, setError] = (0, import_react4.useState)(null);
    const [loading, setLoading] = (0, import_react4.useState)(false);
    const handleLogin = async (e) => {
      e.preventDefault();
      setLoading(true);
      setError(null);
      const { error: authError } = await login(email, password);
      setLoading(false);
      if (authError) {
        setError(authError.message);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(AuthLayout_default, { title: "Log In to Your Account", children: [
      /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("form", { className: "space-y-4", onSubmit: handleLogin, children: [
        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(InputField_default, { id: "email", label: "Email", type: "email", placeholder: "you@example.com", required: true, value: email, onChange: (e) => setEmail(e.target.value) }),
        /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(InputField_default, { id: "password", label: "Password", type: "password", placeholder: "\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022", required: true, value: password, onChange: (e) => setPassword(e.target.value) }),
          /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("div", { className: "text-right mt-2", children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(Link, { to: "/reset-password", className: "text-xs font-medium text-[var(--color-primary-500)] hover:opacity-80", children: "Forgot Password?" }) })
        ] }),
        error && /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("p", { className: "text-[var(--color-functional-red)] text-xs text-center", children: error }),
        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(Button_default, { type: "submit", variant: "primary", disabled: loading, children: loading ? "Logging in..." : "Log In" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("div", { className: "my-4 flex items-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("div", { className: "flex-grow border-t border-[var(--color-border)]" }),
        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("span", { className: "mx-4 text-xs text-[var(--color-text-secondary)]", children: "Or continue with" }),
        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("div", { className: "flex-grow border-t border-[var(--color-border)]" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("div", { className: "space-y-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(Button_default, { variant: "social", onClick: () => alert("Social login not implemented yet."), children: [
          /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(GoogleIcon, {}),
          /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("span", { children: "Log in with Google" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(Button_default, { variant: "social", onClick: () => alert("Social login not implemented yet."), children: [
          /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(AppleIcon, {}),
          /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("span", { children: "Log in with Apple" })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("p", { className: "mt-6 text-center text-xs text-[var(--color-text-secondary)]", children: [
        "Don't have an account?",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(Link, { to: "/signup", className: "font-medium text-[var(--color-primary-500)] hover:opacity-80", children: "Sign Up" })
      ] })
    ] });
  };
  var LoginScreen_default = LoginScreen;

  // screens/SignUpScreen.tsx
  var import_react5 = __toESM(require_react());
  var import_jsx_runtime7 = __toESM(require_jsx_runtime());
  var GoogleIcon2 = () => /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("svg", { className: "h-5 w-5", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("path", { fill: "currentColor", d: "M21.35,11.1H12.18V13.83H18.69C18.36,17.64 15.19,19.27 12.19,19.27C8.36,19.27 5,16.25 5,12C5,7.9 8.2,4.73 12.19,4.73C14.03,4.73 15.69,5.36 16.95,6.58L19.05,4.58C17.22,2.91 14.88,2 12.19,2C6.42,2 2.03,6.8 2.03,12C2.03,17.05 6.16,22 12.19,22C17.6,22 21.54,18.33 21.54,12.29C21.54,11.76 21.48,11.43 21.35,11.1Z" }) });
  var AppleIcon2 = () => /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("svg", { className: "h-6 w-6", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("path", { fill: "currentColor", d: "M19.1,12.87c0-2,.83-3.6,2.2-4.71a.51.51,0,0,0,.1-.55,4.48,4.48,0,0,0-3.3-2.07c-1.3-.11-2.91.56-3.71,1.44a4.1,4.1,0,0,0-1.4,3.1,3.42,3.42,0,0,0,1,2.44,3.23,3.23,0,0,0,2.1,1.15.5.5,0,0,0,.4-.13,3.74,3.74,0,0,0,1.3-2.73m-4-6.41c.81-.88,1.62-1.4,2.81-1.46a4.34,4.34,0,0,1,1.61.29,3.8,3.8,0,0,0-3.1,3.12,3.94,3.94,0,0,0,1.4,2.83c.8.9,1.5,1.5,2.9,1.5a2.58,2.58,0,0,0,1.6-.51,4.5,4.5,0,0,1-3.7,2.57,4.8,4.8,0,0,1-4.2-2.4c-2.3-3.71-.8-8,1.4-10.38" }) });
  var SignUpScreen = () => {
    const navigate = useNavigate();
    const { signup } = useData();
    const [fullName, setFullName] = (0, import_react5.useState)("");
    const [username, setUsername] = (0, import_react5.useState)("");
    const [email, setEmail] = (0, import_react5.useState)("");
    const [password, setPassword] = (0, import_react5.useState)("");
    const [confirmPassword, setConfirmPassword] = (0, import_react5.useState)("");
    const [error, setError] = (0, import_react5.useState)(null);
    const [loading, setLoading] = (0, import_react5.useState)(false);
    const handleSignUp = async (e) => {
      e.preventDefault();
      if (password !== confirmPassword) {
        setError("Passwords do not match.");
        return;
      }
      if (password.length < 6) {
        setError("Password must be at least 6 characters long.");
        return;
      }
      if (username.length < 3) {
        setError("Username must be at least 3 characters long.");
        return;
      }
      setLoading(true);
      setError(null);
      try {
        await signup(email, password, fullName, username);
        alert("Sign up successful! Please check your email to confirm your account.");
        navigate("/login");
      } catch (err) {
        setError(err.message || "Failed to sign up.");
      } finally {
        setLoading(false);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(AuthLayout_default, { title: "Create a New Account", children: [
      /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("form", { className: "space-y-4", onSubmit: handleSignUp, children: [
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(InputField_default, { id: "fullName", label: "Full Name", type: "text", placeholder: "John Doe", required: true, value: fullName, onChange: (e) => setFullName(e.target.value) }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(InputField_default, { id: "username", label: "Username", type: "text", placeholder: "johndoe", required: true, value: username, onChange: (e) => setUsername(e.target.value) }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(InputField_default, { id: "email", label: "Email", type: "email", placeholder: "you@example.com", required: true, value: email, onChange: (e) => setEmail(e.target.value) }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(InputField_default, { id: "password", label: "Password", type: "password", placeholder: "\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022", required: true, value: password, onChange: (e) => setPassword(e.target.value) }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(InputField_default, { id: "confirm-password", label: "Confirm Password", type: "password", placeholder: "\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022", required: true, value: confirmPassword, onChange: (e) => setConfirmPassword(e.target.value) }),
        error && /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-[var(--color-functional-red)] text-xs text-center", children: error }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Button_default, { type: "submit", variant: "primary", disabled: loading, children: loading ? "Signing up..." : "Sign Up" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "my-4 flex items-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "flex-grow border-t border-[var(--color-border)]" }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("span", { className: "mx-4 text-xs text-[var(--color-text-secondary)]", children: "Or sign up with" }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "flex-grow border-t border-[var(--color-border)]" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "space-y-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(Button_default, { variant: "social", onClick: () => alert("Social login not implemented yet."), children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(GoogleIcon2, {}),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("span", { children: "Sign up with Google" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(Button_default, { variant: "social", onClick: () => alert("Social login not implemented yet."), children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(AppleIcon2, {}),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("span", { children: "Sign up with Apple" })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("p", { className: "mt-6 text-center text-xs text-[var(--color-text-secondary)]", children: [
        "Already have an account?",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Link, { to: "/login", className: "font-medium text-[var(--color-primary-500)] hover:opacity-80", children: "Log In" })
      ] })
    ] });
  };
  var SignUpScreen_default = SignUpScreen;

  // screens/ResetPasswordScreen.tsx
  var import_react6 = __toESM(require_react());
  var import_jsx_runtime8 = __toESM(require_jsx_runtime());
  var ResetPasswordScreen = () => {
    const navigate = useNavigate();
    const { resetPassword } = useData();
    const [email, setEmail] = (0, import_react6.useState)("");
    const [message, setMessage] = (0, import_react6.useState)("");
    const [error, setError] = (0, import_react6.useState)("");
    const [loading, setLoading] = (0, import_react6.useState)(false);
    const handleSendLink = async (e) => {
      e.preventDefault();
      setLoading(true);
      setError("");
      setMessage("");
      try {
        await resetPassword(email);
        setMessage("Password reset link sent! Please check your email.");
      } catch (err) {
        setError(err.message || "Failed to send reset link.");
      } finally {
        setLoading(false);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(AuthLayout_default, { title: "Reset Your Password", children: [
      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("p", { className: "text-center text-xs text-[var(--color-text-secondary)] -mt-4 mb-4", children: "Enter your email and we'll send you a link to get back into your account." }),
      /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("form", { className: "space-y-4", onSubmit: handleSendLink, children: [
        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(InputField_default, { id: "email", label: "Email", type: "email", placeholder: "you@example.com", required: true, value: email, onChange: (e) => setEmail(e.target.value) }),
        message && /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("p", { className: "text-green-600 dark:text-green-400 text-xs text-center", children: message }),
        error && /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("p", { className: "text-[var(--color-functional-red)] text-xs text-center", children: error }),
        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Button_default, { type: "submit", variant: "primary", disabled: loading, children: loading ? "Sending..." : "Send Reset Link" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("p", { className: "mt-6 text-center text-xs text-[var(--color-text-secondary)]", children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Link, { to: "/login", className: "font-medium text-[var(--color-primary-500)] hover:opacity-80", children: "Back to Login" }) })
    ] });
  };
  var ResetPasswordScreen_default = ResetPasswordScreen;

  // screens/onboarding/OnboardingWelcomeScreen.tsx
  var import_jsx_runtime9 = __toESM(require_jsx_runtime());
  var OnboardingWelcomeScreen = () => {
    return /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "h-full w-full flex flex-col items-center justify-between p-8 bg-[var(--color-background-primary)] text-[var(--color-text-primary)] text-center", children: [
      /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", {}),
      /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "flex justify-center mb-6 text-[var(--color-primary-500)]", children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Logo_default, { className: "h-20 w-20" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("h1", { className: "text-4xl font-bold text-[var(--color-text-primary)]", children: "TaskMaster" }),
        /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("p", { className: "mt-4 text-base text-[var(--color-text-secondary)] max-w-xs", children: "Organize your life, one task at a time." }),
        /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("img", { src: "https://i.ibb.co/L5QyL3h/Work-time-pana.png", alt: "Welcome illustration", className: "w-72 h-72 object-contain mx-auto mt-10" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "w-full", children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Link, { to: "/onboarding/sync", children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Button_default, { variant: "primary", children: "Get Started" }) }) })
    ] });
  };
  var OnboardingWelcomeScreen_default = OnboardingWelcomeScreen;

  // components/layouts/OnboardingLayout.tsx
  var import_jsx_runtime10 = __toESM(require_jsx_runtime());
  var OnboardingLayout = ({
    imageSrc,
    title,
    description,
    currentStep,
    totalSteps,
    nextPath,
    children
  }) => {
    const dots = Array.from({ length: totalSteps }, (_, i) => i + 1);
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "h-full w-full flex flex-col bg-[var(--color-background-primary)] text-[var(--color-text-primary)]", children: [
      /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)(
        "div",
        {
          className: "flex-shrink-0 px-6 pb-6 flex justify-between items-center",
          style: { paddingTop: `calc(1.5rem + env(safe-area-inset-top, 0px))` },
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "text-[var(--color-primary-500)]", children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Logo_default, { className: "h-8 w-8" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Link, { to: "/login", className: "font-semibold text-[var(--color-primary-500)] hover:opacity-80 text-sm", children: "Skip" })
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "flex-grow flex flex-col items-center justify-center p-8 text-center -mt-12", children: [
        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("img", { src: imageSrc, alt: "Onboarding illustration", className: "w-64 h-64 object-contain rounded-lg mb-8" }),
        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("h1", { className: "text-3xl font-bold text-[var(--color-text-primary)]", children: title }),
        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("p", { className: "mt-2 text-base text-[var(--color-text-secondary)] max-w-xs", children: description })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "flex-shrink-0 p-8", children: children ? children : /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)(import_jsx_runtime10.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "flex justify-center items-center gap-2 mb-6", children: dots.map((step) => /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
          "div",
          {
            className: `h-2 rounded-full transition-all duration-300 ${step === currentStep ? "w-6 bg-[var(--color-primary-500)]" : "w-2 bg-[var(--color-border)]"}`
          },
          step
        )) }),
        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Link, { to: nextPath, className: "w-full flex justify-center items-center gap-2 rounded-[var(--border-radius-md)] px-4 py-3 font-medium text-base transition-all duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-offset-2 bg-[var(--color-primary-500)] text-[var(--color-on-primary)] hover:opacity-90 focus:ring-[var(--color-primary-500)]", children: "Continue" })
      ] }) })
    ] });
  };
  var OnboardingLayout_default = OnboardingLayout;

  // screens/onboarding/OnboardingSyncScreen.tsx
  var import_jsx_runtime11 = __toESM(require_jsx_runtime());
  var OnboardingSyncScreen = () => {
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
      OnboardingLayout_default,
      {
        imageSrc: "https://i.ibb.co/RHY7sB1/Cloud-sync-pana.png",
        title: "Offline & Sync",
        description: "Work seamlessly offline. Your data automatically syncs across all devices when you're back online.",
        currentStep: 1,
        totalSteps: 4,
        nextPath: "/onboarding/organize"
      }
    );
  };
  var OnboardingSyncScreen_default = OnboardingSyncScreen;

  // screens/onboarding/OnboardingOrganizeScreen.tsx
  var import_jsx_runtime12 = __toESM(require_jsx_runtime());
  var OnboardingOrganizeScreen = () => {
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
      OnboardingLayout_default,
      {
        imageSrc: "https://i.ibb.co/wJtW7pW/Checklist-pana.png",
        title: "Intuitive Organization",
        description: "Manage tasks effortlessly with timeline views and simple list organization. Focus on what matters.",
        currentStep: 2,
        totalSteps: 4,
        nextPath: "/onboarding/journal"
      }
    );
  };
  var OnboardingOrganizeScreen_default = OnboardingOrganizeScreen;

  // screens/onboarding/OnboardingJournalScreen.tsx
  var import_jsx_runtime13 = __toESM(require_jsx_runtime());
  var OnboardingJournalScreen = () => {
    return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
      OnboardingLayout_default,
      {
        imageSrc: "https://i.ibb.co/L8T7WnS/Journaling-pana.png",
        title: "Moments Journal",
        description: "Capture your thoughts and memories. Our journaling feature helps you keep a visual log of your personal journey.",
        currentStep: 3,
        totalSteps: 4,
        nextPath: "/onboarding/permissions"
      }
    );
  };
  var OnboardingJournalScreen_default = OnboardingJournalScreen;

  // screens/onboarding/OnboardingPermissionsScreen.tsx
  var import_jsx_runtime14 = __toESM(require_jsx_runtime());
  var QuestionMarkIcon = () => /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("svg", { className: "w-6 h-6 text-[var(--color-text-secondary)]", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M9.879 7.519c1.171-1.025 3.071-1.025 4.242 0 1.172 1.025 1.172 2.687 0 3.712-.203.179-.43.326-.67.442-.745.361-1.45.999-1.45 1.827v.75M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9 5.25h.008v.008H12v-.008z" }) });
  var OnboardingPermissionsScreen = () => {
    const navigate = useNavigate();
    const handleAllow = async () => {
      await checkAndRequestCameraPermission();
      await checkAndRequestNotificationPermission();
      navigate("/signup");
    };
    const handleNotNow = () => {
      navigate("/signup");
    };
    const imageSrc = "https://i.ibb.co/68g6pXW/7062402.jpg";
    return /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "h-full w-full flex flex-col bg-[var(--color-background-primary)] text-[var(--color-text-primary)]", children: [
      /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)(
        "header",
        {
          className: "flex-shrink-0 p-6 flex justify-between items-center",
          style: { paddingTop: `calc(1.5rem + env(safe-area-inset-top, 0px))` },
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("h1", { className: "text-xl font-bold text-[var(--color-text-primary)]", children: "TaskMaster" }),
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("button", { "aria-label": "Help", children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(QuestionMarkIcon, {}) })
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("main", { className: "flex-grow flex flex-col items-center justify-center p-8 text-center -mt-12", children: [
        /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("div", { className: "bg-[var(--color-surface-container)] p-4 rounded-2xl card-shadow", children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("img", { src: imageSrc, alt: "Permissions illustration", className: "w-64 h-56 object-cover rounded-xl" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("h2", { className: "text-3xl font-bold text-[var(--color-text-primary)] mt-8", children: "We Need Your Permission" }),
        /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("p", { className: "mt-2 text-base text-[var(--color-text-secondary)] max-w-xs", children: "To enhance your experience, TaskMaster requires certain permissions. We respect your privacy and ensure your data is secure." })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)(
        "footer",
        {
          className: "flex-shrink-0 p-8 space-y-4",
          style: { paddingBottom: `calc(2rem + env(safe-area-inset-bottom, 0px))` },
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(Button_default, { variant: "primary", onClick: handleAllow, children: "Allow" }),
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(Button_default, { variant: "secondary", onClick: handleNotNow, children: "Not Now" }),
            /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "flex justify-center items-center gap-2 pt-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("div", { className: "w-2 h-2 bg-[var(--color-border)] rounded-full" }),
              /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("div", { className: "w-2 h-2 bg-[var(--color-border)] rounded-full" }),
              /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("div", { className: "w-2 h-2 bg-[var(--color-text-primary)] rounded-full" })
            ] })
          ]
        }
      )
    ] });
  };
  var OnboardingPermissionsScreen_default = OnboardingPermissionsScreen;

  // screens/TodayScreen.tsx
  var import_react21 = __toESM(require_react());

  // components/common/BottomNavBar.tsx
  var import_react10 = __toESM(require_react());

  // components/icons/Icons.tsx
  var import_jsx_runtime15 = __toESM(require_jsx_runtime());
  var RecommendIcon = () => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className: "w-5 h-5 text-blue-600", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" }) });
  var OverdueIcon = () => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className: "w-5 h-5 text-red-600", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" }) });
  var HamburgerMenuIcon = () => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className: "w-6 h-6", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M4 6h16M4 12h16m-7 6h7" }) });
  var ClockIcon = ({ className = "w-3 h-3 text-[var(--color-text-tertiary)]" }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className, fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" }) });
  var DurationIcon = ({ className }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("svg", { className, fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: [
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z" }),
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 3V1.5m3.75 1.75L17.25 2.25" })
  ] });
  var PlusIcon = () => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className: "w-8 h-8", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 4, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 6v12m6-6H6" }) });
  var TodayIcon = () => /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("svg", { className: "w-6 h-6", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: [
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("circle", { cx: "12", cy: "12", r: "3.5", stroke: "currentColor", fill: "none" }),
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", d: "M12 2v2M12 20v2M4.9 4.9l1.4 1.4M17.7 17.7l1.4 1.4M2 12h2M20 12h2M4.9 19.1l1.4-1.4M17.7 6.3l1.4-1.4" })
  ] });
  var ListsIcon = () => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className: "w-6 h-6", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M4 6h16M4 10h16M4 14h16M4 18h16" }) });
  var FocusHeaderIcon = ({ className = "w-7 h-7" }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("svg", { className, fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: "1.5", children: [
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M21 12a9 9 0 11-18 0 9 9 0 0118 0z" }),
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M7 12c0-2.21 2.239-4 5-4s5 1.79 5 4M7 16c0-2.21 2.239-4 5-4s5 1.79 5 4" })
  ] });
  var CalendarIcon = ({ className = "w-6 h-6" }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("svg", { className, fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: [
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("rect", { x: "3", y: "4", width: "18", height: "18", rx: "2", ry: "2" }),
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("line", { x1: "16", y1: "2", x2: "16", y2: "6" }),
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("line", { x1: "8", y1: "2", x2: "8", y2: "6" }),
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("line", { x1: "3", y1: "10", x2: "21", y2: "10" })
  ] });
  var TagIcon = ({ className = "w-6 h-6" }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("svg", { className, fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: [
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z" }),
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M6 6h.008v.008H6V6z" })
  ] });
  var MomentsIcon = () => /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("svg", { className: "w-6 h-6", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: [
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("rect", { x: "3", y: "3", width: "18", height: "18", rx: "2", ry: "2" }),
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("circle", { cx: "8.5", cy: "8.5", r: "1.5" }),
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { d: "M21 15l-5-5L5 21" })
  ] });
  var SettingsIcon = ({ className = "w-6 h-6" }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("svg", { className, fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: [
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" }),
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M15 12a3 3 0 11-6 0 3 3 0 016 0z" })
  ] });
  var SettingsHeaderIcon = ({ className = "w-7 h-7" }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className, fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M10.5 6h9.75M10.5 6a1.5 1.5 0 11-3 0m3 0a1.5 1.5 0 10-3 0M3.75 6H7.5m3 12h9.75m-9.75 0a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m-3.75 0H7.5m9-6h3.75m-3.75 0a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m-9.75 0h9.75" }) });
  var AddTaskMenuIcon = ({ className = "w-6 h-6 text-blue-600" }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className, fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" }) });
  var TrashIcon = () => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className: "w-5 h-5", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.134-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.067-2.09 1.02-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0" }) });
  var RegenerateIcon = () => /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("svg", { className: "w-5 h-5 text-blue-600", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { d: "M4.06189 15.9381C2.96189 14.2881 2.65189 12.2881 3.22189 10.4581C3.79189 8.62808 5.18189 7.11808 6.99189 6.29808C8.80189 5.47808 10.8819 5.44808 12.7219 6.21808C14.5619 6.98808 16.0319 8.49808 16.8219 10.3281", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { d: "M17 6.00008V10.0001H21", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { d: "M19.9381 8.06195C21.0381 9.71195 21.3481 11.712 20.7781 13.542C20.2081 15.372 18.8181 16.882 17.0081 17.702C15.1981 18.522 13.1181 18.552 11.2781 17.782C9.43811 17.012 7.96811 15.502 7.17811 13.672", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { d: "M7 18V14H3", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" })
  ] });
  var PlusCircleIcon = () => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className: "w-5 h-5", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 6v6m0 0v6m0-6h6m-6 0H6" }) });
  var SearchIcon = () => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className: "w-5 h-5 text-[var(--color-text-tertiary)]", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" }) });
  var PlusIconHeader = () => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className: "w-6 h-6", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 4, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 6v12m6-6H6" }) });
  var ChevronLeftIcon = () => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className: "w-6 h-6", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M15 19l-7-7 7-7" }) });
  var ChevronRightIcon = () => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className: "w-5 h-5 text-[var(--color-text-tertiary)]", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M9 5l7 7-7 7" }) });
  var ChevronRightElegantIcon = ({ className }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className, fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 3, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M9 6l6 6-6 6" }) });
  var ChevronDownIcon = ({ className }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className: `w-6 h-6 ${className}`, fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M19 9l-7 7-7-7" }) });
  var FilterIcon = () => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className: "w-5 h-5", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M3 4h18M7 12h10m-7 8h4" }) });
  var SortIcon = () => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className: "w-5 h-5", xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M3 7.5L7.5 3m0 0L12 7.5M7.5 3v13.5m13.5 0L16.5 21m0 0L12 16.5m4.5 4.5V7.5" }) });
  var EditIcon = () => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className: "w-5 h-5", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.5L13.196 5.232z" }) });
  var ShareIcon = () => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className: "w-5 h-5", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M4 12v8a2 2 0 002 2h12a2 2 0 002-2v-8m-4-6l-4-4m0 0L8 6m4-4v12" }) });
  var CheckIcon = ({ className = "w-6 h-6" }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className, fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2.5, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M5 13l4 4L19 7" }) });
  var FlagIcon = ({ className }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className: `w-4 h-4 ${className}`, viewBox: "0 0 20 20", fill: "currentColor", "aria-hidden": "true", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { fillRule: "evenodd", d: "M3 6a3 3 0 013-3h10a1 1 0 01.8 1.6L14.25 8l2.55 3.4A1 1 0 0116 13H6a1 1 0 00-1 1v3a1 1 0 11-2 0V6z", clipRule: "evenodd" }) });
  var StarIcon = ({ className }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className, viewBox: "0 0 20 20", fill: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { d: "M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" }) });
  var AddMomentMenuIcon = ({ className = "w-6 h-6 text-blue-600" }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("svg", { className, fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, strokeLinecap: "round", strokeLinejoin: "round", children: [
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { d: "M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7" }),
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("line", { x1: "16", x2: "22", y1: "5", y2: "5" }),
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("line", { x1: "19", x2: "19", y1: "2", y2: "8" }),
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("circle", { cx: "9", cy: "9", r: "2" }),
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { d: "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21" })
  ] });
  var AddListMenuIcon = ({ className = "w-6 h-6 text-blue-600" }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("svg", { className, fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, strokeLinecap: "round", strokeLinejoin: "round", children: [
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { d: "M11 12H3" }),
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { d: "M16 6H3" }),
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { d: "M16 18H3" }),
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { d: "M18 9v6" }),
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { d: "M21 12h-6" })
  ] });
  var UploadImageIcon = ({ className }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className, fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" }) });
  var CloseIcon = ({ className = "w-6 h-6" }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className, fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M6 18L18 6M6 6l12 12" }) });
  var SyncIcon = ({ className = "w-5 h-5 text-blue-600" }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("svg", { className, fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: [
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M17.65 6.35A7.958 7.958 0 0012 4c-4.42 0-8 3.58-8 8s3.58 8 8 8a7.954 7.954 0 006.72-3.58" }),
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M17 3v4h4" })
  ] });
  var DownloadIcon = ({ className = "w-5 h-5 text-blue-600" }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className, fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" }) });
  var UploadIcon = ({ className = "w-5 h-5" }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className, fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 1.5, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5m-13.5-9L12 3m0 0l4.5 4.5M12 3v13.5" }) });
  var RefreshSpinnerIcon = () => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className: "w-6 h-6 animate-ios-spinner text-[var(--color-text-secondary)]", viewBox: "0 0 50 50", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
    "circle",
    {
      className: "animate-ios-spinner-path",
      cx: "25",
      cy: "25",
      r: "20",
      fill: "none",
      stroke: "currentColor",
      strokeWidth: "4"
    }
  ) });
  var BellIcon = ({ className = "w-5 h-5" }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className, fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 1.5, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M14.857 17.082a23.848 23.848 0 005.454-1.31A8.967 8.967 0 0118 9.75v-.7V9A6 6 0 006 9v.75a8.967 8.967 0 01-2.312 6.022c1.733.64 3.56 1.085 5.455 1.31m5.714 0a24.255 24.255 0 01-5.714 0m5.714 0a3 3 0 11-5.714 0" }) });
  var PaletteIcon = ({ className = "w-5 h-5" }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("svg", { className, fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 1.5, children: [
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M4.098 19.902a3.75 3.75 0 005.304 0l6.401-6.402a3.75 3.75 0 00-5.304-5.304L4.098 14.6c-1.455 1.455-.432 4.02.998 5.304z" }),
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M15 12a3 3 0 11-6 0 3 3 0 016 0z" })
  ] });
  var ListCheckIcon = ({ className = "w-5 h-5" }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className, fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 1.5, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M8.25 6.75h12M8.25 12h12m-12 5.25h12M3.75 6.75h.007v.008H3.75V6.75zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zM3.75 12h.007v.008H3.75V12zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zM3.75 17.25h.007v.008H3.75v-.008zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z" }) });
  var LockIcon = ({ className }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className, viewBox: "0 0 20 20", fill: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { fillRule: "evenodd", d: "M10 1a4.5 4.5 0 00-4.5 4.5V9H5a2 2 0 00-2 2v6a2 2 0 002 2h10a2 2 0 002-2v-6a2 2 0 00-2-2h-.5V5.5A4.5 4.5 0 0010 1zm3 8V5.5a3 3 0 10-6 0V9h6z", clipRule: "evenodd" }) });
  var SoundOnIcon = ({ className = "w-6 h-6" }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className, fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 1.5, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M19.114 5.636a9 9 0 010 12.728M16.463 8.288a5.25 5.25 0 010 7.424M6.75 8.25l4.72-4.72a.75.75 0 011.28.53v15.88a.75.75 0 01-1.28.53l-4.72-4.72H4.51c-.88 0-1.704-.507-1.938-1.354A9.01 9.01 0 012.25 12c0-.83.112-1.633.322-2.396C2.806 8.756 3.63 8.25 4.51 8.25H6.75z" }) });
  var VibrateIcon = ({ className = "w-6 h-6" }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("svg", { className, fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 1.5, children: [
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M10.5 1.5H8.25A2.25 2.25 0 006 3.75v16.5a2.25 2.25 0 002.25 2.25h7.5A2.25 2.25 0 0018 20.25V3.75a2.25 2.25 0 00-2.25-2.25H13.5m-3 0V3h3V1.5m-3 0h3m-3 18h3m-3-9h3m-3-3h3" }),
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M2.25 8.25c.621 0 1.125.504 1.125 1.125v3.375c0 .621-.504 1.125-1.125 1.125" }),
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M21.75 8.25c-.621 0-1.125.504-1.125 1.125v3.375c0 .621.504 1.125 1.125 1.125" })
  ] });
  var InfoIcon = ({ className = "w-5 h-5" }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className, fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M11.25 11.25l.041-.02a.75.75 0 011.063.852l-.708 2.836a.75.75 0 001.063.853l.041-.021M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9-3.75h.008v.008H12V8.25z" }) });
  var SparklesIcon = ({ className = "w-5 h-5" }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className, fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 1.5, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09zM18.259 8.715L18 9.75l-.259-1.035a3.375 3.375 0 00-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 002.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 002.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 00-2.456 2.456zM16.898 20.562L16.25 22.5l-.648-1.938a2.25 2.25 0 00-1.49-1.49L12.188 18l1.938-.648a2.25 2.25 0 001.49-1.49l.648-1.938 1.938.648a2.25 2.25 0 001.49 1.49l.648 1.938-1.938.648a2.25 2.25 0 00-1.49 1.49z" }) });
  var SendIcon = ({ className = "w-6 h-6" }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className, fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 19l9 2-9-18-9 18 9-2zm0 0v-8" }) });
  var MicrophoneIcon = ({ className = "w-6 h-6" }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className, fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 18.75a6 6 0 006-6v-1.5m-6 7.5a6 6 0 01-6-6v-1.5m6 7.5v3.75m-3.75 0h7.5M12 15.75a3 3 0 01-3-3V4.5a3 3 0 016 0v8.25a3 3 0 01-3 3z" }) });
  var DeleteButtonIcon = () => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className: "w-5 h-5", viewBox: "0 0 20 20", fill: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { fillRule: "evenodd", d: "M8.75 1A2.75 2.75 0 006 3.75v.443c-.795.077-1.58.22-2.365.468a.75.75 0 10.23 1.482l.149-.022.841 10.518A2.75 2.75 0 007.596 19h4.807a2.75 2.75 0 002.742-2.53l.841-10.52.149.023a.75.75 0 00.23-1.482A41.03 41.03 0 0014 4.193V3.75A2.75 2.75 0 0011.25 1h-2.5zM10 4c.84 0 1.673.025 2.5.075V3.75c0-.69-.56-1.25-1.25-1.25h-2.5c-.69 0-1.25.56-1.25 1.25v.325C8.327 4.025 9.16 4 10 4zM8.58 7.72a.75.75 0 00-1.5.06l.3 7.5a.75.75 0 101.5-.06l-.3-7.5zm4.34.06a.75.75 0 10-1.5-.06l-.3 7.5a.75.75 0 101.5.06l.3-7.5z", clipRule: "evenodd" }) });
  var EditButtonIcon = () => /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("svg", { className: "w-5 h-5", viewBox: "0 0 20 20", fill: "currentColor", children: [
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { d: "M5.433 13.917l1.262-3.155A4 4 0 017.58 9.42l6.92-6.918a2.121 2.121 0 013 3l-6.92 6.918c-.383.383-.84.685-1.343.886l-3.154 1.262a.5.5 0 01-.65-.65z" }),
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { d: "M3.5 5.75c0-.69.56-1.25 1.25-1.25H10A.75.75 0 0010 3H4.75A2.75 2.75 0 002 5.75v9.5A2.75 2.75 0 004.75 18h9.5A2.75 2.75 0 0017 15.25V10a.75.75 0 00-1.5 0v5.25c0 .69-.56 1.25-1.25 1.25h-9.5c-.69 0-1.25-.56-1.25-1.25v-9.5z" })
  ] });
  var GoogleCalendarIcon = ({ className = "w-5 h-5" }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("svg", { className, viewBox: "0 0 24 24", fill: "none", children: [
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { d: "M20 5H4C3.44772 5 3 5.44772 3 6V20C3 20.5523 3.44772 21 4 21H20C20.5523 21 21 20.5523 21 20V6C21 5.44772 20.5523 5 20 5Z", fill: "#4285F4" }),
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { d: "M16 3V1H14V3H10V1H8V3H4C3.44772 3 3 3.44772 3 4V7H21V4C21 3.44772 20.5523 3 20 3H16Z", fill: "#1A73E8" }),
    /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("text", { x: "12", y: "16", fontFamily: "sans-serif", fontSize: "9", fill: "white", textAnchor: "middle", fontWeight: "bold", children: "31" })
  ] });
  var OutlookCalendarIcon = ({ className = "w-5 h-5" }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("svg", { className, viewBox: "0 0 24 24", fill: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { d: "M21 5H3c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm-1 14H4V9h16v10zM17 3h-2v3h2V3zm-4 0h-2v3h2V3zm-4 0H7v3h2V3z" }) });

  // screens/AddMomentScreen.tsx
  var import_react7 = __toESM(require_react());
  var import_jsx_runtime16 = __toESM(require_jsx_runtime());
  var CloseIcon2 = ({ className }) => /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("svg", { className: `w-6 h-6 ${className}`, fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2.5, children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M6 18L18 6M6 6l12 12" }) });
  var ImageCropperModal = ({ imageSrc, onCrop, onCancel }) => {
    const [image, setImage] = (0, import_react7.useState)(null);
    const [position, setPosition] = (0, import_react7.useState)({ x: 0, y: 0 });
    const [zoom, setZoom] = (0, import_react7.useState)(1);
    const [minZoom, setMinZoom] = (0, import_react7.useState)(1);
    const viewportRef = (0, import_react7.useRef)(null);
    const panStartRef = (0, import_react7.useRef)({ x: 0, y: 0, imageX: 0, imageY: 0 });
    const activePointersRef = (0, import_react7.useRef)([]);
    const pinchStartDistanceRef = (0, import_react7.useRef)(0);
    const pinchStartZoomRef = (0, import_react7.useRef)(1);
    (0, import_react7.useEffect)(() => {
      const img = new Image();
      img.src = imageSrc;
      img.crossOrigin = "anonymous";
      const viewportEl = viewportRef.current;
      if (!viewportEl) return;
      let isImageLoaded = false;
      const calculateAndSetInitialState = () => {
        if (!isImageLoaded || !viewportRef.current) return;
        const { clientWidth: viewportWidth, clientHeight: viewportHeight } = viewportRef.current;
        if (viewportWidth > 0 && viewportHeight > 0 && img.naturalWidth > 0) {
          const scaleX = viewportWidth / img.naturalWidth;
          const scaleY = viewportHeight / img.naturalHeight;
          const initialZoom = Math.max(scaleX, scaleY);
          setZoom(initialZoom);
          setMinZoom(initialZoom);
          setPosition({ x: 0, y: 0 });
        }
      };
      img.onload = () => {
        setImage(img);
        isImageLoaded = true;
        calculateAndSetInitialState();
      };
      const observer = new ResizeObserver(calculateAndSetInitialState);
      observer.observe(viewportEl);
      return () => {
        img.onload = null;
        observer.disconnect();
      };
    }, [imageSrc]);
    const getConstrainedPosition = (0, import_react7.useCallback)((x, y, currentZoom) => {
      if (!image || !viewportRef.current) return { x: 0, y: 0 };
      const { clientWidth: viewportWidth, clientHeight: viewportHeight } = viewportRef.current;
      const imageWidth = image.naturalWidth * currentZoom;
      const imageHeight = image.naturalHeight * currentZoom;
      const maxX = Math.max(0, (imageWidth - viewportWidth) / 2);
      const maxY = Math.max(0, (imageHeight - viewportHeight) / 2);
      const constrainedX = Math.max(-maxX, Math.min(maxX, x));
      const constrainedY = Math.max(-maxY, Math.min(maxY, y));
      return { x: constrainedX, y: constrainedY };
    }, [image]);
    (0, import_react7.useEffect)(() => {
      const { x, y } = getConstrainedPosition(position.x, position.y, zoom);
      if (x !== position.x || y !== position.y) setPosition({ x, y });
    }, [zoom, position.x, position.y, getConstrainedPosition]);
    const getDistance = (p1, p2) => Math.sqrt(Math.pow(p2.clientX - p1.clientX, 2) + Math.pow(p2.clientY - p1.clientY, 2));
    const onPointerDown = (e) => {
      e.preventDefault();
      e.target.setPointerCapture(e.pointerId);
      activePointersRef.current.push(e.nativeEvent);
      if (activePointersRef.current.length === 1) {
        panStartRef.current = { x: e.clientX, y: e.clientY, imageX: position.x, imageY: position.y };
      } else if (activePointersRef.current.length === 2) {
        pinchStartDistanceRef.current = getDistance(activePointersRef.current[0], activePointersRef.current[1]);
        pinchStartZoomRef.current = zoom;
      }
    };
    const onPointerMove = (e) => {
      e.preventDefault();
      const index2 = activePointersRef.current.findIndex((p) => p.pointerId === e.pointerId);
      if (index2 === -1) return;
      activePointersRef.current[index2] = e.nativeEvent;
      if (activePointersRef.current.length === 1) {
        const dx = e.clientX - panStartRef.current.x;
        const dy = e.clientY - panStartRef.current.y;
        setPosition(getConstrainedPosition(panStartRef.current.imageX + dx, panStartRef.current.imageY + dy, zoom));
      } else if (activePointersRef.current.length === 2) {
        const newDistance = getDistance(activePointersRef.current[0], activePointersRef.current[1]);
        const scale = newDistance / pinchStartDistanceRef.current;
        setZoom(Math.max(minZoom, Math.min(minZoom * 4, pinchStartZoomRef.current * scale)));
      }
    };
    const onPointerUp = (e) => {
      e.preventDefault();
      e.target.releasePointerCapture(e.pointerId);
      activePointersRef.current = activePointersRef.current.filter((p) => p.pointerId !== e.pointerId);
      if (activePointersRef.current.length === 1) {
        const p = activePointersRef.current[0];
        panStartRef.current = { x: p.clientX, y: p.clientY, imageX: position.x, imageY: position.y };
      }
    };
    const handleCrop = () => {
      if (!image || !viewportRef.current) return;
      const canvas = document.createElement("canvas");
      const ctx = canvas.getContext("2d");
      if (!ctx) return;
      const { clientWidth: vw, clientHeight: vh } = viewportRef.current;
      canvas.width = 600;
      canvas.height = 450;
      const sWidth = vw / zoom, sHeight = vh / zoom;
      const sx = (image.naturalWidth - sWidth) / 2 - position.x / zoom;
      const sy = (image.naturalHeight - sHeight) / 2 - position.y / zoom;
      ctx.drawImage(image, sx, sy, sWidth, sHeight, 0, 0, 600, 450);
      onCrop(canvas.toDataURL("image/jpeg", 0.8));
    };
    return /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "fixed inset-0 z-[60] bg-black flex flex-col animate-page-fade-in", children: [
      /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("header", { className: "flex-shrink-0 flex justify-between items-center p-4 text-white", style: { paddingTop: `calc(1rem + env(safe-area-inset-top))` }, children: [
        /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("button", { onClick: onCancel, className: "text-lg font-medium", children: "Cancel" }),
        /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("h2", { className: "font-bold", children: "Crop Image" }),
        /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("button", { onClick: handleCrop, className: "text-lg font-bold text-blue-400", children: "Done" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("main", { className: "flex-grow flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { ref: viewportRef, className: "relative w-full aspect-[4/3] overflow-hidden bg-gray-900 rounded-lg touch-none", onPointerDown, onPointerMove, onPointerUp, onPointerCancel: onPointerUp, children: image && /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("img", { src: image.src, alt: "Crop preview", className: "absolute top-1/2 left-1/2", style: { transformOrigin: "center center", transform: `translate(-50%, -50%) translate(${position.x}px, ${position.y}px) scale(${zoom})`, willChange: "transform" } }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("footer", { className: "flex-shrink-0 p-4", style: { paddingBottom: `calc(1rem + env(safe-area-inset-bottom))` }, children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("input", { type: "range", min: minZoom, max: minZoom * 4, step: "0.01", value: zoom, onChange: (e) => setZoom(parseFloat(e.target.value)), className: "w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer" }) })
    ] });
  };
  var AddMomentScreen = ({ isOpen, onClose, onAddMoment, initialImage }) => {
    const { tags: allAvailableTags, addTag } = useData();
    const [title, setTitle] = (0, import_react7.useState)("");
    const [notes, setNotes] = (0, import_react7.useState)("");
    const [selectedTags, setSelectedTags] = (0, import_react7.useState)([]);
    const [newTag, setNewTag] = (0, import_react7.useState)("");
    const [imagePreview, setImagePreview] = (0, import_react7.useState)(null);
    const [imageToCrop, setImageToCrop] = (0, import_react7.useState)(null);
    const [isImageSourceSelectorOpen, setIsImageSourceSelectorOpen] = (0, import_react7.useState)(false);
    const fileInputRef = (0, import_react7.useRef)(null);
    const [loading, setLoading] = (0, import_react7.useState)(false);
    const [error, setError] = (0, import_react7.useState)(null);
    const keyboardHeight = useKeyboardHeight();
    const prevIsOpen = (0, import_react7.useRef)(isOpen);
    (0, import_react7.useEffect)(() => {
      if (isOpen && !prevIsOpen.current) {
        setTitle("");
        setNotes("");
        setSelectedTags([]);
        setNewTag("");
        setImagePreview(null);
        setImageToCrop(initialImage || null);
        setIsImageSourceSelectorOpen(!initialImage);
        setLoading(false);
        setError(null);
      }
      prevIsOpen.current = isOpen;
    }, [isOpen, initialImage]);
    const handleSave = async () => {
      if (!title.trim()) {
        setError("Title is required.");
        return;
      }
      if (!imagePreview) {
        setError("An image is required.");
        return;
      }
      setLoading(true);
      setError(null);
      try {
        await onAddMoment({
          title,
          notes,
          tags: selectedTags,
          imageUrl: imagePreview
        });
        onClose();
      } catch (err) {
        setError(err.message || "Failed to add moment.");
      } finally {
        setLoading(false);
      }
    };
    const handleAddTag = () => {
      const trimmedTag = newTag.trim();
      if (trimmedTag && !selectedTags.find((t) => t.toLowerCase() === trimmedTag.toLowerCase())) {
        setSelectedTags([...selectedTags, trimmedTag]);
        addTag(trimmedTag);
        setNewTag("");
      }
    };
    const handleToggleTag = (tagToToggle) => {
      setSelectedTags(
        (current) => current.includes(tagToToggle) ? current.filter((t) => t !== tagToToggle) : [...current, tagToToggle]
      );
    };
    const handleTakePhoto = async () => {
      const photoDataUrl = await takePhotoWithCapacitor();
      if (photoDataUrl) setImageToCrop(photoDataUrl);
      setIsImageSourceSelectorOpen(false);
    };
    const handleChooseFromLibrary = () => {
      if (fileInputRef.current) {
        fileInputRef.current.removeAttribute("capture");
        fileInputRef.current.click();
      }
      setIsImageSourceSelectorOpen(false);
    };
    const handleFileChange = (event) => {
      const file = event.target.files?.[0];
      if (file) {
        const reader = new FileReader();
        reader.onloadend = () => setImageToCrop(reader.result);
        reader.readAsDataURL(file);
      }
      if (event.target) event.target.value = "";
    };
    const handleCropComplete = (croppedImageUrl) => {
      setImagePreview(croppedImageUrl);
      setImageToCrop(null);
    };
    const handleCropCancel = () => {
      setImageToCrop(null);
      if (!initialImage && !imagePreview) {
        onClose();
      }
    };
    const handleRemoveImage = () => {
      setImagePreview(null);
      if (fileInputRef.current) fileInputRef.current.value = "";
    };
    const unselectedTags = allAvailableTags.filter((t) => !selectedTags.includes(t));
    return /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(import_jsx_runtime16.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: `fixed inset-0 z-50 flex items-end transition-all duration-300 ${isOpen ? "visible" : "invisible"}`, children: [
        /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: `fixed inset-0 bg-black/40 transition-opacity duration-300 ${isOpen ? "opacity-100" : "opacity-0"}`, onClick: onClose, "aria-hidden": "true" }),
        /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: `w-full bg-white rounded-t-3xl shadow-2xl transition-transform duration-300 ease-out transform ${isOpen ? "translate-y-0" : "translate-y-full"}`, role: "dialog", "aria-modal": "true", "aria-labelledby": "add-moment-title", children: [
          /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("header", { className: "pt-3 px-4 pb-3 border-b border-gray-200", style: { paddingTop: `calc(0.75rem + env(safe-area-inset-top))` }, children: [
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "w-8 h-1 bg-gray-200 rounded-full mx-auto mb-3" }),
            /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex justify-between items-center h-8", children: [
              /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("button", { onClick: onClose, className: "p-1 text-gray-600 hover:text-gray-900", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(CloseIcon2, {}) }),
              /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("h2", { id: "add-moment-title", className: "text-lg font-bold text-gray-900", children: "Add Moment" }),
              /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("button", { onClick: handleSave, disabled: loading, className: "p-1 text-blue-600 hover:text-blue-800 disabled:opacity-50", children: loading ? /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(RefreshSpinnerIcon, {}) : /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(CheckIcon, {}) })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(
            "div",
            {
              className: "p-4 space-y-4 overflow-y-auto max-h-[75vh] pb-8 bg-gray-50",
              style: { paddingBottom: `calc(2rem + env(safe-area-inset-bottom) + ${keyboardHeight}px)` },
              children: [
                error && /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("p", { className: "text-red-500 text-sm text-center -mt-2 mb-2 px-4 bg-red-50 py-2 rounded-lg", children: error }),
                /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "rounded-xl px-4 py-1 bg-white", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("input", { type: "text", placeholder: "Title", value: title, onChange: (e) => setTitle(e.target.value), className: "w-full bg-transparent py-3 border-b border-gray-200 focus:outline-none text-base text-gray-900 placeholder-gray-400" }),
                  /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("textarea", { rows: 5, placeholder: "Notes", value: notes, onChange: (e) => setNotes(e.target.value), className: "w-full bg-transparent py-3 focus:outline-none resize-none text-base text-gray-900 placeholder-gray-400" })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "rounded-xl p-4 bg-white", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("label", { className: "block text-sm font-medium text-gray-700 mb-3", children: "Tags" }),
                  /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "flex flex-wrap gap-2", children: selectedTags.map((tag) => /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("button", { onClick: () => handleToggleTag(tag), className: "flex items-center gap-1.5 px-3 py-1.5 rounded-full text-sm font-medium bg-purple-100 text-purple-700", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { children: tag }),
                    /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("svg", { className: "w-3.5 h-3.5", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2.5, d: "M6 18L18 6M6 6l12 12" }) })
                  ] }, tag)) }),
                  unselectedTags.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "mt-3 pt-3 border-t border-gray-100", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("p", { className: "text-xs font-medium text-gray-500 mb-2", children: "Suggestions" }),
                    /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "flex flex-wrap gap-2", children: unselectedTags.map((tag) => /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("button", { onClick: () => handleToggleTag(tag), className: "px-3 py-1.5 rounded-full text-sm font-medium bg-gray-100 text-gray-600 hover:bg-gray-200", children: [
                      "+ ",
                      tag
                    ] }, tag)) })
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-center justify-between mt-3 pt-3 border-t border-gray-100", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
                      "input",
                      {
                        type: "text",
                        placeholder: "Add new tag...",
                        value: newTag,
                        onChange: (e) => setNewTag(e.target.value),
                        onKeyDown: (e) => e.key === "Enter" && (e.preventDefault(), handleAddTag()),
                        className: "w-full bg-transparent focus:outline-none text-gray-600 placeholder-gray-500 text-base"
                      }
                    ),
                    /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("button", { onClick: handleAddTag, className: "text-blue-500 p-1", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(PlusIconHeader, {}) })
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "rounded-xl bg-white p-4", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Image" }),
                  /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("input", { type: "file", ref: fileInputRef, onChange: handleFileChange, accept: "image/*", className: "hidden" }),
                  imagePreview ? /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "relative group", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("img", { src: imagePreview, alt: "Preview", className: "w-full aspect-[4/3] object-cover rounded-xl shadow-sm" }),
                    /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "absolute inset-0 bg-black/20 rounded-xl flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("button", { type: "button", onClick: () => setIsImageSourceSelectorOpen(true), className: "bg-white/90 text-gray-800 font-semibold py-2 px-4 rounded-lg shadow-md hover:bg-white transition-all text-sm", children: "Change Image" }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("button", { type: "button", onClick: handleRemoveImage, className: "absolute top-2 right-2 w-7 h-7 bg-black/40 text-white rounded-full flex items-center justify-center hover:bg-black/60 transition-colors backdrop-blur-sm", "aria-label": "Remove image", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(CloseIcon2, { className: "w-4 h-4" }) })
                  ] }) : /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("button", { type: "button", onClick: () => setIsImageSourceSelectorOpen(true), className: "w-full flex flex-col items-center justify-center gap-2 bg-gray-100 text-gray-500 font-medium py-10 rounded-xl hover:bg-gray-200 border-2 border-dashed border-gray-300 hover:border-gray-400 transition-colors", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(UploadImageIcon, { className: "w-8 h-8 text-gray-400" }),
                    /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { children: "Add Image" })
                  ] })
                ] })
              ]
            }
          )
        ] })
      ] }),
      imageToCrop && /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(ImageCropperModal, { imageSrc: imageToCrop, onCrop: handleCropComplete, onCancel: handleCropCancel }),
      /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: `fixed inset-0 z-[60] flex items-end transition-all duration-300 ${isImageSourceSelectorOpen ? "visible" : "invisible"}`, children: [
        /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: `absolute inset-0 bg-black/40 transition-opacity duration-300 ${isImageSourceSelectorOpen ? "opacity-100" : "opacity-0"}`, onClick: () => setIsImageSourceSelectorOpen(false), "aria-hidden": "true" }),
        /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: `w-full bg-gray-100 rounded-t-2xl shadow-2xl transition-transform duration-300 ease-out transform ${isImageSourceSelectorOpen ? "translate-y-0" : "translate-y-full"} p-4 pb-5 space-y-2`, style: { paddingBottom: `calc(1.25rem + env(safe-area-inset-bottom))` }, children: [
          /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "space-y-2 bg-white/80 backdrop-blur-sm rounded-xl", children: [
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("button", { onClick: handleTakePhoto, className: "w-full text-center p-3 text-lg text-blue-500 border-b border-gray-200", children: "Take Photo" }),
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("button", { onClick: handleChooseFromLibrary, className: "w-full text-center p-3 text-lg text-blue-500", children: "Choose from Library" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("button", { onClick: () => setIsImageSourceSelectorOpen(false), className: "w-full text-center p-3 text-lg text-blue-500 font-bold bg-white/80 backdrop-blur-sm rounded-xl", children: "Cancel" })
        ] })
      ] })
    ] });
  };

  // screens/AddTaskWithAIScreen.tsx
  var import_react8 = __toESM(require_react());
  var import_jsx_runtime17 = __toESM(require_jsx_runtime());
  var AddTaskWithAIScreen = ({ isOpen, onClose, initialPrompt }) => {
    const { addTask, lists } = useData();
    const [prompt, setPrompt] = (0, import_react8.useState)("");
    const [isLoading, setIsLoading] = (0, import_react8.useState)(false);
    const [error, setError] = (0, import_react8.useState)(null);
    const textareaRef = (0, import_react8.useRef)(null);
    const keyboardHeight = useKeyboardHeight();
    const listNames = (0, import_react8.useMemo)(() => lists.map((l) => l.name), [lists]);
    const listColorMap = (0, import_react8.useMemo)(() => new Map(lists.map((l) => [l.name, l.color])), [lists]);
    (0, import_react8.useEffect)(() => {
      if (isOpen) {
        setPrompt(initialPrompt || "");
        setError(null);
        setIsLoading(false);
        setTimeout(() => {
          textareaRef.current?.focus();
          if (initialPrompt) {
            textareaRef.current?.setSelectionRange(initialPrompt.length, initialPrompt.length);
          }
        }, 300);
      }
    }, [isOpen, initialPrompt]);
    (0, import_react8.useEffect)(() => {
      if (isOpen && initialPrompt && prompt === initialPrompt) {
        handleGenerateTask();
      }
    }, [isOpen, initialPrompt, prompt]);
    const handleGenerateTask = async (e) => {
      e?.preventDefault();
      if (!prompt.trim() || isLoading) return;
      setIsLoading(true);
      setError(null);
      try {
        const { data: parsed, error: error2 } = await supabase.functions.invoke("generate-task", {
          body: { prompt, listNames }
        });
        if (error2) throw error2;
        if (parsed.error) throw new Error(parsed.error);
        const today = (/* @__PURE__ */ new Date()).toISOString().split("T")[0];
        const chosenList = listNames.includes(parsed.list) ? parsed.list : listNames[0] || "Personal";
        const isDueToday = parsed.dueDate === today;
        const isStartingToday = parsed.startTime && (!parsed.dueDate || parsed.dueDate === today);
        const taskForContext = {
          title: parsed.title,
          category: chosenList,
          important: parsed.isImportant || false,
          today: parsed.isToday || isDueToday || isStartingToday,
          type: parsed.startTime ? "Fixed" : "Flexible",
          dueDate: parsed.dueDate || void 0,
          startDate: parsed.startTime ? parsed.dueDate || today : void 0,
          startTime: parsed.startTime || void 0,
          time: parsed.startTime ? parsed.startTime : "--:--",
          duration: parsed.duration || void 0,
          notes: parsed.notes || void 0,
          subtasks: [],
          color: listColorMap.get(chosenList) || "gray"
        };
        await addTask(taskForContext);
        onClose();
      } catch (err) {
        console.error("Supabase function invocation failed:", err);
        setError(`Sorry, I couldn't understand that. Please try rephrasing your task. (Error: ${err.message})`);
      } finally {
        setIsLoading(false);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(
      "div",
      {
        className: `fixed inset-0 z-50 flex items-end transition-all duration-300 ${isOpen ? "visible" : "invisible"}`,
        style: { paddingBottom: `${keyboardHeight}px` },
        role: "dialog",
        "aria-modal": "true",
        "aria-labelledby": "ai-task-title",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
            "div",
            {
              className: "fixed inset-0 bg-gray-900/50 backdrop-blur-sm transition-opacity duration-300",
              onClick: onClose,
              "aria-hidden": "true"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: `w-full bg-white dark:bg-gray-800 rounded-t-2xl shadow-2xl transition-transform duration-300 ease-out transform ${isOpen ? "translate-y-0" : "translate-y-full"}`, children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "p-4 flex flex-col", style: { paddingBottom: `calc(1rem + env(safe-area-inset-bottom))` }, children: [
            /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("header", { className: "flex-shrink-0 flex items-center justify-between pb-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center gap-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(SparklesIcon, { className: "w-5 h-5 text-purple-500 dark:text-purple-400" }),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("h2", { id: "ai-task-title", className: "text-lg font-bold text-gray-900 dark:text-white", children: "Create Task with AI" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("button", { onClick: onClose, className: "p-1 text-gray-400 hover:text-gray-800 dark:hover:text-white", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CloseIcon, {}) })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("main", { className: "flex-grow flex items-center justify-center min-h-[6rem]", children: isLoading ? /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex flex-col items-center gap-3 text-gray-500 dark:text-gray-300", children: [
              /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(RefreshSpinnerIcon, {}),
              /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("span", { children: "Creating task..." })
            ] }) : error ? /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("p", { className: "text-center text-red-500 dark:text-red-400 px-4", children: error }) : /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("p", { className: "text-center text-gray-500 dark:text-gray-400 px-4", children: "Describe your task in plain language." }) }),
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("footer", { className: "flex-shrink-0 mt-4", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("form", { onSubmit: handleGenerateTask, children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "relative", children: [
              /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
                "textarea",
                {
                  ref: textareaRef,
                  value: prompt,
                  onChange: (e) => setPrompt(e.target.value),
                  onKeyDown: (e) => {
                    if (e.key === "Enter" && !e.shiftKey) {
                      e.preventDefault();
                      handleGenerateTask(e);
                    }
                  },
                  disabled: isLoading,
                  placeholder: "Type your task here...",
                  rows: 1,
                  className: "w-full bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 rounded-xl py-3 pl-4 pr-14 resize-none focus:outline-none focus:ring-2 focus:ring-purple-500 transition"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
                "button",
                {
                  type: "submit",
                  disabled: !prompt.trim() || isLoading,
                  className: "absolute right-2 top-1/2 -translate-y-1/2 w-10 h-10 bg-purple-600 text-white rounded-full flex items-center justify-center hover:bg-purple-700 disabled:bg-gray-600 disabled:cursor-not-allowed transition-colors",
                  "aria-label": "Generate Task",
                  children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(SendIcon, { className: "w-5 h-5" })
                }
              )
            ] }) }) })
          ] }) })
        ]
      }
    );
  };
  var AddTaskWithAIScreen_default = AddTaskWithAIScreen;

  // screens/AddListScreen.tsx
  var import_react9 = __toESM(require_react());
  var import_jsx_runtime18 = __toESM(require_jsx_runtime());
  var colors = ["green", "blue", "pink", "purple", "yellow", "red", "orange", "teal", "cyan", "indigo", "lime", "amber", "rose", "fuchsia"];
  var icons = ["\u{1F6D2}", "\u{1F4BC}", "\u{1F4AA}", "\u2708\uFE0F", "\u{1F381}", "\u{1F4A1}", "\u{1F3E0}", "\u2764\uFE0F", "\u{1F389}", "\u{1F4DA}", "\u{1F4B0}", "\u{1F3B5}", "\u{1F4BB}", "\u{1F331}", "\u{1F3A8}", "\u{1F37D}\uFE0F", "\u{1F3AC}", "\u{1F3C0}", "\u{1F43E}", "\u{1F48A}", "\u{1F6E0}\uFE0F", "\u{1F4AC}", "\u2728", "\u{1F4CD}"];
  var AddListScreen = ({ isOpen, onClose, onAddList }) => {
    const [name, setName] = (0, import_react9.useState)("");
    const [selectedIcon, setSelectedIcon] = (0, import_react9.useState)("\u{1F6D2}");
    const [selectedColor, setSelectedColor] = (0, import_react9.useState)("green");
    const [loading, setLoading] = (0, import_react9.useState)(false);
    const [error, setError] = (0, import_react9.useState)(null);
    (0, import_react9.useEffect)(() => {
      if (isOpen) {
        setName("");
        setSelectedIcon("\u{1F6D2}");
        setSelectedColor("green");
        setLoading(false);
        setError(null);
      }
    }, [isOpen]);
    const handleSubmit = async (e) => {
      e.preventDefault();
      if (!name.trim()) {
        setError("List name is required.");
        return;
      }
      setLoading(true);
      setError(null);
      try {
        await onAddList({
          name,
          icon: selectedIcon,
          color: selectedColor
        });
        onClose();
      } catch (err) {
        setError(err.message || "Failed to create list.");
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    const CloseIcon5 = () => /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("svg", { className: "w-5 h-5", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M6 18L18 6M6 6l12 12" }) });
    const colorVariants6 = {
      green: { bg: "bg-green-500", ring: "ring-green-500" },
      blue: { bg: "bg-blue-500", ring: "ring-blue-500" },
      pink: { bg: "bg-pink-500", ring: "ring-pink-500" },
      purple: { bg: "bg-purple-500", ring: "ring-purple-500" },
      yellow: { bg: "bg-yellow-500", ring: "ring-yellow-500" },
      red: { bg: "bg-red-500", ring: "ring-red-500" },
      orange: { bg: "bg-orange-500", ring: "ring-orange-500" },
      teal: { bg: "bg-teal-500", ring: "ring-teal-500" },
      cyan: { bg: "bg-cyan-500", ring: "ring-cyan-500" },
      indigo: { bg: "bg-indigo-500", ring: "ring-indigo-500" },
      lime: { bg: "bg-lime-500", ring: "ring-lime-500" },
      amber: { bg: "bg-amber-500", ring: "ring-amber-500" },
      rose: { bg: "bg-rose-500", ring: "ring-rose-500" },
      fuchsia: { bg: "bg-fuchsia-500", ring: "ring-fuchsia-500" }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: `fixed inset-0 z-50 flex items-end transition-all duration-300 ${isOpen ? "visible" : "invisible"}`, children: [
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
        "div",
        {
          className: `fixed inset-0 bg-black/40 transition-opacity duration-300 ${isOpen ? "opacity-100" : "opacity-0"}`,
          onClick: onClose,
          "aria-hidden": "true"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(
        "div",
        {
          className: `w-full bg-gray-50 rounded-t-3xl shadow-2xl transition-transform duration-300 ease-out transform ${isOpen ? "translate-y-0" : "translate-y-full"}`,
          role: "dialog",
          "aria-modal": "true",
          "aria-labelledby": "add-list-title",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("header", { className: "pt-3 px-4 pb-3 border-b border-gray-200 bg-white rounded-t-3xl sticky top-0 z-10", children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "w-8 h-1 bg-gray-300 rounded-full mx-auto mb-3" }),
              /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex justify-between items-center h-8", children: [
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("button", { onClick: onClose, className: "p-1 text-gray-500 hover:text-gray-800 rounded-full hover:bg-gray-100", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(CloseIcon5, {}) }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("h2", { id: "add-list-title", className: "text-base font-bold text-gray-900", children: "Add New List" }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("button", { type: "submit", form: "add-list-form", disabled: loading, className: "p-1 text-blue-600 hover:text-blue-800 rounded-full hover:bg-blue-50 transition-colors disabled:opacity-50", children: loading ? /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(RefreshSpinnerIcon, {}) : /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(CheckIcon, {}) })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("form", { id: "add-list-form", onSubmit: handleSubmit, children: /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(
              "div",
              {
                className: "p-4 space-y-6 overflow-y-auto max-h-[75vh] pb-24",
                style: { paddingBottom: `calc(6rem + env(safe-area-inset-bottom))` },
                children: [
                  error && /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("p", { className: "text-red-500 text-sm text-center -mt-4 mb-2 px-4 bg-red-50 py-2 rounded-lg", children: error }),
                  /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "bg-white p-4 rounded-xl shadow-sm space-y-4", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("label", { htmlFor: "list-name", className: "block text-sm font-medium text-gray-700 mb-1", children: "List Name" }),
                    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
                      "input",
                      {
                        id: "list-name",
                        type: "text",
                        placeholder: "e.g. Home Project",
                        value: name,
                        onChange: (e) => setName(e.target.value),
                        required: true,
                        className: "w-full px-4 py-2.5 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                      }
                    )
                  ] }) }),
                  /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "bg-white p-4 rounded-xl shadow-sm", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Icon" }),
                    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "grid grid-cols-6 gap-2", children: icons.map((icon) => /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
                      "button",
                      {
                        type: "button",
                        onClick: () => setSelectedIcon(icon),
                        className: `flex items-center justify-center text-2xl w-12 h-12 rounded-lg transition-all ${selectedIcon === icon ? "bg-blue-100 ring-2 ring-blue-500" : "bg-gray-100 hover:bg-gray-200"}`,
                        children: icon
                      },
                      icon
                    )) })
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "bg-white p-4 rounded-xl shadow-sm", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Color" }),
                    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "flex flex-wrap gap-3", children: colors.map((color) => {
                      const variant = colorVariants6[color];
                      return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
                        "button",
                        {
                          type: "button",
                          onClick: () => setSelectedColor(color),
                          className: `w-10 h-10 rounded-full transition-all ${variant.bg} ${selectedColor === color ? `ring-2 ring-offset-2 ${variant.ring}` : ""}`,
                          "aria-label": `Select ${color} color`
                        },
                        color
                      );
                    }) })
                  ] })
                ]
              }
            ) })
          ]
        }
      )
    ] });
  };
  var AddListScreen_default = AddListScreen;

  // node_modules/@capacitor-community/speech-recognition/dist/esm/index.js
  init_dist();
  var SpeechRecognition2 = registerPlugin("SpeechRecognition", {
    web: () => Promise.resolve().then(() => (init_web4(), web_exports4)).then((m) => new m.SpeechRecognitionWeb())
  });

  // components/common/BottomNavBar.tsx
  var import_jsx_runtime19 = __toESM(require_jsx_runtime());
  var NavItem = ({ to, icon, label }) => {
    const commonClasses = "flex flex-col items-center justify-center gap-1 transition-colors duration-200";
    const activeClass = "text-[var(--color-primary-500)]";
    const inactiveClass = "text-[var(--color-text-secondary)] hover:text-[var(--color-text-primary)]";
    const location = useLocation();
    const handleClick = () => {
      if (location.pathname !== to) {
        triggerHapticSelection();
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(
      NavLink,
      {
        to,
        onClick: handleClick,
        className: ({ isActive }) => `${commonClasses} ${isActive ? activeClass : inactiveClass}`,
        children: [
          icon,
          /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { className: "text-xs font-medium", children: label })
        ]
      }
    );
  };
  var BottomNavBar = () => {
    const [isMenuOpen, setIsMenuOpen] = (0, import_react10.useState)(false);
    const { addMoment, addList } = useData();
    const [isAddMomentOpen, setIsAddMomentOpen] = (0, import_react10.useState)(false);
    const [initialPhotoData, setInitialPhotoData] = (0, import_react10.useState)(null);
    const [isAddTaskWithAIOpen, setIsAddTaskWithAIOpen] = (0, import_react10.useState)(false);
    const [initialAIPrompt, setInitialAIPrompt] = (0, import_react10.useState)("");
    const [isAddListOpen, setIsAddListOpen] = (0, import_react10.useState)(false);
    const [isRecording, setIsRecording] = (0, import_react10.useState)(false);
    const [showRecordingUI, setShowRecordingUI] = (0, import_react10.useState)(false);
    const [liveTranscription, setLiveTranscription] = (0, import_react10.useState)("");
    const longPressTimerRef = (0, import_react10.useRef)(null);
    const isLongPressRef = (0, import_react10.useRef)(false);
    const cleanupRecording = (0, import_react10.useCallback)(() => {
      setIsRecording(false);
      setShowRecordingUI(false);
      setLiveTranscription("");
      SpeechRecognition2.removeAllListeners();
    }, []);
    const startRecording = (0, import_react10.useCallback)(async () => {
      if (isRecording) return;
      try {
        const available = await SpeechRecognition2.available();
        if (!available) {
          alert("Speech recognition is not available on this device.");
          return;
        }
        const permissionStatus = await SpeechRecognition2.requestPermissions();
        if (permissionStatus.speechRecognition !== "granted") {
          alert("Microphone permission is required for speech recognition.");
          return;
        }
        setShowRecordingUI(true);
        setIsRecording(true);
        setLiveTranscription("");
        SpeechRecognition2.addListener("partialResults", (data) => {
          if (data.matches && data.matches.length > 0) {
            setLiveTranscription(data.matches[0]);
          }
        });
        const result = await SpeechRecognition2.start({
          language: "en-US",
          maxResults: 1,
          prompt: "Say something...",
          partialResults: true
        });
        if (result && result.matches && result.matches.length > 0) {
          const finalTranscript = result.matches[0].trim();
          if (finalTranscript) {
            setInitialAIPrompt(finalTranscript);
            setIsAddTaskWithAIOpen(true);
          }
        }
      } catch (error) {
        console.error("Speech recognition error:", error);
      } finally {
        cleanupRecording();
      }
    }, [isRecording, cleanupRecording]);
    const stopRecording = (0, import_react10.useCallback)(() => {
      if (isRecording) {
        SpeechRecognition2.stop();
      }
    }, [isRecording]);
    (0, import_react10.useEffect)(() => {
      if (!Capacitor.isNativePlatform()) return;
      const handleAppStateChange = ({ isActive }) => {
        if (!isActive && isRecording) {
          stopRecording();
        }
      };
      const listenerPromise = App.addListener("appStateChange", handleAppStateChange);
      return () => {
        listenerPromise.then((listener) => listener.remove());
      };
    }, [isRecording, stopRecording]);
    const handlePointerDown = () => {
      isLongPressRef.current = false;
      longPressTimerRef.current = setTimeout(() => {
        isLongPressRef.current = true;
        if (isMenuOpen) setIsMenuOpen(false);
        setTimeout(() => {
          triggerHapticImpact(ImpactStyle.Medium);
        }, 0);
        startRecording();
      }, 250);
    };
    const handlePointerUp = () => {
      addDebug("handlePointerUp");
      if (longPressTimerRef.current) clearTimeout(longPressTimerRef.current);
      if (isLongPressRef.current) {
        addDebug("Long press was active, stopping recording.");
        stopRecording();
      } else {
        addDebug("Short press, toggling menu.");
        triggerHapticImpact();
        setIsMenuOpen((prev) => !prev);
      }
      isLongPressRef.current = false;
    };
    const handlePointerLeave = () => {
      if (longPressTimerRef.current) {
        clearTimeout(longPressTimerRef.current);
      }
      if (isRecording) {
        stopRecording();
        isLongPressRef.current = false;
      }
    };
    const handleMomentButtonClick = async () => {
      triggerHapticImpact();
      setIsMenuOpen(false);
      const photoDataUrl = await takePhotoWithCapacitor();
      if (photoDataUrl) {
        setInitialPhotoData(photoDataUrl);
        setIsAddMomentOpen(true);
      }
    };
    const handleAddTaskWithAI = () => {
      triggerHapticImpact();
      setIsMenuOpen(false);
      setIsAddTaskWithAIOpen(true);
    };
    const handleAddMoment = async (newMomentData) => {
      const newMoment = {
        title: newMomentData.title,
        description: newMomentData.notes.substring(0, 50) + (newMomentData.notes.length > 50 ? "..." : ""),
        imageUrl: newMomentData.imageUrl,
        date: (/* @__PURE__ */ new Date()).toLocaleDateString("en-US", { month: "long", day: "numeric", year: "numeric" }),
        notes: newMomentData.notes,
        tags: newMomentData.tags
      };
      await addMoment(newMoment);
    };
    const handleAddListClick = () => {
      triggerHapticImpact();
      setIsMenuOpen(false);
      setIsAddListOpen(true);
    };
    const handleAddList = async (newListData) => {
      await addList(newListData);
    };
    const menuItems = [
      { label: "Moment", icon: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(AddMomentMenuIcon, {}), action: handleMomentButtonClick },
      { label: "List", icon: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(AddListMenuIcon, {}), action: handleAddListClick },
      { label: "Task", icon: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(AddTaskMenuIcon, {}), action: handleAddTaskWithAI }
    ];
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(import_jsx_runtime19.Fragment, { children: [
      showRecordingUI && /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(import_jsx_runtime19.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: "fixed inset-0 bg-black/50 z-40 animate-page-fade-in backdrop-blur-sm", onClick: stopRecording }),
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
          "div",
          {
            className: "fixed left-1/2 -translate-x-1/2 w-40 h-40 bg-[var(--color-primary-500)]/40 rounded-full flex items-center justify-center animate-pulse-recording z-40 pointer-events-none",
            style: { bottom: `calc(1rem + env(safe-area-inset-bottom, 0px) - 2.5rem)` }
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
          "div",
          {
            className: "fixed bottom-0 left-1/2 -translate-x-1/2 w-full max-w-sm px-4 z-50 transition-all duration-300 ease-out",
            style: { bottom: `calc(7rem + env(safe-area-inset-bottom, 0px))` },
            children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: "bg-black/70 backdrop-blur-md rounded-xl p-4 text-white text-center text-base animate-page-fade-in min-h-[3.5rem] flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("p", { children: [
              liveTranscription || "Listening...",
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { className: "inline-block w-1 h-4 bg-white ml-1 animate-pulse" })
            ] }) })
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(
        "div",
        {
          className: `fixed inset-0 z-40 transition-all duration-300 ${isMenuOpen ? "visible" : "invisible"}`,
          "aria-hidden": "true",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
              "div",
              {
                className: `absolute inset-0 bg-gray-900/30 backdrop-blur-sm transition-opacity duration-300 ${isMenuOpen ? "opacity-100" : "opacity-0"}`,
                onClick: () => setIsMenuOpen(false)
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
              "div",
              {
                className: "absolute bottom-[7rem] left-1/2 -translate-x-1/2 w-full flex flex-col items-center gap-4",
                style: { bottom: `calc(7rem + env(safe-area-inset-bottom, 0px))` },
                children: menuItems.map((item, index2) => /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
                  "div",
                  {
                    className: `transform transition-all duration-300 ease-out ${isMenuOpen ? "translate-y-0 opacity-100" : "translate-y-8 opacity-0"}`,
                    style: { transitionDelay: `${isMenuOpen ? (menuItems.length - 1 - index2) * 40 : 0}ms` },
                    children: /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(
                      "button",
                      {
                        onClick: item.action,
                        className: "flex w-32 items-center gap-3 rounded-full bg-[var(--color-surface-container)] px-4 py-3 card-shadow",
                        children: [
                          item.icon,
                          /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { className: "font-semibold text-[var(--color-text-primary)] text-md", children: item.label })
                        ]
                      }
                    )
                  },
                  item.label
                ))
              }
            )
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
        "div",
        {
          className: "fixed bottom-0 left-0 right-0 h-20 bg-[var(--color-surface-container)]/80 backdrop-blur-sm border-t border-[var(--color-border)] z-30",
          style: { height: `calc(5rem + env(safe-area-inset-bottom, 0px))` },
          children: /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(
            "div",
            {
              className: "grid grid-cols-5 items-center h-full max-w-sm mx-auto",
              style: { paddingBottom: "env(safe-area-inset-bottom, 0px)" },
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(NavItem, { to: "/today", icon: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(TodayIcon, {}), label: "Today" }),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(NavItem, { to: "/plan", icon: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(ListsIcon, {}), label: "Plan" }),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", {}),
                " ",
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(NavItem, { to: "/moments", icon: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(MomentsIcon, {}), label: "Moments" }),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(NavItem, { to: "/settings", icon: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(SettingsIcon, {}), label: "Settings" })
              ]
            }
          )
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
        "div",
        {
          className: "fixed bottom-4 left-1/2 -translate-x-1/2 z-50",
          style: { bottom: `calc(1rem + env(safe-area-inset-bottom, 0px))` },
          children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
            "button",
            {
              onPointerDown: handlePointerDown,
              onPointerUp: handlePointerUp,
              onPointerLeave: handlePointerLeave,
              className: `w-16 h-16 bg-[var(--color-primary-500)] text-[var(--color-on-primary)] rounded-full flex items-center justify-center fab-shadow transform transition-all duration-300 ease-out focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[var(--color-primary-200)] ${isMenuOpen ? "rotate-[-225deg]" : ""} ${isRecording ? "animate-fab-pulse" : ""}`,
              "aria-haspopup": "true",
              "aria-expanded": isMenuOpen,
              "aria-label": isMenuOpen ? "Close menu" : isRecording ? "Stop recording" : "Open menu or long-press to record",
              children: isRecording ? /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(MicrophoneIcon, { className: "w-8 h-8" }) : /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(PlusIcon, {})
            }
          )
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
        AddMomentScreen,
        {
          isOpen: isAddMomentOpen,
          onClose: () => setIsAddMomentOpen(false),
          onAddMoment: handleAddMoment,
          initialImage: initialPhotoData
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
        AddTaskWithAIScreen_default,
        {
          isOpen: isAddTaskWithAIOpen,
          onClose: () => setIsAddTaskWithAIOpen(false),
          initialPrompt: initialAIPrompt
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
        AddListScreen_default,
        {
          isOpen: isAddListOpen,
          onClose: () => setIsAddListOpen(false),
          onAddList: handleAddList
        }
      )
    ] });
  };
  var BottomNavBar_default = BottomNavBar;

  // components/layouts/MainLayout.tsx
  var import_jsx_runtime20 = __toESM(require_jsx_runtime());
  var MainLayout = ({ children, hideNavBar = false }) => {
    const location = useLocation();
    return /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "h-screen w-full flex flex-col relative", children: [
      /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("div", { className: "flex-grow animate-page-fade-in relative overflow-hidden", children }, location.pathname),
      !hideNavBar && /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(BottomNavBar_default, {})
    ] });
  };
  var MainLayout_default = MainLayout;

  // components/common/TaskCard.tsx
  var import_react11 = __toESM(require_react());
  var import_jsx_runtime21 = __toESM(require_jsx_runtime());
  var timeToMinutes = (timeStr) => {
    if (!timeStr || !timeStr.includes(":")) return 0;
    const [hours, minutes] = timeStr.split(":").map(Number);
    return hours * 60 + minutes;
  };
  var minutesToTime = (totalMinutes) => {
    const hours = Math.floor(totalMinutes / 60);
    const minutes = totalMinutes % 60;
    const period = hours >= 12 ? "PM" : "AM";
    const displayHour = hours % 12 === 0 ? 12 : hours % 12;
    return `${displayHour}:${String(minutes).padStart(2, "0")} ${period}`;
  };
  var TaskCard = ({
    id,
    startTime,
    duration,
    type,
    title,
    category,
    color = "gray",
    categoryIcon,
    completed,
    important,
    subtasks,
    onComplete,
    onUncomplete,
    isCompleting = false,
    isUncompleting = false,
    isJustUncompleted = false,
    onUncompleteAnimationEnd,
    isJustCompleted = false,
    onCompleteAnimationEnd,
    isJustAdded = false,
    onAddAnimationEnd,
    onToggleSubtask,
    onClick,
    onToggleImportant,
    onToggleSubtaskVisibility,
    hideSubtasks = false,
    variant = "card"
  }) => {
    const pressTimerRef = (0, import_react11.useRef)(null);
    const isClickRef = (0, import_react11.useRef)(true);
    const pillColorVariants = {
      yellow: "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/40 dark:text-yellow-300",
      purple: "bg-purple-100 text-purple-800 dark:bg-purple-900/40 dark:text-purple-300",
      green: "bg-green-100 text-green-800 dark:bg-green-900/40 dark:text-green-300",
      blue: "bg-blue-100 text-blue-800 dark:bg-blue-900/40 dark:text-blue-300",
      pink: "bg-pink-100 text-pink-800 dark:bg-pink-900/40 dark:text-pink-300",
      red: "bg-red-100 text-red-800 dark:bg-red-900/40 dark:text-red-300",
      orange: "bg-orange-100 text-orange-800 dark:bg-orange-900/40 dark:text-orange-300",
      teal: "bg-teal-100 text-teal-800 dark:bg-teal-900/40 dark:text-teal-300",
      cyan: "bg-cyan-100 text-cyan-800 dark:bg-cyan-900/40 dark:text-cyan-300",
      indigo: "bg-indigo-100 text-indigo-800 dark:bg-indigo-900/40 dark:text-indigo-300",
      lime: "bg-lime-100 text-lime-800 dark:bg-lime-900/40 dark:text-lime-300",
      amber: "bg-amber-100 text-amber-800 dark:bg-amber-900/40 dark:text-amber-300",
      rose: "bg-rose-100 text-rose-800 dark:bg-rose-900/40 dark:text-rose-300",
      fuchsia: "bg-fuchsia-100 text-fuchsia-800 dark:bg-fuchsia-900/40 dark:text-fuchsia-300",
      gray: "bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300"
    };
    const checkmarkColorVariants = {
      yellow: "bg-yellow-500 hover:bg-yellow-600",
      purple: "bg-purple-500 hover:bg-purple-600",
      green: "bg-green-500 hover:bg-green-600",
      blue: "bg-blue-500 hover:bg-blue-600",
      pink: "bg-pink-500 hover:bg-pink-600",
      red: "bg-red-500 hover:bg-red-600",
      orange: "bg-orange-500 hover:bg-orange-600",
      teal: "bg-teal-500 hover:bg-teal-600",
      cyan: "bg-cyan-500 hover:bg-cyan-600",
      indigo: "bg-indigo-500 hover:bg-indigo-600",
      lime: "bg-lime-500 hover:bg-lime-600",
      amber: "bg-amber-500 hover:bg-amber-600",
      rose: "bg-rose-500 hover:bg-rose-600",
      fuchsia: "bg-fuchsia-500 hover:bg-fuchsia-600",
      gray: "bg-gray-500 hover:bg-gray-600"
    };
    const pillColors = pillColorVariants[color] || pillColorVariants.gray;
    const checkmarkColorClass = checkmarkColorVariants[color] || "bg-blue-600 hover:bg-blue-700";
    const fireworksData = [
      { color: "blue", particles: 6, delay: 0 },
      { color: "pink", particles: 6, delay: 0.1 },
      { color: "yellow", particles: 6, delay: 0.2 }
    ];
    const endTime = (0, import_react11.useMemo)(() => {
      if (startTime && duration) {
        const startMins = timeToMinutes(startTime);
        const endMins = startMins + duration;
        return minutesToTime(endMins);
      }
      return null;
    }, [startTime, duration]);
    (0, import_react11.useEffect)(() => {
      if (isJustUncompleted) {
        const timer = setTimeout(() => {
          onUncompleteAnimationEnd?.();
        }, 500);
        return () => clearTimeout(timer);
      }
    }, [isJustUncompleted, onUncompleteAnimationEnd]);
    (0, import_react11.useEffect)(() => {
      if (isJustCompleted) {
        const timer = setTimeout(() => {
          onCompleteAnimationEnd?.();
        }, 500);
        return () => clearTimeout(timer);
      }
    }, [isJustCompleted, onCompleteAnimationEnd]);
    (0, import_react11.useEffect)(() => {
      if (isJustAdded) {
        const timer = setTimeout(() => {
          onAddAnimationEnd?.();
        }, 500);
        return () => clearTimeout(timer);
      }
    }, [isJustAdded, onAddAnimationEnd]);
    const cancelLongPress = (0, import_react11.useCallback)(() => {
      if (pressTimerRef.current) {
        clearTimeout(pressTimerRef.current);
        pressTimerRef.current = null;
      }
    }, []);
    const onPointerDown = (0, import_react11.useCallback)((e) => {
      const targetEl = e.target;
      if (targetEl.closest('button, input[type="checkbox"]') || e.button !== 0) {
        return;
      }
      isClickRef.current = true;
      cancelLongPress();
    }, [cancelLongPress]);
    const onPointerUp = (0, import_react11.useCallback)((e) => {
      cancelLongPress();
      const targetEl = e.target;
      if (isClickRef.current && !targetEl.closest('button, input[type="checkbox"]')) {
        onClick?.();
      }
    }, [cancelLongPress, onClick]);
    const containerClasses = variant === "card" ? "bg-[var(--color-surface-container)] rounded-xl card-shadow border border-[var(--color-border)]" : "bg-[var(--color-surface-container)]";
    const contentClasses = variant === "card" ? "p-3" : "py-3 pr-3";
    return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
      "div",
      {
        onPointerDown,
        onPointerUp,
        onPointerLeave: cancelLongPress,
        onPointerCancel: cancelLongPress,
        onContextMenu: (e) => e.preventDefault(),
        className: `${containerClasses} select-none 
                ${!completed ? "cursor-pointer" : ""}
                ${isJustAdded ? "animate-card-fade-in" : ""}
                ${isJustCompleted ? "animate-card-fade-in" : ""}
                ${isJustUncompleted ? "animate-card-fade-in" : ""}
            `,
        children: /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: `flex items-start gap-3 ${contentClasses}`, children: [
          /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("div", { className: "pt-1 shrink-0", children: completed ? /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
            "button",
            {
              onClick: (e) => {
                e.stopPropagation();
                onUncomplete?.(id);
              },
              className: `w-5 h-5 rounded-md ${checkmarkColorClass} flex items-center justify-center text-white shrink-0 transition-colors
                                ${isUncompleting ? "animate-uncheck" : ""}
                            `,
              "aria-label": "Mark task as incomplete",
              disabled: isUncompleting,
              children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("svg", { className: "w-3 h-3", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 5, d: "M5 13l4 4L19 7" }) })
            }
          ) : /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
            "button",
            {
              onClick: (e) => {
                e.stopPropagation();
                onComplete?.(id);
              },
              className: `relative w-5 h-5 rounded-md border-2 shrink-0 transition-colors flex items-center justify-center
                                ${isCompleting ? "animate-checkmark" : `border-gray-400 dark:border-gray-500 hover:border-gray-500 dark:hover:border-gray-400`}
                            `,
              "aria-label": "Mark task as complete",
              disabled: isCompleting,
              children: isCompleting && /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)(import_jsx_runtime21.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("svg", { className: "w-3 h-3 text-white animate-checkmark-icon", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 5, d: "M5 13l4 4L19 7" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("div", { className: "fireworks-container", children: fireworksData.map(
                  (set, setIndex) => Array.from({ length: set.particles }).map((_, i) => /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
                    "div",
                    {
                      className: "rotator",
                      style: { transform: `rotate(${i * (360 / set.particles)}deg)` },
                      children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
                        "div",
                        {
                          className: `particle particle-${set.color}`,
                          style: { animationDelay: `${set.delay}s` }
                        }
                      )
                    },
                    `${setIndex}-${i}`
                  ))
                ) })
              ] })
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "flex-grow min-w-0", children: [
            /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "flex justify-between items-start gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "flex-grow flex items-baseline gap-2 min-w-0", children: [
                /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("p", { className: `truncate text-lg font-semibold ${completed ? "text-[var(--color-text-tertiary)] line-through" : "text-[var(--color-text-primary)]"}`, children: title }),
                subtasks && subtasks.length > 0 && !completed && /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("span", { className: "text-xs font-medium text-[var(--color-text-tertiary)] shrink-0", children: [
                  "[",
                  subtasks.filter((s) => s.completed).length,
                  "/",
                  subtasks.length,
                  "]"
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("div", { className: "flex items-center shrink-0 pt-0.5", children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
                "button",
                {
                  onClick: (e) => {
                    e.stopPropagation();
                    if (!completed) onToggleImportant?.(id);
                  },
                  className: `p-1 -m-1 rounded-full ${!completed ? "hover:bg-red-50 dark:hover:bg-red-900/20" : "cursor-not-allowed"}`,
                  "aria-label": important ? "Remove importance" : "Mark as important",
                  disabled: completed,
                  children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(FlagIcon, { className: `w-4 h-4 transition-colors ${important ? completed ? "text-red-300 dark:text-red-700" : "text-[var(--color-functional-red)]" : "text-gray-300 dark:text-gray-600"}` })
                }
              ) })
            ] }),
            !completed && /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "flex justify-between items-center mt-1.5", children: [
              /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "flex flex-wrap items-center gap-2 text-xs", children: [
                /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: `flex items-center gap-1.5 px-2 py-0.5 rounded-md ${pillColors}`, children: [
                  categoryIcon && /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("span", { children: categoryIcon }),
                  /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("span", { className: "font-medium", children: category })
                ] }),
                duration && /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("div", { className: "flex items-center gap-1 px-2 py-0.5 rounded-md bg-[var(--color-surface-container-low)] text-[var(--color-text-secondary)] font-medium", children: endTime ? /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("span", { children: [
                  duration,
                  "m \u2192 ",
                  endTime
                ] }) : /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("span", { children: [
                  duration,
                  "m"
                ] }) })
              ] }),
              subtasks && subtasks.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
                "button",
                {
                  onClick: (e) => {
                    e.stopPropagation();
                    onToggleSubtaskVisibility?.();
                  },
                  className: "p-1.5 -m-1.5 rounded-full text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-all shrink-0",
                  "aria-label": hideSubtasks ? "Expand subtasks" : "Collapse subtasks",
                  children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(ChevronRightElegantIcon, { className: `w-3.5 h-3.5 transition-transform duration-300 ${hideSubtasks ? "" : "rotate-90"}` })
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("div", { className: `grid transition-[grid-template-rows] duration-300 ease-in-out ${!hideSubtasks && subtasks && subtasks.length > 0 ? "grid-rows-[1fr]" : "grid-rows-[0fr]"}`, children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("div", { className: "overflow-hidden", children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("div", { className: "mt-2 pt-2 border-t border-[var(--color-border)] space-y-1.5", children: subtasks?.map((sub) => /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "flex items-center gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
                "input",
                {
                  type: "checkbox",
                  id: `subtask-${sub.id}`,
                  checked: sub.completed,
                  onChange: (e) => {
                    e.stopPropagation();
                    if (!completed) {
                      triggerHapticImpact();
                      onToggleSubtask?.(id, sub.id);
                    }
                  },
                  className: "h-3.5 w-3.5 rounded-sm border-gray-400 dark:border-gray-500 text-blue-600 focus:ring-blue-500 dark:bg-gray-700 dark:focus:ring-offset-gray-800 cursor-pointer disabled:opacity-50 disabled:cursor-not-allowed",
                  disabled: completed
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
                "label",
                {
                  htmlFor: `subtask-${sub.id}`,
                  onClick: (e) => e.stopPropagation(),
                  className: `text-sm ${completed ? "cursor-not-allowed" : "cursor-pointer"} ${sub.completed || completed ? "text-[var(--color-text-tertiary)] line-through" : "text-[var(--color-text-secondary)]"}`,
                  children: sub.text
                }
              )
            ] }, sub.id)) }) }) })
          ] })
        ] })
      }
    );
  };
  var TaskCard_default = TaskCard;

  // screens/RecommendTasksScreen.tsx
  var import_react12 = __toESM(require_react());
  var import_jsx_runtime22 = __toESM(require_jsx_runtime());
  var colorVariants = {
    green: { bg: "bg-green-100 dark:bg-green-900/30" },
    blue: { bg: "bg-blue-100 dark:bg-blue-900/30" },
    pink: { bg: "bg-pink-100 dark:bg-pink-900/30" },
    purple: { bg: "bg-purple-100 dark:bg-purple-900/30" },
    yellow: { bg: "bg-yellow-100 dark:bg-yellow-900/30" },
    red: { bg: "bg-red-100 dark:bg-red-900/30" },
    orange: { bg: "bg-orange-100 dark:bg-orange-900/30" }
  };
  var RecommendTasksScreen = ({ isOpen, onClose, tasks, onAddTaskToToday, listInfoMap }) => {
    (0, import_react12.useEffect)(() => {
      const handleKeyDown = (event) => {
        if (event.key === "Escape") {
          onClose();
        }
      };
      window.addEventListener("keydown", handleKeyDown);
      return () => {
        window.removeEventListener("keydown", handleKeyDown);
      };
    }, [onClose]);
    const handleAdd = (taskId) => {
      onAddTaskToToday(taskId);
      onClose();
    };
    return /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: `fixed inset-0 z-50 flex items-end transition-all duration-300 ${isOpen ? "visible" : "invisible"}`, children: [
      /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
        "div",
        {
          className: `fixed inset-0 bg-black/40 transition-opacity duration-300 ${isOpen ? "opacity-100" : "opacity-0"}`,
          onClick: onClose,
          "aria-hidden": "true"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(
        "div",
        {
          className: `w-full bg-white dark:bg-gray-800 rounded-t-3xl modal-shadow transition-transform duration-300 ease-out transform ${isOpen ? "translate-y-0" : "translate-y-full"} flex flex-col max-h-[80vh]`,
          role: "dialog",
          "aria-modal": "true",
          "aria-labelledby": "recommend-title",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "pt-3 px-4 pb-3 border-b border-gray-200 dark:border-gray-700 flex-shrink-0", children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "w-8 h-1 bg-gray-300 dark:bg-gray-600 rounded-full mx-auto mb-3" }),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "flex justify-between items-center h-8", children: [
                /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("button", { className: "p-1 text-gray-500 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(TrashIcon, {}) }),
                /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("h2", { id: "recommend-title", className: "text-base font-bold text-gray-900 dark:text-gray-100", children: "Recommend Tasks" }),
                /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("button", { className: "p-1 text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(RegenerateIcon, {}) })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
              "div",
              {
                className: "p-4 space-y-3 pb-24 overflow-y-auto",
                style: { paddingBottom: "calc(6rem + env(safe-area-inset-bottom))" },
                children: tasks.length > 0 ? tasks.map((task) => {
                  const listInfo = listInfoMap.get(task.category) || { icon: "\u{1F4BC}", color: "blue" };
                  const colors3 = colorVariants[listInfo.color] || colorVariants.blue;
                  return /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 p-3 rounded-xl flex items-center justify-between", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "flex items-center space-x-3", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: `w-10 h-10 flex items-center justify-center rounded-full ${colors3.bg}`, children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("span", { className: "text-xl", children: listInfo.icon }) }),
                      /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { children: [
                        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("p", { className: "font-semibold text-sm text-gray-800 dark:text-gray-200", children: task.title }),
                        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("p", { className: "text-xs text-gray-500 dark:text-gray-400", children: task.reason })
                      ] })
                    ] }),
                    /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("button", { onClick: () => handleAdd(task.id), className: "text-blue-500 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 bg-blue-50 dark:bg-blue-900/40 p-1.5 rounded-full", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(PlusCircleIcon, {}) })
                  ] }, task.id);
                }) : /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "text-center py-8 text-gray-500 dark:text-gray-400", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("p", { children: "No recommendations for now!" }) })
              }
            )
          ]
        }
      )
    ] });
  };
  var RecommendTasksScreen_default = RecommendTasksScreen;

  // screens/OverdueTasksScreen.tsx
  var import_react13 = __toESM(require_react());
  var import_jsx_runtime23 = __toESM(require_jsx_runtime());
  var colorVariants2 = {
    green: { bg: "bg-green-100 dark:bg-green-900/30" },
    blue: { bg: "bg-blue-100 dark:bg-blue-900/30" },
    pink: { bg: "bg-pink-100 dark:bg-pink-900/30" },
    purple: { bg: "bg-purple-100 dark:bg-purple-900/30" },
    yellow: { bg: "bg-yellow-100 dark:bg-yellow-900/30" },
    red: { bg: "bg-red-100 dark:bg-red-900/30" },
    orange: { bg: "bg-orange-100 dark:bg-orange-900/30" }
  };
  var OverdueTasksScreen = ({ isOpen, onClose, tasks, onAddTaskToToday, listInfoMap }) => {
    (0, import_react13.useEffect)(() => {
      const handleKeyDown = (event) => {
        if (event.key === "Escape") {
          onClose();
        }
      };
      window.addEventListener("keydown", handleKeyDown);
      return () => {
        window.removeEventListener("keydown", handleKeyDown);
      };
    }, [onClose]);
    const handleAdd = (taskId) => {
      onAddTaskToToday(taskId);
      onClose();
    };
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: `fixed inset-0 z-50 flex items-end transition-all duration-300 ${isOpen ? "visible" : "invisible"}`, children: [
      /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
        "div",
        {
          className: `fixed inset-0 bg-black/40 transition-opacity duration-300 ${isOpen ? "opacity-100" : "opacity-0"}`,
          onClick: onClose,
          "aria-hidden": "true"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)(
        "div",
        {
          className: `w-full bg-white dark:bg-gray-800 rounded-t-3xl modal-shadow transition-transform duration-300 ease-out transform ${isOpen ? "translate-y-0" : "translate-y-full"} flex flex-col max-h-[80vh]`,
          role: "dialog",
          "aria-modal": "true",
          "aria-labelledby": "overdue-title",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "pt-3 px-4 pb-3 border-b border-gray-200 dark:border-gray-700 flex-shrink-0", children: [
              /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", { className: "w-8 h-1 bg-gray-300 dark:bg-gray-600 rounded-full mx-auto mb-3" }),
              /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "flex justify-between items-center h-8", children: [
                /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("button", { className: "p-1 text-gray-500 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200", children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(TrashIcon, {}) }),
                /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("h2", { id: "overdue-title", className: "text-base font-bold text-gray-900 dark:text-gray-100", children: "Overdue Tasks" }),
                /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("button", { className: "p-1 text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300", children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(RegenerateIcon, {}) })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
              "div",
              {
                className: "p-4 space-y-3 pb-24 overflow-y-auto",
                style: { paddingBottom: "calc(6rem + env(safe-area-inset-bottom))" },
                children: tasks.length > 0 ? tasks.map((task) => {
                  const listInfo = listInfoMap.get(task.category) || { icon: "\u{1F4BC}", color: "blue" };
                  const colors3 = colorVariants2[listInfo.color] || colorVariants2.blue;
                  return /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 p-3 rounded-xl flex items-center justify-between", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "flex items-center space-x-3", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", { className: `w-10 h-10 flex items-center justify-center rounded-full ${colors3.bg}`, children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("span", { className: "text-xl", children: listInfo.icon }) }),
                      /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { children: [
                        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("p", { className: "font-semibold text-sm text-gray-800 dark:text-gray-200", children: task.title }),
                        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("p", { className: "text-xs text-red-500 dark:text-red-400", children: task.reason })
                      ] })
                    ] }),
                    /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("button", { onClick: () => handleAdd(task.id), className: "text-blue-500 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 bg-blue-50 dark:bg-blue-900/40 p-1.5 rounded-full", children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(PlusCircleIcon, {}) })
                  ] }, task.id);
                }) : /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", { className: "text-center py-8 text-gray-500 dark:text-gray-400", children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("p", { children: "No overdue tasks. Great job!" }) })
              }
            )
          ]
        }
      )
    ] });
  };
  var OverdueTasksScreen_default = OverdueTasksScreen;

  // screens/AddTaskScreen.tsx
  var import_react14 = __toESM(require_react());
  var import_react_dom = __toESM(require_react_dom());
  var import_jsx_runtime24 = __toESM(require_jsx_runtime());
  var EmptySquareCheckIcon = () => /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("svg", { className: "w-6 h-6 text-gray-400 dark:text-gray-500", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 1.5, children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("rect", { x: "4", y: "4", width: "16", height: "16", rx: "4" }) });
  var SubtaskCircleIcon = () => /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("svg", { className: "w-5 h-5 text-gray-500 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 transition-colors", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("circle", { cx: "12", cy: "12", r: "8" }) });
  var formatChipDate = (dateString) => {
    if (!dateString) return "";
    const today = /* @__PURE__ */ new Date();
    today.setHours(0, 0, 0, 0);
    const parts = dateString.split("-").map(Number);
    const date = new Date(parts[0], parts[1] - 1, parts[2]);
    date.setHours(0, 0, 0, 0);
    const diffTime = date.getTime() - today.getTime();
    const diffDays = Math.round(diffTime / (1e3 * 60 * 60 * 24));
    if (diffDays === 0) return "Today";
    if (diffDays === 1) return "Tomorrow";
    if (diffDays > 1 && diffDays <= 3) return `In ${diffDays} days`;
    if (diffDays === -1) return "Yesterday";
    if (diffDays < -1 && diffDays >= -3) return `${Math.abs(diffDays)} days ago`;
    return `${date.getMonth() + 1}/${date.getDate()}`;
  };
  var reminderOptions = [
    { label: "No notification", value: null },
    { label: "On time", value: 0 },
    { label: "5 minutes before", value: 5 },
    { label: "10 minutes before", value: 10 },
    { label: "15 minutes before", value: 15 },
    { label: "30 minutes before", value: 30 },
    { label: "1 hour before", value: 60 }
  ];
  var getReminderLabel = (value) => {
    const option = reminderOptions.find((o) => o.value === value);
    return option ? option.label : "";
  };
  var AddTaskScreen = ({ isOpen, onClose, initialDate, onAddTask }) => {
    const { lists: userLists } = useData();
    const listOptions = userLists.map((l) => l.name);
    const keyboardHeight = useKeyboardHeight();
    const [title, setTitle] = (0, import_react14.useState)("");
    const [notes, setNotes] = (0, import_react14.useState)("");
    const [subtasks, setSubtasks] = (0, import_react14.useState)([]);
    const [newSubtaskText, setNewSubtaskText] = (0, import_react14.useState)("");
    const [category, setCategory] = (0, import_react14.useState)("");
    const [isImportant, setIsImportant] = (0, import_react14.useState)(false);
    const [isToday, setIsToday] = (0, import_react14.useState)(false);
    const [taskType, setTaskType] = (0, import_react14.useState)("Flexible");
    const [dueDate, setDueDate] = (0, import_react14.useState)("");
    const [startDate, setStartDate] = (0, import_react14.useState)("");
    const [startTime, setStartTime] = (0, import_react14.useState)("");
    const [duration, setDuration] = (0, import_react14.useState)("");
    const [reminder, setReminder] = (0, import_react14.useState)(null);
    const [activeInput, setActiveInput] = (0, import_react14.useState)(null);
    const [isSubtaskSectionVisible, setIsSubtaskSectionVisible] = (0, import_react14.useState)(false);
    const [loading, setLoading] = (0, import_react14.useState)(false);
    const [error, setError] = (0, import_react14.useState)(null);
    const [activePopover, setActivePopover] = (0, import_react14.useState)(null);
    const [popoverPosition, setPopoverPosition] = (0, import_react14.useState)({});
    const titleInputRef = (0, import_react14.useRef)(null);
    const notesInputRef = (0, import_react14.useRef)(null);
    const newSubtaskInputRef = (0, import_react14.useRef)(null);
    const calendarIconRef = (0, import_react14.useRef)(null);
    const startTimeIconRef = (0, import_react14.useRef)(null);
    const durationIconRef = (0, import_react14.useRef)(null);
    const listIconRef = (0, import_react14.useRef)(null);
    const reminderIconRef = (0, import_react14.useRef)(null);
    const cardRef = (0, import_react14.useRef)(null);
    const prevIsOpen = (0, import_react14.useRef)(isOpen);
    const todayStr = (0, import_react14.useMemo)(() => (/* @__PURE__ */ new Date()).toISOString().substring(0, 10), []);
    const isTodayLocked = (0, import_react14.useMemo)(() => dueDate === todayStr, [dueDate, todayStr]);
    (0, import_react14.useEffect)(() => {
      if (isTodayLocked) {
        setIsToday(true);
      }
    }, [isTodayLocked]);
    const resetState = (0, import_react14.useCallback)(() => {
      setTitle("");
      setNotes("");
      setSubtasks([]);
      setNewSubtaskText("");
      setIsImportant(false);
      setIsToday(false);
      setTaskType("Flexible");
      setDueDate("");
      setStartDate("");
      setStartTime("");
      setDuration("");
      setReminder(null);
      setActiveInput(null);
      setActivePopover(null);
      setIsSubtaskSectionVisible(false);
      setError(null);
      setLoading(false);
    }, []);
    (0, import_react14.useEffect)(() => {
      if (isOpen && !prevIsOpen.current) {
        resetState();
        setCategory(listOptions.length > 0 ? listOptions[0] : "");
        if (initialDate) {
          setDueDate(initialDate);
          if (initialDate === todayStr) {
            setIsToday(true);
          }
        }
      }
      prevIsOpen.current = isOpen;
    }, [isOpen, initialDate, listOptions, resetState, todayStr]);
    const handlePopoverToggle = (0, import_react14.useCallback)((popoverName, ref) => {
      if (activePopover === popoverName) {
        setActivePopover(null);
        return;
      }
      if (ref.current) {
        const iconRect = ref.current.getBoundingClientRect();
        const popoverWidth = 224;
        const popoverHeight = 250;
        const margin = 8;
        let pos = { position: "fixed" };
        if (iconRect.bottom + popoverHeight > window.innerHeight && iconRect.top > popoverHeight) {
          pos.bottom = window.innerHeight - iconRect.top + margin;
        } else {
          pos.top = iconRect.bottom + margin;
        }
        if (iconRect.right - popoverWidth < 0) {
          pos.left = iconRect.left;
        } else {
          pos.left = iconRect.right - popoverWidth;
        }
        setPopoverPosition(pos);
      }
      setActivePopover(popoverName);
    }, [activePopover]);
    (0, import_react14.useEffect)(() => {
      const handleClickOutside = (event) => {
        const target = event.target;
        if (cardRef.current && !cardRef.current.contains(target)) {
          setActiveInput(null);
        }
        if (activePopover && cardRef.current && !cardRef.current.contains(target)) {
          const popovers = document.querySelectorAll(".popover-content");
          let clickedInsidePopover = false;
          popovers.forEach((p) => {
            if (p.contains(target)) clickedInsidePopover = true;
          });
          if (!clickedInsidePopover) {
            setActivePopover(null);
          }
        }
      };
      document.addEventListener("mousedown", handleClickOutside);
      return () => document.removeEventListener("mousedown", handleClickOutside);
    }, [activePopover]);
    const handleSubmit = async (e) => {
      e.preventDefault();
      if (!title.trim()) {
        setError("Task name is required.");
        return;
      }
      if (!category) {
        setError("Please select a list.");
        return;
      }
      setLoading(true);
      setError(null);
      try {
        if (onAddTask) {
          await onAddTask({
            title,
            list: category,
            isImportant,
            isToday,
            notes,
            subtasks: isSubtaskSectionVisible ? subtasks.filter((s) => s.text.trim()) : [],
            dueDate,
            type: taskType,
            startDate: taskType === "Fixed" && startTime ? startDate || (/* @__PURE__ */ new Date()).toISOString().substring(0, 10) : "",
            startTime: taskType === "Fixed" ? startTime : "",
            duration,
            reminder
          });
        }
        onClose();
      } catch (err) {
        setError("Failed to save the task. Please try again.");
      } finally {
        setLoading(false);
      }
    };
    const handleAddSubtask = () => {
      if (newSubtaskText.trim()) {
        setSubtasks([...subtasks, { id: Date.now(), text: newSubtaskText, completed: false }]);
        setNewSubtaskText("");
        setTimeout(() => newSubtaskInputRef.current?.focus(), 0);
      }
    };
    const handleToggleToday = () => {
      if (isTodayLocked) return;
      setIsToday((prev) => !prev);
    };
    const PopoverPortal = ({ children }) => {
      if (!activePopover) return null;
      return (0, import_react_dom.createPortal)(children, document.body);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)(import_jsx_runtime24.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)(
        "div",
        {
          className: `fixed inset-0 z-50 grid place-items-center p-4 transition-all duration-300 ${isOpen ? "visible" : "invisible"}`,
          style: { paddingBottom: `max(1rem, ${keyboardHeight}px)` },
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: `fixed inset-0 bg-black/40 transition-opacity duration-300 ${isOpen ? "opacity-100" : "opacity-0"}`, onClick: onClose, "aria-hidden": "true" }),
            /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("form", { onSubmit: handleSubmit, className: `w-full max-w-sm bg-transparent transition-transform duration-300 ease-out transform ${isOpen ? "scale-100 opacity-100" : "scale-95 opacity-0"}`, style: { paddingBottom: `env(safe-area-inset-bottom)` }, children: [
              /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { ref: cardRef, className: "bg-[var(--color-surface-container)] rounded-xl card-shadow p-4 overflow-y-auto max-h-[75vh]", children: [
                error && /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("p", { className: "text-[var(--color-functional-red)] text-sm text-center mb-2", children: error }),
                /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "flex items-start gap-3", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "pt-1", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(EmptySquareCheckIcon, {}) }),
                  /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "flex-grow", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("input", { ref: titleInputRef, type: "text", value: title, onChange: (e) => setTitle(e.target.value), onFocus: () => setActiveInput("title"), onKeyDown: (e) => {
                      if (e.key === "Enter") {
                        e.preventDefault();
                        notesInputRef.current?.focus();
                      }
                    }, placeholder: "New To-Do", className: "w-full text-base font-semibold text-[var(--color-text-primary)] placeholder-[var(--color-text-primary)] focus:outline-none bg-transparent" }),
                    /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("textarea", { ref: notesInputRef, value: notes, onChange: (e) => setNotes(e.target.value), onFocus: () => setActiveInput("notes"), placeholder: "Notes", rows: 1, className: "w-full text-sm mt-1 text-[var(--color-text-secondary)] placeholder-[var(--color-text-secondary)] focus:outline-none resize-none bg-transparent" }),
                    isSubtaskSectionVisible && /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "mt-2 space-y-1 pt-2 border-t border-[var(--color-border)]", children: [
                      subtasks.map((sub) => /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "flex items-center gap-2 group", children: [
                        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(SubtaskCircleIcon, {}),
                        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("input", { type: "text", value: sub.text, onChange: (e) => {
                          const newText = e.target.value;
                          setSubtasks((subs) => subs.map((s) => s.id === sub.id ? { ...s, text: newText } : s));
                        }, onKeyDown: (e) => {
                          if (e.key === "Enter") {
                            e.preventDefault();
                            handleAddSubtask();
                          }
                        }, className: "w-full text-sm text-[var(--color-text-primary)] focus:outline-none bg-transparent" }),
                        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("button", { type: "button", onClick: () => setSubtasks((subs) => subs.filter((s) => s.id !== sub.id)), className: "text-[var(--color-text-tertiary)] hover:text-[var(--color-functional-red)] opacity-0 group-hover:opacity-100", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(TrashIcon, {}) })
                      ] }, sub.id)),
                      /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "flex items-center gap-2", children: [
                        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(SubtaskCircleIcon, {}),
                        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("input", { ref: newSubtaskInputRef, type: "text", value: newSubtaskText, onChange: (e) => setNewSubtaskText(e.target.value), onKeyDown: (e) => {
                          if (e.key === "Enter") {
                            e.preventDefault();
                            handleAddSubtask();
                          }
                        }, placeholder: "Add item", className: "w-full text-sm text-[var(--color-text-primary)] placeholder-[var(--color-text-secondary)] focus:outline-none bg-transparent" })
                      ] })
                    ] })
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "mt-3 pt-3 border-t border-[var(--color-border)]", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "flex items-center gap-2 flex-wrap min-w-0 mb-3 min-h-[1.75rem]", children: [
                    duration && /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "flex items-center gap-1.5 px-2.5 py-1 rounded-md bg-[var(--color-surface-container-low)] text-[var(--color-text-primary)] text-xs font-semibold animate-page-fade-in", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(DurationIcon, { className: "w-3.5 h-3.5" }),
                      /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("span", { children: [
                        duration,
                        " min"
                      ] })
                    ] }),
                    reminder !== null && /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "flex items-center gap-1.5 px-2.5 py-1 rounded-md bg-purple-100 dark:bg-purple-900/30 text-purple-800 dark:text-purple-300 text-xs font-semibold animate-page-fade-in", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(BellIcon, { className: "w-3.5 h-3.5" }),
                      /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("span", { className: "truncate", children: getReminderLabel(reminder) })
                    ] }),
                    startTime && taskType === "Fixed" && /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "flex items-center gap-1.5 px-2.5 py-1 rounded-md bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-300 text-xs font-semibold animate-page-fade-in", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(ClockIcon, { className: "w-3.5 h-3.5" }),
                      /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("span", { className: "truncate", children: [
                        "Starts ",
                        formatChipDate(startDate || todayStr),
                        ", ",
                        (/* @__PURE__ */ new Date("1970-01-01T" + startTime)).toLocaleTimeString([], { hour: "numeric", minute: "2-digit" })
                      ] })
                    ] }),
                    dueDate && /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "flex items-center gap-1.5 px-2.5 py-1 rounded-md bg-[var(--color-surface-container-low)] text-[var(--color-text-primary)] text-xs font-semibold animate-page-fade-in", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("span", { children: [
                      "Due ",
                      formatChipDate(dueDate)
                    ] }) }),
                    category && /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "flex items-center gap-1.5 px-2.5 py-1 rounded-md bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-300 text-xs font-semibold animate-page-fade-in", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("span", { children: category }) })
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "flex items-center justify-end", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "flex items-center gap-1", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("button", { type: "button", title: taskType === "Fixed" ? "Set as Flexible" : "Set as Fixed", onClick: () => setTaskType((p) => p === "Fixed" ? "Flexible" : "Fixed"), className: `p-2 rounded-full transition-colors ${taskType === "Fixed" ? "text-blue-600 bg-blue-100 dark:bg-blue-900/30 dark:text-blue-300" : "text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700"}`, children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(LockIcon, { className: "w-5 h-5" }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { ref: durationIconRef, children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("button", { type: "button", title: "Set Duration", onClick: () => handlePopoverToggle("duration", durationIconRef), className: `p-2 rounded-full transition-colors ${duration ? "text-blue-600 bg-blue-100 dark:bg-blue-900/30 dark:text-blue-300" : "text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700"}`, children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(DurationIcon, { className: "w-5 h-5" }) }) }),
                    taskType === "Fixed" && /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { ref: startTimeIconRef, children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("button", { type: "button", title: "Set Start Date", onClick: () => handlePopoverToggle("startTime", startTimeIconRef), className: `p-2 rounded-full transition-colors ${startTime ? "text-blue-600 bg-blue-100 dark:bg-blue-900/30 dark:text-blue-300" : "text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700"}`, children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(ClockIcon, { className: "w-5 h-5" }) }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { ref: calendarIconRef, children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("button", { type: "button", title: "Set Due Date", onClick: () => handlePopoverToggle("dueDate", calendarIconRef), className: `p-2 rounded-full transition-colors ${dueDate ? "text-blue-600 bg-blue-100 dark:bg-blue-900/30 dark:text-blue-300" : "text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700"}`, children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(CalendarIcon, { className: "w-5 h-5" }) }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { ref: listIconRef, children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("button", { type: "button", title: "Select List", onClick: () => handlePopoverToggle("list", listIconRef), className: `p-2 rounded-full transition-colors ${category ? "text-blue-600 bg-blue-100 dark:bg-blue-900/30 dark:text-blue-300" : "text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700"}`, children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(TagIcon, { className: "w-5 h-5" }) }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("button", { type: "button", title: "Add Subtasks", onClick: () => setIsSubtaskSectionVisible((p) => !p), className: `p-2 rounded-full transition-colors ${isSubtaskSectionVisible ? "text-blue-600 bg-blue-100 dark:bg-blue-900/30 dark:text-blue-300" : "text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700"}`, children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(ListCheckIcon, { className: "w-5 h-5" }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { ref: reminderIconRef, children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("button", { type: "button", title: "Set Reminder", onClick: () => handlePopoverToggle("reminder", reminderIconRef), className: `p-2 rounded-full transition-colors ${reminder !== null ? "text-blue-600 bg-blue-100 dark:bg-blue-900/30 dark:text-blue-300" : "text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700"}`, children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(BellIcon, { className: "w-5 h-5" }) }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("button", { type: "button", title: isTodayLocked ? "Due today" : "Toggle Today", onClick: handleToggleToday, className: `p-2 rounded-full transition-colors ${isToday ? "text-yellow-500 bg-yellow-100 dark:bg-yellow-900/30 dark:text-yellow-300" : "text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700"} ${isTodayLocked ? "opacity-70 cursor-default" : ""}`, children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(StarIcon, { className: "w-5 h-5" }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("button", { type: "button", title: "Mark as Important", onClick: () => setIsImportant((p) => !p), className: `p-2 rounded-full transition-colors ${isImportant ? "text-red-600 bg-red-100 dark:bg-red-900/30 dark:text-red-300" : "text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700"}`, children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(FlagIcon, { className: "w-4 h-4" }) })
                  ] }) })
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "flex justify-end pt-2", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("button", { type: "submit", disabled: loading || !title.trim(), className: "px-6 py-3 bg-[var(--color-primary-500)] text-white font-bold rounded-xl fab-shadow hover:opacity-90 transition-all w-full disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2", children: [
                loading && /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(RefreshSpinnerIcon, {}),
                /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("span", { children: loading ? "Saving..." : "Create Task" })
              ] }) })
            ] })
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)(PopoverPortal, { children: [
        activePopover === "duration" && /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "popover-content w-56 bg-[var(--color-surface-container)] rounded-lg modal-shadow p-3 z-[60] animate-page-fade-in", style: popoverPosition, children: /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("label", { className: "text-xs font-medium text-[var(--color-text-secondary)]", children: "Duration (minutes)" }),
          /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("input", { type: "number", value: duration, onChange: (e) => setDuration(e.target.value), placeholder: "e.g. 30", className: "w-full mt-1 p-2 border border-[var(--color-border)] rounded-md text-sm focus:outline-none focus:ring-1 focus:ring-[var(--color-primary-500)] bg-[var(--color-surface-container-low)] text-[var(--color-text-primary)]" })
        ] }) }),
        activePopover === "startTime" && /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "popover-content w-56 bg-[var(--color-surface-container)] rounded-lg modal-shadow p-3 z-[60] animate-page-fade-in space-y-3", style: popoverPosition, children: [
          /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("label", { className: "text-xs font-medium text-[var(--color-text-secondary)]", children: "Start Date" }),
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("input", { type: "date", value: startDate || todayStr, onChange: (e) => setStartDate(e.target.value), className: "w-full mt-1 p-2 border border-[var(--color-border)] rounded-md text-sm focus:outline-none focus:ring-1 focus:ring-[var(--color-primary-500)] bg-[var(--color-surface-container-low)] text-[var(--color-text-primary)]" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("label", { className: "text-xs font-medium text-[var(--color-text-secondary)]", children: "Start Time" }),
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("input", { type: "time", value: startTime, onChange: (e) => setStartTime(e.target.value), className: "w-full mt-1 p-2 border border-[var(--color-border)] rounded-md text-sm focus:outline-none focus:ring-1 focus:ring-[var(--color-primary-500)] bg-[var(--color-surface-container-low)] text-[var(--color-text-primary)]" })
          ] })
        ] }),
        activePopover === "dueDate" && /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "popover-content w-56 bg-[var(--color-surface-container)] rounded-lg modal-shadow p-3 z-[60] animate-page-fade-in", style: popoverPosition, children: /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("label", { className: "text-xs font-medium text-[var(--color-text-secondary)]", children: "Due Date" }),
          /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("input", { type: "date", value: dueDate, onChange: (e) => {
            setDueDate(e.target.value);
          }, className: "w-full mt-1 p-2 border border-[var(--color-border)] rounded-md text-sm focus:outline-none focus:ring-1 focus:ring-[var(--color-primary-500)] bg-[var(--color-surface-container-low)] text-[var(--color-text-primary)]" })
        ] }) }),
        activePopover === "list" && /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "popover-content w-48 bg-[var(--color-surface-container)] rounded-lg modal-shadow p-2 z-[60] animate-page-fade-in max-h-48 overflow-y-auto", style: popoverPosition, children: listOptions.map((listName) => /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("button", { type: "button", onClick: () => {
          setCategory(listName);
          setActivePopover(null);
        }, className: `w-full text-left px-3 py-2 text-sm rounded-md flex justify-between items-center ${category === listName ? "bg-primary-100 text-[var(--color-primary-500)]" : "hover:bg-[var(--color-surface-container-low)] text-[var(--color-text-primary)]"}`, children: [
          /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("span", { children: listName }),
          category === listName && /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(CheckIcon, { className: "w-4 h-4" })
        ] }, listName)) }),
        activePopover === "reminder" && /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "popover-content w-48 bg-[var(--color-surface-container)] rounded-lg modal-shadow p-2 z-[60] animate-page-fade-in max-h-48 overflow-y-auto", style: popoverPosition, children: reminderOptions.map((option) => /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("button", { type: "button", onClick: () => {
          setReminder(option.value);
          setActivePopover(null);
        }, className: `w-full text-left px-3 py-2 text-sm rounded-md flex justify-between items-center ${reminder === option.value ? "bg-primary-100 text-[var(--color-primary-500)]" : "hover:bg-[var(--color-surface-container-low)] text-[var(--color-text-primary)]"}`, children: [
          /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("span", { children: option.label }),
          reminder === option.value && /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(CheckIcon, { className: "w-4 h-4" })
        ] }, option.label)) })
      ] })
    ] });
  };
  var AddTaskScreen_default = AddTaskScreen;

  // screens/TaskDetailScreen.tsx
  var import_react15 = __toESM(require_react());

  // components/common/ConfirmationModal.tsx
  var import_jsx_runtime25 = __toESM(require_jsx_runtime());
  var ConfirmationModal = ({
    isOpen,
    onClose,
    onConfirm,
    onCancel,
    title,
    message,
    confirmText = "Confirm",
    cancelText = "Cancel",
    confirmVariant = "destructive"
  }) => {
    if (!isOpen) return null;
    const confirmButtonClasses = {
      primary: "bg-blue-600 hover:bg-blue-700 focus:ring-blue-500",
      destructive: "bg-red-600 hover:bg-red-700 focus:ring-red-500"
    };
    const handleCancel = () => {
      if (onCancel) {
        onCancel();
      } else {
        onClose();
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)(
      "div",
      {
        className: "fixed inset-0 z-50 flex items-center justify-center transition-all duration-300",
        "aria-labelledby": "confirmation-title",
        role: "dialog",
        "aria-modal": "true",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
            "div",
            {
              className: "absolute inset-0 bg-black/40 transition-opacity duration-300 animate-page-fade-in",
              onClick: onClose,
              "aria-hidden": "true"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { className: "relative w-full max-w-sm p-6 mx-4 bg-[var(--color-surface-container)] rounded-2xl modal-shadow transform transition-all duration-300 animate-card-fade-in", children: [
            /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("h2", { id: "confirmation-title", className: "text-xl font-bold text-[var(--color-text-primary)] text-center", children: title }),
            /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("p", { className: "mt-2 text-[var(--color-text-secondary)] text-center text-sm", children: message }),
            /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { className: "mt-6 grid grid-cols-2 gap-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
                "button",
                {
                  onClick: handleCancel,
                  className: "w-full px-4 py-3 font-semibold text-[var(--color-text-secondary)] bg-[var(--color-surface-container-low)] rounded-xl hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-2",
                  children: cancelText
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
                "button",
                {
                  onClick: onConfirm,
                  className: `w-full px-4 py-3 font-semibold text-white rounded-xl transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 ${confirmButtonClasses[confirmVariant]}`,
                  children: confirmText
                }
              )
            ] })
          ] })
        ]
      }
    );
  };
  var ConfirmationModal_default = ConfirmationModal;

  // screens/TaskDetailScreen.tsx
  var import_jsx_runtime26 = __toESM(require_jsx_runtime());
  var formatChipDate2 = (dateString) => {
    if (!dateString) return "";
    const today = /* @__PURE__ */ new Date();
    today.setHours(0, 0, 0, 0);
    const parts = dateString.split("-").map(Number);
    const date = new Date(parts[0], parts[1] - 1, parts[2]);
    date.setHours(0, 0, 0, 0);
    const diffTime = date.getTime() - today.getTime();
    const diffDays = Math.round(diffTime / (1e3 * 60 * 60 * 24));
    if (diffDays === 0) return "Today";
    if (diffDays === 1) return "Tomorrow";
    if (diffDays > 1 && diffDays <= 3) return `In ${diffDays} days`;
    if (diffDays === -1) return "Yesterday";
    if (diffDays < -1 && diffDays >= -3) return `${Math.abs(diffDays)} days ago`;
    return `${date.getMonth() + 1}/${date.getDate()}`;
  };
  var reminderOptions2 = [
    { label: "On time", value: 0 },
    { label: "5 minutes before", value: 5 },
    { label: "10 minutes before", value: 10 },
    { label: "15 minutes before", value: 15 },
    { label: "30 minutes before", value: 30 },
    { label: "1 hour before", value: 60 }
  ];
  var getReminderLabel2 = (value) => {
    if (value === null || value === void 0) return "";
    const option = reminderOptions2.find((o) => o.value === value);
    return option ? option.label : "";
  };
  var TaskDetailScreen = ({ isOpen, onClose, task, onEdit }) => {
    const { deleteTask } = useData();
    const [isDeleteConfirmOpen, setIsDeleteConfirmOpen] = (0, import_react15.useState)(false);
    const handleConfirmDelete = async () => {
      if (!task) return;
      try {
        await deleteTask(task.id);
        setIsDeleteConfirmOpen(false);
        onClose();
      } catch (error) {
        console.error("Failed to delete task:", error);
        alert("Could not delete the task. Please try again.");
        setIsDeleteConfirmOpen(false);
      }
    };
    const EmptySquareCheckIcon3 = () => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("svg", { className: "w-6 h-6 text-gray-400 dark:text-gray-500", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 1.5, children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("rect", { x: "4", y: "4", width: "16", height: "16", rx: "4" }) });
    const SubtaskCircleIcon3 = ({ completed }) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("svg", { className: `w-5 h-5 transition-colors ${completed ? "text-blue-600 dark:text-blue-400" : "text-gray-400 dark:text-gray-500"}`, fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: completed ? /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" }) : /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("circle", { cx: "12", cy: "12", r: "8" }) });
    const todayStr = (/* @__PURE__ */ new Date()).toISOString().substring(0, 10);
    return /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)(import_jsx_runtime26.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: `fixed inset-0 z-50 grid place-items-center p-4 transition-all duration-300 ${isOpen ? "visible" : "invisible"}`, children: [
        /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: `fixed inset-0 bg-black/40 transition-opacity duration-300 ${isOpen ? "opacity-100" : "opacity-0"}`, onClick: onClose, "aria-hidden": "true" }),
        /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: `w-full max-w-sm bg-transparent transition-transform duration-300 ease-out transform ${isOpen ? "scale-100 opacity-100" : "scale-95 opacity-0"}`, style: { paddingBottom: `env(safe-area-inset-bottom)` }, children: [
          /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-xl card-shadow p-4 overflow-y-auto max-h-[75vh]", children: [
            /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "flex items-start gap-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "pt-1", children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(EmptySquareCheckIcon3, {}) }),
              /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "flex-grow", children: [
                /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("p", { className: "w-full text-base font-semibold text-gray-900 dark:text-gray-100", children: task?.title || "No Title" }),
                task?.notes && /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("p", { className: "w-full text-sm mt-1 text-gray-700 dark:text-gray-300 whitespace-pre-wrap", children: task.notes }),
                task?.subtasks && task.subtasks.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "mt-2 space-y-1 pt-2 border-t border-gray-100 dark:border-gray-700", children: task.subtasks.map((sub) => /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "flex items-center gap-2 group", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(SubtaskCircleIcon3, { completed: sub.completed }),
                  /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("p", { className: `text-sm ${sub.completed ? "text-gray-500 dark:text-gray-400 line-through" : "text-gray-800 dark:text-gray-200"}`, children: sub.text })
                ] }, sub.id)) })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "mt-3 pt-3 border-t border-gray-100 dark:border-gray-700", children: [
              /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "flex items-center gap-2 flex-wrap min-w-0 mb-3 min-h-[1.75rem]", children: [
                task?.duration && /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "flex items-center gap-1.5 px-2.5 py-1 rounded-md bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 text-xs font-semibold", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(DurationIcon, { className: "w-3.5 h-3.5" }),
                  /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("span", { children: [
                    task.duration,
                    " min"
                  ] })
                ] }),
                task?.reminder !== null && task?.reminder !== void 0 && /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "flex items-center gap-1.5 px-2.5 py-1 rounded-md bg-purple-100 dark:bg-purple-900/30 text-purple-800 dark:text-purple-300 text-xs font-semibold", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(BellIcon, { className: "w-3.5 h-3.5" }),
                  /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("span", { className: "truncate", children: getReminderLabel2(task.reminder) })
                ] }),
                task?.startTime && task.type === "Fixed" && /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "flex items-center gap-1.5 px-2.5 py-1 rounded-md bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-300 text-xs font-semibold", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(ClockIcon, { className: "w-3.5 h-3.5" }),
                  /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("span", { className: "truncate", children: [
                    "Starts ",
                    formatChipDate2(task.startDate || todayStr),
                    ", ",
                    (/* @__PURE__ */ new Date("1970-01-01T" + task.startTime)).toLocaleTimeString([], { hour: "numeric", minute: "2-digit" })
                  ] })
                ] }),
                task?.dueDate && /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "flex items-center gap-1.5 px-2.5 py-1 rounded-md bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 text-xs font-semibold", children: /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("span", { children: [
                  "Due ",
                  formatChipDate2(task.dueDate)
                ] }) }),
                task?.category && /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "flex items-center gap-1.5 px-2.5 py-1 rounded-md bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-300 text-xs font-semibold", children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("span", { children: task.category }) })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "flex items-center justify-end", children: /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "flex items-center gap-1", children: [
                /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { title: task?.type, className: `p-2 rounded-full ${task?.type === "Fixed" ? "text-blue-600 dark:text-blue-300 bg-blue-100 dark:bg-blue-900/30" : "text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-700"}`, children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(LockIcon, { className: "w-5 h-5" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { title: "Duration", className: `p-2 rounded-full ${task?.duration ? "text-blue-600 dark:text-blue-300 bg-blue-100 dark:bg-blue-900/30" : "text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-700"}`, children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(DurationIcon, { className: "w-5 h-5" }) }),
                task?.type === "Fixed" && /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { title: "Start Time", className: `p-2 rounded-full ${task?.startTime ? "text-blue-600 dark:text-blue-300 bg-blue-100 dark:bg-blue-900/30" : "text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-700"}`, children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(ClockIcon, { className: "w-5 h-5" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { title: "Due Date", className: `p-2 rounded-full ${task?.dueDate ? "text-blue-600 dark:text-blue-300 bg-blue-100 dark:bg-blue-900/30" : "text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-700"}`, children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(CalendarIcon, { className: "w-5 h-5" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { title: "List", className: `p-2 rounded-full ${task?.category ? "text-blue-600 dark:text-blue-300 bg-blue-100 dark:bg-blue-900/30" : "text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-700"}`, children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(TagIcon, { className: "w-5 h-5" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { title: "Subtasks", className: `p-2 rounded-full ${(task?.subtasks?.length || 0) > 0 ? "text-blue-600 dark:text-blue-300 bg-blue-100 dark:bg-blue-900/30" : "text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-700"}`, children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(ListCheckIcon, { className: "w-5 h-5" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { title: "Reminder", className: `p-2 rounded-full ${task?.reminder !== null && task?.reminder !== void 0 ? "text-blue-600 dark:text-blue-300 bg-blue-100 dark:bg-blue-900/30" : "text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-700"}`, children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(BellIcon, { className: "w-5 h-5" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { title: "Today", className: `p-2 rounded-full ${task?.today ? "text-yellow-500 dark:text-yellow-300 bg-yellow-100 dark:bg-yellow-900/30" : "text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-700"}`, children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(StarIcon, { className: "w-5 h-5" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { title: "Important", className: `p-2 rounded-full ${task?.important ? "text-red-600 dark:text-red-300 bg-red-100 dark:bg-red-900/30" : "text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-700"}`, children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(FlagIcon, { className: "w-4 h-4" }) })
              ] }) })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "grid grid-cols-2 gap-3 pt-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("button", { onClick: () => setIsDeleteConfirmOpen(true), className: "px-4 py-2.5 bg-gray-100 dark:bg-gray-700 text-red-600 dark:text-red-400 font-semibold rounded-xl hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors w-full flex items-center justify-center gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(DeleteButtonIcon, {}),
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("span", { children: "Delete" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("button", { onClick: onEdit, className: "px-4 py-2.5 bg-blue-100 dark:bg-blue-900/40 text-blue-600 dark:text-blue-300 font-semibold rounded-xl hover:bg-blue-200 dark:hover:bg-blue-900/60 transition-colors w-full flex items-center justify-center gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(EditButtonIcon, {}),
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("span", { children: "Edit Task" })
            ] })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
        ConfirmationModal_default,
        {
          isOpen: isDeleteConfirmOpen,
          onClose: () => setIsDeleteConfirmOpen(false),
          onConfirm: handleConfirmDelete,
          title: "Delete Task?",
          message: "Are you sure you want to permanently delete this task? This action cannot be undone.",
          confirmText: "Delete"
        }
      )
    ] });
  };
  var TaskDetailScreen_default = TaskDetailScreen;

  // screens/EditTaskScreen.tsx
  var import_react16 = __toESM(require_react());
  var import_react_dom2 = __toESM(require_react_dom());
  var import_jsx_runtime27 = __toESM(require_jsx_runtime());
  var EmptySquareCheckIcon2 = () => /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("svg", { className: "w-6 h-6 text-gray-400 dark:text-gray-500", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 1.5, children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("rect", { x: "4", y: "4", width: "16", height: "16", rx: "4" }) });
  var SubtaskCircleIcon2 = () => /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("svg", { className: "w-5 h-5 text-gray-500 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 transition-colors", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("circle", { cx: "12", cy: "12", r: "8" }) });
  var formatChipDate3 = (dateString) => {
    if (!dateString) return "";
    const today = /* @__PURE__ */ new Date();
    today.setHours(0, 0, 0, 0);
    const parts = dateString.split("-").map(Number);
    const date = new Date(parts[0], parts[1] - 1, parts[2]);
    date.setHours(0, 0, 0, 0);
    const diffTime = date.getTime() - today.getTime();
    const diffDays = Math.round(diffTime / (1e3 * 60 * 60 * 24));
    if (diffDays === 0) return "Today";
    if (diffDays === 1) return "Tomorrow";
    if (diffDays > 1 && diffDays <= 3) return `In ${diffDays} days`;
    if (diffDays === -1) return "Yesterday";
    if (diffDays < -1 && diffDays >= -3) return `${Math.abs(diffDays)} days ago`;
    return `${date.getMonth() + 1}/${date.getDate()}`;
  };
  var reminderOptions3 = [
    { label: "No notification", value: null },
    { label: "On time", value: 0 },
    { label: "5 minutes before", value: 5 },
    { label: "10 minutes before", value: 10 },
    { label: "15 minutes before", value: 15 },
    { label: "30 minutes before", value: 30 },
    { label: "1 hour before", value: 60 }
  ];
  var getReminderLabel3 = (value) => {
    const option = reminderOptions3.find((o) => o.value === value);
    return option ? option.label : "";
  };
  var EditTaskScreen = ({ isOpen, onClose, task, onSave }) => {
    const { lists: userLists } = useData();
    const listOptions = userLists.map((l) => l.name);
    const keyboardHeight = useKeyboardHeight();
    const [title, setTitle] = (0, import_react16.useState)("");
    const [notes, setNotes] = (0, import_react16.useState)("");
    const [subtasks, setSubtasks] = (0, import_react16.useState)([]);
    const [newSubtaskText, setNewSubtaskText] = (0, import_react16.useState)("");
    const [category, setCategory] = (0, import_react16.useState)("");
    const [isImportant, setIsImportant] = (0, import_react16.useState)(false);
    const [isToday, setIsToday] = (0, import_react16.useState)(false);
    const [taskType, setTaskType] = (0, import_react16.useState)("Flexible");
    const [dueDate, setDueDate] = (0, import_react16.useState)("");
    const [startDate, setStartDate] = (0, import_react16.useState)("");
    const [startTime, setStartTime] = (0, import_react16.useState)("");
    const [duration, setDuration] = (0, import_react16.useState)("");
    const [reminder, setReminder] = (0, import_react16.useState)(null);
    const [activeInput, setActiveInput] = (0, import_react16.useState)(null);
    const [isSubtaskSectionVisible, setIsSubtaskSectionVisible] = (0, import_react16.useState)(false);
    const [loading, setLoading] = (0, import_react16.useState)(false);
    const [error, setError] = (0, import_react16.useState)(null);
    const [activePopover, setActivePopover] = (0, import_react16.useState)(null);
    const [popoverPosition, setPopoverPosition] = (0, import_react16.useState)({});
    const newSubtaskInputRef = (0, import_react16.useRef)(null);
    const calendarIconRef = (0, import_react16.useRef)(null);
    const startTimeIconRef = (0, import_react16.useRef)(null);
    const durationIconRef = (0, import_react16.useRef)(null);
    const listIconRef = (0, import_react16.useRef)(null);
    const reminderIconRef = (0, import_react16.useRef)(null);
    const cardRef = (0, import_react16.useRef)(null);
    const prevIsOpen = (0, import_react16.useRef)(isOpen);
    const todayStr = (0, import_react16.useMemo)(() => (/* @__PURE__ */ new Date()).toISOString().substring(0, 10), []);
    const isTodayLocked = (0, import_react16.useMemo)(() => dueDate === todayStr, [dueDate, todayStr]);
    (0, import_react16.useEffect)(() => {
      if (isTodayLocked) {
        setIsToday(true);
      }
    }, [isTodayLocked]);
    (0, import_react16.useEffect)(() => {
      if (isOpen && !prevIsOpen.current && task) {
        setTitle(task.title || "");
        setNotes(task.notes || "");
        setSubtasks(task.subtasks || []);
        setCategory(task.category || (listOptions.length > 0 ? listOptions[0] : ""));
        setIsImportant(task.important || false);
        setIsToday(task.today || false);
        setTaskType(task.type || "Flexible");
        setDueDate(task.dueDate || "");
        setStartDate(task.startDate || "");
        setStartTime(task.startTime || "");
        setDuration(String(task.duration || ""));
        setReminder(task.reminder ?? null);
        setIsSubtaskSectionVisible((task.subtasks?.length || 0) > 0);
        setActiveInput(null);
        setActivePopover(null);
        setError(null);
        setLoading(false);
      }
      prevIsOpen.current = isOpen;
    }, [isOpen, task, listOptions]);
    const handlePopoverToggle = (0, import_react16.useCallback)((popoverName, ref) => {
      if (activePopover === popoverName) {
        setActivePopover(null);
        return;
      }
      if (ref.current) {
        const iconRect = ref.current.getBoundingClientRect();
        const popoverWidth = 224;
        const popoverHeight = 250;
        const margin = 8;
        let pos = { position: "fixed" };
        if (iconRect.bottom + popoverHeight > window.innerHeight && iconRect.top > popoverHeight) {
          pos.bottom = window.innerHeight - iconRect.top + margin;
        } else {
          pos.top = iconRect.bottom + margin;
        }
        if (iconRect.right - popoverWidth < 0) {
          pos.left = iconRect.left;
        } else {
          pos.left = iconRect.right - popoverWidth;
        }
        setPopoverPosition(pos);
      }
      setActivePopover(popoverName);
    }, [activePopover]);
    (0, import_react16.useEffect)(() => {
      const handleClickOutside = (event) => {
        const target = event.target;
        if (cardRef.current && !cardRef.current.contains(target)) setActiveInput(null);
        if (activePopover && cardRef.current && !cardRef.current.contains(target)) {
          const popovers = document.querySelectorAll(".popover-content");
          let clickedInsidePopover = false;
          popovers.forEach((p) => {
            if (p.contains(target)) clickedInsidePopover = true;
          });
          if (!clickedInsidePopover) {
            setActivePopover(null);
          }
        }
      };
      document.addEventListener("mousedown", handleClickOutside);
      return () => document.removeEventListener("mousedown", handleClickOutside);
    }, [activePopover]);
    const handleSubmit = async (e) => {
      e.preventDefault();
      if (!task) {
        setError("No task to save.");
        return;
      }
      if (!title.trim()) {
        setError("Task name is required.");
        return;
      }
      if (!category) {
        setError("Please select a list.");
        return;
      }
      setLoading(true);
      setError(null);
      try {
        const updatedTask = {
          ...task,
          title,
          category,
          important: isImportant,
          today: isToday,
          notes,
          subtasks: isSubtaskSectionVisible ? subtasks.filter((s) => s.text.trim()) : [],
          dueDate: dueDate || void 0,
          type: taskType,
          startDate: taskType === "Fixed" && startTime ? startDate || (/* @__PURE__ */ new Date()).toISOString().substring(0, 10) : void 0,
          startTime: taskType === "Fixed" ? startTime || void 0 : void 0,
          time: taskType === "Fixed" ? startTime || "--:--" : "--:--",
          duration: duration ? parseInt(duration, 10) : void 0,
          reminder
        };
        await onSave(updatedTask);
        onClose();
      } catch (err) {
        setError("Failed to save the task. Please try again.");
      } finally {
        setLoading(false);
      }
    };
    const handleAddSubtask = () => {
      if (newSubtaskText.trim()) {
        setSubtasks([...subtasks, { id: Date.now(), text: newSubtaskText, completed: false }]);
        setNewSubtaskText("");
        setTimeout(() => newSubtaskInputRef.current?.focus(), 0);
      }
    };
    const handleToggleToday = () => {
      if (isTodayLocked) return;
      setIsToday((prev) => !prev);
    };
    const PopoverPortal = ({ children }) => {
      if (!activePopover) return null;
      return (0, import_react_dom2.createPortal)(children, document.body);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)(import_jsx_runtime27.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)(
        "div",
        {
          className: `fixed inset-0 z-50 grid place-items-center p-4 transition-all duration-300 ${isOpen ? "visible" : "invisible"}`,
          style: { paddingBottom: `max(1rem, ${keyboardHeight}px)` },
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: `fixed inset-0 bg-black/40 transition-opacity duration-300 ${isOpen ? "opacity-100" : "opacity-0"}`, onClick: onClose, "aria-hidden": "true" }),
            /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("form", { onSubmit: handleSubmit, className: `w-full max-w-sm bg-transparent transition-transform duration-300 ease-out transform ${isOpen ? "scale-100 opacity-100" : "scale-95 opacity-0"}`, style: { paddingBottom: `env(safe-area-inset-bottom)` }, children: [
              /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { ref: cardRef, className: "bg-[var(--color-surface-container)] rounded-xl card-shadow p-4 overflow-y-auto max-h-[75vh]", children: [
                error && /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("p", { className: "text-[var(--color-functional-red)] text-sm text-center mb-2", children: error }),
                /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "flex items-start gap-3", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "pt-1", children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(EmptySquareCheckIcon2, {}) }),
                  /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "flex-grow", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("input", { type: "text", value: title, onChange: (e) => setTitle(e.target.value), onFocus: () => setActiveInput("title"), placeholder: "New To-Do", className: "w-full text-base font-semibold text-[var(--color-text-primary)] placeholder-[var(--color-text-primary)] focus:outline-none bg-transparent" }),
                    /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("textarea", { value: notes, onChange: (e) => setNotes(e.target.value), onFocus: () => setActiveInput("notes"), placeholder: "Notes", rows: 1, className: "w-full text-sm mt-1 text-[var(--color-text-secondary)] placeholder-[var(--color-text-secondary)] focus:outline-none resize-none bg-transparent" }),
                    isSubtaskSectionVisible && /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "mt-2 space-y-1 pt-2 border-t border-[var(--color-border)]", children: [
                      subtasks.map((sub) => /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "flex items-center gap-2 group", children: [
                        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(SubtaskCircleIcon2, {}),
                        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("input", { type: "text", value: sub.text, onChange: (e) => {
                          const newText = e.target.value;
                          setSubtasks((subs) => subs.map((s) => s.id === sub.id ? { ...s, text: newText } : s));
                        }, className: "w-full text-sm text-[var(--color-text-primary)] focus:outline-none bg-transparent" }),
                        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("button", { type: "button", onClick: () => setSubtasks((subs) => subs.filter((s) => s.id !== sub.id)), className: "text-[var(--color-text-tertiary)] hover:text-[var(--color-functional-red)] opacity-0 group-hover:opacity-100", children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(TrashIcon, {}) })
                      ] }, sub.id)),
                      /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "flex items-center gap-2", children: [
                        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(SubtaskCircleIcon2, {}),
                        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("input", { ref: newSubtaskInputRef, type: "text", value: newSubtaskText, onChange: (e) => setNewSubtaskText(e.target.value), onKeyDown: (e) => {
                          if (e.key === "Enter") {
                            e.preventDefault();
                            handleAddSubtask();
                          }
                        }, placeholder: "Add item", className: "w-full text-sm text-[var(--color-text-primary)] placeholder-[var(--color-text-secondary)] focus:outline-none bg-transparent" })
                      ] })
                    ] })
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "mt-3 pt-3 border-t border-[var(--color-border)]", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "flex items-center gap-2 flex-wrap min-w-0 mb-3 min-h-[1.75rem]", children: [
                    duration && /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "flex items-center gap-1.5 px-2.5 py-1 rounded-md bg-[var(--color-surface-container-low)] text-[var(--color-text-primary)] text-xs font-semibold animate-page-fade-in", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(DurationIcon, { className: "w-3.5 h-3.5" }),
                      /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("span", { children: [
                        duration,
                        " min"
                      ] })
                    ] }),
                    reminder !== null && /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "flex items-center gap-1.5 px-2.5 py-1 rounded-md bg-purple-100 dark:bg-purple-900/30 text-purple-800 dark:text-purple-300 text-xs font-semibold animate-page-fade-in", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(BellIcon, { className: "w-3.5 h-3.5" }),
                      /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("span", { className: "truncate", children: getReminderLabel3(reminder) })
                    ] }),
                    startTime && taskType === "Fixed" && /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "flex items-center gap-1.5 px-2.5 py-1 rounded-md bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-300 text-xs font-semibold animate-page-fade-in", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(ClockIcon, { className: "w-3.5 h-3.5" }),
                      /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("span", { className: "truncate", children: [
                        "Starts ",
                        formatChipDate3(startDate || todayStr),
                        ", ",
                        (/* @__PURE__ */ new Date("1970-01-01T" + startTime)).toLocaleTimeString([], { hour: "numeric", minute: "2-digit" })
                      ] })
                    ] }),
                    dueDate && /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "flex items-center gap-1.5 px-2.5 py-1 rounded-md bg-[var(--color-surface-container-low)] text-[var(--color-text-primary)] text-xs font-semibold animate-page-fade-in", children: /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("span", { children: [
                      "Due ",
                      formatChipDate3(dueDate)
                    ] }) }),
                    category && /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "flex items-center gap-1.5 px-2.5 py-1 rounded-md bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-300 text-xs font-semibold animate-page-fade-in", children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("span", { children: category }) })
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "flex items-center justify-end", children: /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "flex items-center gap-1", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("button", { type: "button", title: taskType === "Fixed" ? "Set as Flexible" : "Set as Fixed", onClick: () => setTaskType((p) => p === "Fixed" ? "Flexible" : "Fixed"), className: `p-2 rounded-full transition-colors ${taskType === "Fixed" ? "text-blue-600 bg-blue-100 dark:bg-blue-900/30 dark:text-blue-300" : "text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700"}`, children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(LockIcon, { className: "w-5 h-5" }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { ref: durationIconRef, children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("button", { type: "button", title: "Set Duration", onClick: () => handlePopoverToggle("duration", durationIconRef), className: `p-2 rounded-full transition-colors ${duration ? "text-blue-600 bg-blue-100 dark:bg-blue-900/30 dark:text-blue-300" : "text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700"}`, children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(DurationIcon, { className: "w-5 h-5" }) }) }),
                    taskType === "Fixed" && /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { ref: startTimeIconRef, children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("button", { type: "button", title: "Set Start Date", onClick: () => handlePopoverToggle("startTime", startTimeIconRef), className: `p-2 rounded-full transition-colors ${startTime ? "text-blue-600 bg-blue-100 dark:bg-blue-900/30 dark:text-blue-300" : "text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700"}`, children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(ClockIcon, { className: "w-5 h-5" }) }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { ref: calendarIconRef, children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("button", { type: "button", title: "Set Due Date", onClick: () => handlePopoverToggle("dueDate", calendarIconRef), className: `p-2 rounded-full transition-colors ${dueDate ? "text-blue-600 bg-blue-100 dark:bg-blue-900/30 dark:text-blue-300" : "text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700"}`, children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(CalendarIcon, { className: "w-5 h-5" }) }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { ref: listIconRef, children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("button", { type: "button", title: "Select List", onClick: () => handlePopoverToggle("list", listIconRef), className: `p-2 rounded-full transition-colors ${category ? "text-blue-600 bg-blue-100 dark:bg-blue-900/30 dark:text-blue-300" : "text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700"}`, children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(TagIcon, { className: "w-5 h-5" }) }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("button", { type: "button", title: "Add Subtasks", onClick: () => setIsSubtaskSectionVisible((p) => !p), className: `p-2 rounded-full transition-colors ${isSubtaskSectionVisible ? "text-blue-600 bg-blue-100 dark:bg-blue-900/30 dark:text-blue-300" : "text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700"}`, children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(ListCheckIcon, { className: "w-5 h-5" }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { ref: reminderIconRef, children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("button", { type: "button", title: "Set Reminder", onClick: () => handlePopoverToggle("reminder", reminderIconRef), className: `p-2 rounded-full transition-colors ${reminder !== null ? "text-blue-600 bg-blue-100 dark:bg-blue-900/30 dark:text-blue-300" : "text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700"}`, children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(BellIcon, { className: "w-5 h-5" }) }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("button", { type: "button", title: isTodayLocked ? "Due today" : "Toggle Today", onClick: handleToggleToday, className: `p-2 rounded-full transition-colors ${isToday ? "text-yellow-500 bg-yellow-100 dark:bg-yellow-900/30 dark:text-yellow-300" : "text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700"} ${isTodayLocked ? "opacity-70 cursor-default" : ""}`, children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(StarIcon, { className: "w-5 h-5" }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("button", { type: "button", title: "Mark as Important", onClick: () => setIsImportant((p) => !p), className: `p-2 rounded-full transition-colors ${isImportant ? "text-red-600 bg-red-100 dark:bg-red-900/30 dark:text-red-300" : "text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700"}`, children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(FlagIcon, { className: "w-4 h-4" }) })
                  ] }) })
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "flex justify-end pt-2", children: /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("button", { type: "submit", disabled: loading || !title.trim(), className: "px-6 py-3 bg-[var(--color-primary-500)] text-white font-bold rounded-xl fab-shadow hover:opacity-90 transition-all w-full disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2", children: [
                loading && /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(RefreshSpinnerIcon, {}),
                /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("span", { children: loading ? "Saving..." : "Save Changes" })
              ] }) })
            ] })
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)(PopoverPortal, { children: [
        activePopover === "duration" && /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "popover-content w-56 bg-[var(--color-surface-container)] rounded-lg modal-shadow p-3 z-[60] animate-page-fade-in", style: popoverPosition, children: /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("label", { className: "text-xs font-medium text-[var(--color-text-secondary)]", children: "Duration (minutes)" }),
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("input", { type: "number", value: duration, onChange: (e) => setDuration(e.target.value), placeholder: "e.g. 30", className: "w-full mt-1 p-2 border border-[var(--color-border)] rounded-md text-sm focus:outline-none focus:ring-1 focus:ring-[var(--color-primary-500)] bg-[var(--color-surface-container-low)] text-[var(--color-text-primary)]" })
        ] }) }),
        activePopover === "startTime" && /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "popover-content w-56 bg-[var(--color-surface-container)] rounded-lg modal-shadow p-3 z-[60] animate-page-fade-in space-y-3", style: popoverPosition, children: [
          /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("label", { className: "text-xs font-medium text-[var(--color-text-secondary)]", children: "Start Date" }),
            /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("input", { type: "date", value: startDate || todayStr, onChange: (e) => setStartDate(e.target.value), className: "w-full mt-1 p-2 border border-[var(--color-border)] rounded-md text-sm focus:outline-none focus:ring-1 focus:ring-[var(--color-primary-500)] bg-[var(--color-surface-container-low)] text-[var(--color-text-primary)]" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("label", { className: "text-xs font-medium text-[var(--color-text-secondary)]", children: "Start Time" }),
            /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("input", { type: "time", value: startTime, onChange: (e) => setStartTime(e.target.value), className: "w-full mt-1 p-2 border border-[var(--color-border)] rounded-md text-sm focus:outline-none focus:ring-1 focus:ring-[var(--color-primary-500)] bg-[var(--color-surface-container-low)] text-[var(--color-text-primary)]" })
          ] })
        ] }),
        activePopover === "dueDate" && /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "popover-content w-56 bg-[var(--color-surface-container)] rounded-lg modal-shadow p-3 z-[60] animate-page-fade-in", style: popoverPosition, children: /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("label", { className: "text-xs font-medium text-[var(--color-text-secondary)]", children: "Due Date" }),
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("input", { type: "date", value: dueDate, onChange: (e) => {
            setDueDate(e.target.value);
          }, className: "w-full mt-1 p-2 border border-[var(--color-border)] rounded-md text-sm focus:outline-none focus:ring-1 focus:ring-[var(--color-primary-500)] bg-[var(--color-surface-container-low)] text-[var(--color-text-primary)]" })
        ] }) }),
        activePopover === "list" && /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "popover-content w-48 bg-[var(--color-surface-container)] rounded-lg modal-shadow p-2 z-[60] animate-page-fade-in max-h-48 overflow-y-auto", style: popoverPosition, children: listOptions.map((listName) => /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("button", { type: "button", onClick: () => {
          setCategory(listName);
          setActivePopover(null);
        }, className: `w-full text-left px-3 py-2 text-sm rounded-md flex justify-between items-center ${category === listName ? "bg-primary-100 text-[var(--color-primary-500)]" : "hover:bg-[var(--color-surface-container-low)] text-[var(--color-text-primary)]"}`, children: [
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("span", { children: listName }),
          category === listName && /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(CheckIcon, { className: "w-4 h-4" })
        ] }, listName)) }),
        activePopover === "reminder" && /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "popover-content w-48 bg-[var(--color-surface-container)] rounded-lg modal-shadow p-2 z-[60] animate-page-fade-in max-h-48 overflow-y-auto", style: popoverPosition, children: reminderOptions3.map((option) => /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("button", { type: "button", onClick: () => {
          setReminder(option.value);
          setActivePopover(null);
        }, className: `w-full text-left px-3 py-2 text-sm rounded-md flex justify-between items-center ${reminder === option.value ? "bg-primary-100 text-[var(--color-primary-500)]" : "hover:bg-[var(--color-surface-container-low)] text-[var(--color-text-primary)]"}`, children: [
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("span", { children: option.label }),
          reminder === option.value && /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(CheckIcon, { className: "w-4 h-4" })
        ] }, option.label)) })
      ] })
    ] });
  };
  var EditTaskScreen_default = EditTaskScreen;

  // components/illustrations/Illustrations.tsx
  var import_jsx_runtime28 = __toESM(require_jsx_runtime());
  var IllustrationContainer = ({ children, title, message, cta }) => /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "flex flex-col items-center justify-center text-center p-8 h-full animate-page-fade-in", children: [
    /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "w-40 h-40 text-[var(--color-text-tertiary)] opacity-60", children }),
    /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("h3", { className: "text-lg font-bold text-[var(--color-text-primary)] mt-6", children: title }),
    /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("p", { className: "text-[var(--color-text-secondary)] mt-1 max-w-xs", children: message }),
    cta && /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "mt-6 w-full max-w-xs", children: cta })
  ] });
  var EmptyTodayIllustration = ({ onAddTask }) => /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
    IllustrationContainer,
    {
      title: "Your day is clear!",
      message: "Enjoy your free time, or add a new task to get started.",
      cta: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(Button_default, { onClick: onAddTask, variant: "primary", children: "+ Add Task" }),
      children: /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "M8 12.5L10.5 15L16 9.5", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "M12 21C16.9706 21 21 16.9706 21 12C21 7.02944 16.9706 3 12 3C7.02944 3 3 7.02944 3 12C3 16.9706 7.02944 21 12 21Z", stroke: "currentColor", strokeWidth: "1.5" }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "M12 3V1.5", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "M12 22.5V21", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "M21 12L22.5 12", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "M1.5 12L3 12", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "M19.0711 4.92896L20.1317 3.8683", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "M3.86816 20.1317L4.92883 19.0711", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "M19.0711 19.0711L20.1317 20.1317", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "M3.86816 3.8683L4.92883 4.92896", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round" })
      ] })
    }
  );
  var EmptyListsIllustration = ({ onAddList }) => /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
    IllustrationContainer,
    {
      title: "No lists yet",
      message: "Create a list to organize your tasks into projects or categories.",
      cta: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(Button_default, { onClick: onAddList, variant: "primary", children: "+ Create List" }),
      children: /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "M20 13V9.5C20 8.39543 19.1046 7.5 18 7.5H12L10.5 5.25H6C4.89543 5.25 4 6.14543 4 7.25V16.75C4 17.8546 4.89543 18.75 6 18.75H12", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "M16.5 15.5V21.5M19.5 18.5H13.5", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" })
      ] })
    }
  );
  var EmptyListDetailIllustration = ({ onAddTask }) => /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
    IllustrationContainer,
    {
      title: "List is empty",
      message: "Add a task to this list to get started on your goals.",
      cta: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(Button_default, { onClick: onAddTask, variant: "primary", children: "+ Add Task" }),
      children: /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "M15.5 2.5H8.5C7.39543 2.5 6.5 3.39543 6.5 4.5V19.5C6.5 20.6046 7.39543 21.5 8.5 21.5H15.5C16.6046 21.5 17.5 20.6046 17.5 19.5V4.5C17.5 3.39543 16.6046 2.5 15.5 2.5Z", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "M9.5 7.5H14.5", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "M9.5 11.5H14.5", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "M9.5 15.5H12.5", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" })
      ] })
    }
  );
  var EmptyCalendarIllustration = () => /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
    IllustrationContainer,
    {
      title: "No tasks scheduled",
      message: "This day is free. Enjoy the calm or schedule a new task.",
      children: /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "M3.5 8.5H20.5", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "M8.5 3.5V5.5", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "M15.5 3.5V5.5", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "M19.5 20.5H4.5C3.94772 20.5 3.5 20.0523 3.5 19.5V6.5C3.5 5.94772 3.94772 5.5 4.5 5.5H19.5C20.0523 5.5 20.5 5.94772 20.5 6.5V19.5C20.5 20.0523 20.0523 20.5 19.5 20.5Z", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "M12 12.5V14M12 15.5V14M12 14H13.5M12 14H10.5M14.25 11.75L15 11M14.25 16.25L15 17M9.75 11.75L9 11M9.75 16.25L9 17", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" })
      ] })
    }
  );
  var EmptyMomentsIllustration = ({ onAddMoment }) => /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
    IllustrationContainer,
    {
      title: "Capture a moment",
      message: "Your journal is waiting for its first entry. Add a photo to begin.",
      cta: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(Button_default, { onClick: onAddMoment, variant: "primary", children: "+ Add Moment" }),
      children: /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "M19.5 21H4.5C3.94772 21 3.5 20.5523 3.5 20V4C3.5 3.44772 3.94772 3 4.5 3H19.5C20.0523 3 20.5 3.44772 20.5 4V20C20.5 20.5523 20.0523 21 19.5 21Z", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("circle", { cx: "9.5", cy: "8", r: "1.5", stroke: "currentColor", strokeWidth: "1.5" }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "M6.5 18L10.5 14L13.5 17L15.5 15L17.5 17", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" })
      ] })
    }
  );

  // screens/TimePickerModal.tsx
  var import_react17 = __toESM(require_react());
  var import_jsx_runtime29 = __toESM(require_jsx_runtime());
  var ClockIcon3 = () => /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("svg", { className: "w-8 h-8 text-gray-400 dark:text-gray-500", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 1.5, children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z" }) });
  var TimePickerModal = ({ isOpen, onClose, onTimeSelect, initialTime, onClearTime }) => {
    const [hour, setHour] = (0, import_react17.useState)("09");
    const [minute, setMinute] = (0, import_react17.useState)("00");
    const hourInputRef = (0, import_react17.useRef)(null);
    const minuteInputRef = (0, import_react17.useRef)(null);
    (0, import_react17.useEffect)(() => {
      if (isOpen) {
        if (initialTime) {
          const [initialH = "09", initialM = "00"] = initialTime.split(":");
          setHour(initialH);
          setMinute(initialM);
        } else {
          const now2 = /* @__PURE__ */ new Date();
          setHour(String(now2.getHours()).padStart(2, "0"));
          setMinute(String(now2.getMinutes()).padStart(2, "0"));
        }
      }
    }, [isOpen, initialTime]);
    const handleHourChange = (e) => {
      const value = e.target.value.slice(-2);
      if (value === "" || parseInt(value, 10) >= 0 && parseInt(value, 10) <= 23) {
        setHour(value);
        if (value.length === 2) {
          minuteInputRef.current?.focus();
          minuteInputRef.current?.select();
        }
      }
    };
    const handleMinuteChange = (e) => {
      const value = e.target.value.slice(-2);
      if (value === "" || parseInt(value, 10) >= 0 && parseInt(value, 10) <= 59) {
        setMinute(value);
      }
    };
    const handleBlur = (field) => {
      if (field === "hour") setHour((val) => val.padStart(2, "0"));
      if (field === "minute") setMinute((val) => val.padStart(2, "0"));
    };
    const handleSave = () => {
      const finalHour = hour.padStart(2, "0");
      const finalMinute = minute.padStart(2, "0");
      onTimeSelect(`${finalHour}:${finalMinute}`);
    };
    const handleClear = () => {
      if (onClearTime) {
        onClearTime();
      }
    };
    if (!isOpen) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)(
      "div",
      {
        className: "fixed inset-0 z-50 flex items-center justify-center transition-opacity duration-300",
        role: "dialog",
        "aria-modal": "true",
        "aria-labelledby": "time-picker-title",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
            "div",
            {
              className: "absolute inset-0 bg-black/40 animate-page-fade-in",
              onClick: onClose,
              "aria-hidden": "true"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "relative w-full max-w-xs p-6 mx-4 bg-white dark:bg-gray-800 rounded-2xl modal-shadow transform transition-all duration-300 animate-card-fade-in", children: [
            /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "text-center", children: [
              /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", { className: "flex justify-center mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(ClockIcon3, {}) }),
              /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("h2", { id: "time-picker-title", className: "text-xl font-bold text-gray-900 dark:text-gray-100", children: "Set Start Time" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "flex items-center justify-center text-5xl font-bold my-6 text-gray-800 dark:text-gray-200", children: [
              /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
                "input",
                {
                  ref: hourInputRef,
                  type: "text",
                  inputMode: "numeric",
                  value: hour,
                  onChange: handleHourChange,
                  onBlur: () => handleBlur("hour"),
                  onFocus: (e) => e.target.select(),
                  className: "w-20 text-center bg-gray-100 dark:bg-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500",
                  maxLength: 2,
                  pattern: "\\d*"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("span", { className: "mx-2", children: ":" }),
              /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
                "input",
                {
                  ref: minuteInputRef,
                  type: "text",
                  inputMode: "numeric",
                  value: minute,
                  onChange: handleMinuteChange,
                  onBlur: () => handleBlur("minute"),
                  onFocus: (e) => e.target.select(),
                  className: "w-20 text-center bg-gray-100 dark:bg-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500",
                  maxLength: 2,
                  pattern: "\\d*"
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "mt-6 space-y-3", children: [
              initialTime && onClearTime && /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
                "button",
                {
                  onClick: handleClear,
                  className: "w-full px-4 py-3 font-semibold text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-900/30 rounded-xl hover:bg-red-100 dark:hover:bg-red-900/50 transition-colors focus:outline-none focus:ring-2 focus:ring-red-400 focus:ring-offset-2",
                  children: "Unschedule"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "grid grid-cols-2 gap-3", children: [
                /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
                  "button",
                  {
                    onClick: onClose,
                    className: "w-full px-4 py-3 font-semibold text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-xl hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-2",
                    children: "Cancel"
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
                  "button",
                  {
                    onClick: handleSave,
                    className: "w-full px-4 py-3 font-semibold text-white bg-blue-600 rounded-xl hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2",
                    children: "Done"
                  }
                )
              ] })
            ] })
          ] })
        ]
      }
    );
  };
  var TimePickerModal_default = TimePickerModal;

  // components/views/TimelineView.tsx
  var import_react18 = __toESM(require_react());
  var import_jsx_runtime30 = __toESM(require_jsx_runtime());
  var timeToMinutes2 = (timeStr) => {
    if (!timeStr || !timeStr.includes(":")) return 0;
    const [hours, minutes] = timeStr.split(":").map(Number);
    return hours * 60 + minutes;
  };
  var minutesToTime2 = (totalMinutes) => {
    const hours = Math.floor(totalMinutes / 60);
    const minutes = totalMinutes % 60;
    return `${String(hours).padStart(2, "0")}:${String(minutes).padStart(2, "0")}`;
  };
  var PIXELS_PER_HOUR = 80;
  var START_HOUR = 7;
  var END_HOUR = 22;
  var colorVariants3 = {
    green: { bg: "bg-green-100", border: "border-green-500", text: "text-green-800", subtext: "text-green-600" },
    blue: { bg: "bg-blue-100", border: "border-blue-500", text: "text-blue-800", subtext: "text-blue-600" },
    pink: { bg: "bg-pink-100", border: "border-pink-500", text: "text-pink-800", subtext: "text-pink-600" },
    purple: { bg: "bg-purple-100", border: "border-purple-500", text: "text-purple-800", subtext: "text-purple-600" },
    yellow: { bg: "bg-yellow-100", border: "border-yellow-500", text: "text-yellow-800", subtext: "text-yellow-600" },
    red: { bg: "bg-red-100", border: "border-red-500", text: "text-red-800", subtext: "text-red-600" },
    orange: { bg: "bg-orange-100", border: "border-orange-500", text: "text-orange-800", subtext: "text-orange-600" },
    gray: { bg: "bg-gray-100", border: "border-gray-500", text: "text-gray-800", subtext: "text-gray-600" }
  };
  var UnscheduledTaskCard = ({ task, onClick }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(
      "button",
      {
        onClick,
        className: "bg-white rounded-lg p-3 w-40 flex-shrink-0 card-shadow text-left cursor-pointer hover:bg-gray-50 transition-colors border-l-4",
        style: { borderColor: task.color },
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("p", { className: "font-semibold text-sm truncate text-gray-800", children: task.title }),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("p", { className: "text-xs text-gray-500", children: [
            task.duration,
            " min"
          ] })
        ]
      }
    );
  };
  var ScheduledTask = ({ task, colors: colors3, top, height, onShortPress, onLongPress, onComplete, onUncomplete, isCompleting, isUncompleting, isOverdue }) => {
    const pressTimerRef = (0, import_react18.useRef)(null);
    const isClickRef = (0, import_react18.useRef)(true);
    const interactionStartedOnButton = (0, import_react18.useRef)(false);
    const fireworksData = [
      { color: "blue", particles: 6, delay: 0 },
      { color: "pink", particles: 6, delay: 0.1 },
      { color: "yellow", particles: 6, delay: 0.2 }
    ];
    const cancelLongPress = (0, import_react18.useCallback)(() => {
      if (pressTimerRef.current) {
        clearTimeout(pressTimerRef.current);
        pressTimerRef.current = null;
      }
    }, []);
    const onPointerDown = (0, import_react18.useCallback)((e) => {
      const targetEl = e.target;
      interactionStartedOnButton.current = !!targetEl.closest("button");
      if (interactionStartedOnButton.current || e.button !== 0) return;
      isClickRef.current = true;
      cancelLongPress();
      if (!task.completed) {
        pressTimerRef.current = setTimeout(() => {
          isClickRef.current = false;
          onLongPress(task);
        }, 500);
      }
    }, [cancelLongPress, onLongPress, task]);
    const onPointerUp = (0, import_react18.useCallback)(() => {
      cancelLongPress();
      if (isClickRef.current && !interactionStartedOnButton.current) {
        onShortPress(task);
      }
      interactionStartedOnButton.current = false;
      isClickRef.current = true;
    }, [cancelLongPress, onShortPress, task]);
    return /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(
      "div",
      {
        onPointerDown,
        onPointerUp,
        onPointerLeave: cancelLongPress,
        onPointerCancel: cancelLongPress,
        onContextMenu: (e) => e.preventDefault(),
        className: `absolute right-0 rounded-lg p-2 overflow-hidden cursor-pointer select-none flex items-start gap-2 ${colors3.bg} ${colors3.border} ${isCompleting ? "animate-card-fade-out" : ""}`,
        style: { top, height: Math.max(height, 20), left: "3rem", borderLeftWidth: "4px", willChange: "transform, opacity" },
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", { className: "pt-0.5", children: task.completed ? /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
            "button",
            {
              onClick: (e) => {
                e.stopPropagation();
                onUncomplete(task.id);
              },
              className: `w-4.5 h-4.5 rounded-full bg-blue-600 flex items-center justify-center text-white shrink-0 hover:bg-blue-700 transition-colors
                            ${isUncompleting ? "animate-uncheck" : ""}
                        `,
              "aria-label": "Mark task as incomplete",
              disabled: isUncompleting,
              children: /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("svg", { className: "w-2.5 h-2.5", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 5, d: "M5 13l4 4L19 7" }) })
            }
          ) : /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
            "button",
            {
              onClick: (e) => {
                e.stopPropagation();
                onComplete(task.id);
              },
              className: `relative w-4.5 h-4.5 rounded-full border-2 shrink-0 transition-colors flex items-center justify-center
                            ${isCompleting ? "animate-checkmark" : "border-gray-400 hover:border-blue-500"}
                        `,
              "aria-label": "Mark task as complete",
              disabled: isCompleting,
              children: isCompleting && /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(import_jsx_runtime30.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("svg", { className: "w-2.5 h-2.5 text-white animate-checkmark-icon", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 5, d: "M5 13l4 4L19 7" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", { className: "fireworks-container", children: fireworksData.map(
                  (set, setIndex) => Array.from({ length: set.particles }).map((_, i) => /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
                    "div",
                    {
                      className: "rotator",
                      style: { transform: `rotate(${i * (360 / set.particles)}deg)` },
                      children: /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
                        "div",
                        {
                          className: `particle particle-${set.color}`,
                          style: { animationDelay: `${set.delay}s` }
                        }
                      )
                    },
                    `${setIndex}-${i}`
                  ))
                ) })
              ] })
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "flex-grow min-w-0", children: [
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("p", { className: `font-bold text-sm truncate ${isOverdue && !task.completed ? "text-[var(--color-functional-red)]" : colors3.text}`, children: task.title }),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("p", { className: `text-xs ${isOverdue && !task.completed ? "text-[var(--color-functional-red)]" : colors3.subtext}`, children: [
              task.startTime,
              " - ",
              minutesToTime2(timeToMinutes2(task.startTime) + (task.duration || 30))
            ] })
          ] })
        ]
      }
    );
  };
  var isTaskOverdue = (task, now2) => {
    if (task.completed || !task.startTime || !task.duration) {
      return false;
    }
    const endMinutes = timeToMinutes2(task.startTime) + task.duration;
    const nowMinutes = now2.getHours() * 60 + now2.getMinutes();
    return endMinutes < nowMinutes;
  };
  var TimelineView = ({
    tasks,
    lists,
    currentTime,
    onUnscheduledTaskClick,
    onScheduledTaskShortPress,
    onScheduledTaskLongPress,
    onCompleteTask,
    onUncompleteTask,
    completingTaskId,
    uncompletingTaskId
  }) => {
    const [currentTimePosition, setCurrentTimePosition] = (0, import_react18.useState)(null);
    const timelineContainerRef = (0, import_react18.useRef)(null);
    (0, import_react18.useEffect)(() => {
      const calculatePosition = () => {
        const now2 = /* @__PURE__ */ new Date();
        const currentHour = now2.getHours();
        const currentMinutes = now2.getMinutes();
        if (currentHour >= START_HOUR && currentHour <= END_HOUR) {
          const totalMinutes = currentHour * 60 + currentMinutes;
          const position = (totalMinutes - START_HOUR * 60) / 60 * PIXELS_PER_HOUR;
          setCurrentTimePosition(position);
          return position;
        } else {
          setCurrentTimePosition(null);
          return null;
        }
      };
      const initialPosition = calculatePosition();
      if (initialPosition !== null && timelineContainerRef.current) {
        const scrollOffset = 40;
        timelineContainerRef.current.scrollTo({
          top: initialPosition - scrollOffset,
          behavior: "smooth"
        });
      }
      const intervalId = setInterval(calculatePosition, 6e4);
      return () => clearInterval(intervalId);
    }, []);
    const listColorMap = (0, import_react18.useMemo)(() => {
      return lists.reduce((acc, list) => {
        acc[list.name] = list.color;
        return acc;
      }, {});
    }, [lists]);
    const { unscheduledTasks, scheduledTasks } = (0, import_react18.useMemo)(() => {
      const todayTasks = tasks.filter((t) => t.today);
      return {
        unscheduledTasks: todayTasks.filter((t) => !t.startTime && t.duration && !t.completed),
        scheduledTasks: todayTasks.filter((t) => t.startTime)
      };
    }, [tasks]);
    const hours = Array.from({ length: END_HOUR - START_HOUR + 1 }, (_, i) => i + START_HOUR);
    return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", { className: "h-full flex flex-col bg-gray-50", children: /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "flex-grow flex flex-col overflow-hidden", children: [
      /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("section", { className: "flex-shrink-0 py-4 px-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("h2", { className: "text-lg font-bold text-gray-800 mb-3", children: "Unscheduled" }),
        /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", { className: "flex gap-3 overflow-x-auto pb-3 -mx-6 px-6", children: unscheduledTasks.length > 0 ? unscheduledTasks.map(
          (task) => /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
            UnscheduledTaskCard,
            {
              task: { ...task, color: listColorMap[task.category] },
              onClick: () => onUnscheduledTaskClick(task)
            },
            task.id
          )
        ) : /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "w-full text-center py-4 bg-gray-100 rounded-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("p", { className: "text-gray-600 font-semibold text-sm", children: "No tasks to schedule" }),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("p", { className: "text-gray-500 text-xs mt-1 px-2", children: "Add a duration to flexible tasks on your 'Today' list to see them here." })
        ] }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
        "section",
        {
          ref: timelineContainerRef,
          className: "flex-grow overflow-y-auto relative",
          children: /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "relative h-full px-6", style: { height: (END_HOUR - START_HOUR + 1) * PIXELS_PER_HOUR }, children: [
            hours.map((hour) => /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "absolute w-full flex items-center", style: { top: (hour - START_HOUR) * PIXELS_PER_HOUR, left: 0, right: 0 }, children: [
              /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("span", { className: "text-xs text-gray-400 w-12 text-right pr-2", children: `${hour % 12 === 0 ? 12 : hour % 12}${hour < 12 || hour === 24 ? "am" : "pm"}` }),
              /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", { className: "flex-grow border-t border-gray-200" })
            ] }, hour)),
            scheduledTasks.map((task) => {
              const startMinutes = timeToMinutes2(task.startTime);
              const top = (startMinutes - START_HOUR * 60) / 60 * PIXELS_PER_HOUR;
              const height = (task.duration || 30) / 60 * PIXELS_PER_HOUR;
              const colorName = listColorMap[task.category] || "gray";
              let colors3 = colorVariants3[colorName] || colorVariants3.gray;
              const isOverdue = isTaskOverdue(task, currentTime);
              if (task.completed) {
                colors3 = {
                  bg: "bg-gray-100",
                  border: "border-gray-400",
                  text: "text-gray-500 line-through",
                  subtext: "text-gray-400"
                };
              }
              return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
                ScheduledTask,
                {
                  task,
                  colors: colors3,
                  top,
                  height,
                  onShortPress: onScheduledTaskShortPress,
                  onLongPress: onScheduledTaskLongPress,
                  onComplete: onCompleteTask,
                  onUncomplete: onUncompleteTask,
                  isCompleting: completingTaskId === task.id,
                  isUncompleting: uncompletingTaskId === task.id,
                  isOverdue
                },
                task.id
              );
            }),
            currentTimePosition !== null && /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(
              "div",
              {
                className: "absolute left-12 right-0 flex items-center z-10 pointer-events-none",
                style: { top: currentTimePosition },
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", { className: "w-2.5 h-2.5 bg-red-500 rounded-full -ml-1" }),
                  /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", { className: "flex-grow h-px bg-red-500" })
                ]
              }
            )
          ] })
        }
      )
    ] }) });
  };
  var TimelineView_default = TimelineView;

  // screens/DurationPickerModal.tsx
  var import_react19 = __toESM(require_react());
  var import_jsx_runtime31 = __toESM(require_jsx_runtime());
  var ClockIcon4 = () => /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("svg", { className: "w-8 h-8 text-gray-400 dark:text-gray-500", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 1.5, children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z" }) });
  var DurationPickerModal = ({ isOpen, onClose, onDurationSelect, initialDuration }) => {
    const [duration, setDuration] = (0, import_react19.useState)("30");
    const durationInputRef = (0, import_react19.useRef)(null);
    (0, import_react19.useEffect)(() => {
      if (isOpen) {
        setDuration(String(initialDuration || 30));
      }
    }, [isOpen, initialDuration]);
    const handleDurationChange = (e) => {
      const value = e.target.value;
      if (value === "" || /^\d*$/.test(value)) {
        setDuration(value);
      }
    };
    const handleBlur = () => {
      if (duration === "") setDuration("0");
    };
    const handleSave = () => {
      const finalDuration = parseInt(duration, 10);
      if (!isNaN(finalDuration)) {
        onDurationSelect(finalDuration);
      }
      onClose();
    };
    if (!isOpen) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(
      "div",
      {
        className: "fixed inset-0 z-50 flex items-center justify-center transition-opacity duration-300",
        role: "dialog",
        "aria-modal": "true",
        "aria-labelledby": "duration-picker-title",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
            "div",
            {
              className: "absolute inset-0 bg-black/40 animate-page-fade-in",
              onClick: onClose,
              "aria-hidden": "true"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "relative w-full max-w-xs p-6 mx-4 bg-white dark:bg-gray-800 rounded-2xl modal-shadow transform transition-all duration-300 animate-card-fade-in", children: [
            /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "text-center", children: [
              /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("div", { className: "flex justify-center mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(ClockIcon4, {}) }),
              /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("h2", { id: "duration-picker-title", className: "text-xl font-bold text-gray-900 dark:text-gray-100", children: "Set Duration" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "flex items-center justify-center my-6 text-gray-800 dark:text-gray-200", children: [
              /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
                "input",
                {
                  ref: durationInputRef,
                  type: "text",
                  inputMode: "numeric",
                  value: duration,
                  onChange: handleDurationChange,
                  onBlur: handleBlur,
                  onFocus: (e) => e.target.select(),
                  className: "w-28 text-center text-5xl font-bold bg-gray-100 dark:bg-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 py-2",
                  maxLength: 3,
                  pattern: "\\d*"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("span", { className: "ml-3 text-lg text-gray-500 dark:text-gray-400 font-medium", children: "minutes" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "grid grid-cols-2 gap-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
                "button",
                {
                  onClick: onClose,
                  className: "w-full px-4 py-3 font-semibold text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-xl hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-2",
                  children: "Cancel"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
                "button",
                {
                  onClick: handleSave,
                  className: "w-full px-4 py-3 font-semibold text-white bg-blue-600 rounded-xl hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2",
                  children: "Done"
                }
              )
            ] })
          ] })
        ]
      }
    );
  };
  var DurationPickerModal_default = DurationPickerModal;

  // hooks/usePlanningSettings.tsx
  var defaultSettings = {
    workStartTime: "08:30",
    lunchStartTime: "11:30",
    lunchEndTime: "13:00",
    dinnerStartTime: "17:30",
    dinnerEndTime: "18:00",
    workEndTime: "17:30",
    taskGap: 15,
    allowTaskSplitting: true,
    algorithm: "sequential"
  };
  function usePlanningSettings() {
    const [settings, setSettings] = useLocalStorage_default(
      "planning-settings",
      defaultSettings
    );
    return [settings, setSettings];
  }
  var usePlanningSettings_default = usePlanningSettings;

  // screens/PlanningSettingsDrawer.tsx
  var import_react20 = __toESM(require_react());
  var import_jsx_runtime32 = __toESM(require_jsx_runtime());
  var TimeInput = ({ label, value, onChange }) => /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("label", { className: "block text-sm font-medium text-gray-500 dark:text-gray-400", children: label }),
    /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
      "input",
      {
        type: "time",
        value,
        onChange: (e) => onChange(e.target.value),
        className: "mt-1 w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-sm"
      }
    )
  ] });
  var NumberInput = ({ label, value, onChange, unit }) => /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("label", { className: "block text-sm font-medium text-gray-500 dark:text-gray-400", children: label }),
    /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "mt-1 relative rounded-md shadow-sm", children: [
      /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
        "input",
        {
          type: "number",
          value,
          onChange: (e) => onChange(parseInt(e.target.value, 10) || 0),
          className: "w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-sm"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none", children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("span", { className: "text-gray-500 dark:text-gray-400 sm:text-sm", children: unit }) })
    ] })
  ] });
  var Toggle = ({ label, enabled, setEnabled }) => /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "flex items-center justify-between", children: [
    /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("span", { className: "font-medium text-gray-700 dark:text-gray-300", children: label }),
    /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
      "button",
      {
        type: "button",
        onClick: () => setEnabled(!enabled),
        className: `relative inline-flex items-center h-6 w-11 rounded-full transition-colors ${enabled ? "bg-blue-600" : "bg-gray-200 dark:bg-gray-600"}`,
        children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("span", { className: `inline-block w-4 h-4 transform bg-white rounded-full transition-transform ${enabled ? "translate-x-6" : "translate-x-1"}` })
      }
    )
  ] });
  var PlanningSettingsDrawer = ({ isOpen, onClose }) => {
    const [savedSettings, setSavedSettings] = usePlanningSettings_default();
    const [localSettings, setLocalSettings] = (0, import_react20.useState)(savedSettings);
    (0, import_react20.useEffect)(() => {
      if (isOpen) {
        setLocalSettings(savedSettings);
      }
    }, [isOpen, savedSettings]);
    const handleSave = () => {
      setSavedSettings(localSettings);
      onClose();
    };
    const handleSettingChange = (key, value) => {
      setLocalSettings((prev) => ({ ...prev, [key]: value }));
    };
    return /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: `fixed inset-0 z-50 flex items-end transition-all duration-300 ${isOpen ? "visible" : "invisible"}`, children: [
      /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
        "div",
        {
          className: `fixed inset-0 bg-black/40 transition-opacity duration-300 ${isOpen ? "opacity-100" : "opacity-0"}`,
          onClick: onClose,
          "aria-hidden": "true"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)(
        "div",
        {
          className: `w-full bg-gray-50 dark:bg-gray-900 rounded-t-3xl shadow-2xl transition-transform duration-300 ease-out transform ${isOpen ? "translate-y-0" : "translate-y-full"}`,
          role: "dialog",
          "aria-modal": "true",
          "aria-labelledby": "planning-settings-title",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("header", { className: "pt-3 px-4 pb-3 border-b border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 rounded-t-3xl sticky top-0 z-10", style: { paddingTop: `calc(0.75rem + var(--status-bar-height, env(safe-area-inset-top)))` }, children: [
              /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "w-8 h-1 bg-gray-300 dark:bg-gray-600 rounded-full mx-auto mb-3" }),
              /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "flex justify-between items-center h-8", children: [
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("button", { onClick: onClose, className: "p-1 text-gray-500 dark:text-gray-300 hover:text-gray-800 dark:hover:text-gray-100 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(CloseIcon, {}) }),
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("h2", { id: "planning-settings-title", className: "text-base font-bold text-gray-900 dark:text-gray-100", children: "Planning Settings" }),
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("button", { onClick: handleSave, className: "p-1 text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 rounded-full hover:bg-blue-50 dark:hover:bg-blue-900/30 transition-colors", children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(CheckIcon, {}) })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)(
              "div",
              {
                className: "p-4 space-y-6 overflow-y-auto max-h-[75vh] pb-24",
                style: { paddingBottom: `calc(6rem + env(safe-area-inset-bottom))` },
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "bg-white dark:bg-gray-800 p-4 rounded-xl shadow-sm space-y-4", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("h3", { className: "font-semibold text-gray-800 dark:text-gray-200", children: "Work & Rest Schedule" }),
                    /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(TimeInput, { label: "Work Start", value: localSettings.workStartTime, onChange: (v) => handleSettingChange("workStartTime", v) }),
                      /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(TimeInput, { label: "Work End", value: localSettings.workEndTime, onChange: (v) => handleSettingChange("workEndTime", v) })
                    ] }),
                    /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(TimeInput, { label: "Lunch Start", value: localSettings.lunchStartTime, onChange: (v) => handleSettingChange("lunchStartTime", v) }),
                      /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(TimeInput, { label: "Lunch End", value: localSettings.lunchEndTime, onChange: (v) => handleSettingChange("lunchEndTime", v) })
                    ] }),
                    /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(TimeInput, { label: "Dinner Start", value: localSettings.dinnerStartTime, onChange: (v) => handleSettingChange("dinnerStartTime", v) }),
                      /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(TimeInput, { label: "Dinner End", value: localSettings.dinnerEndTime, onChange: (v) => handleSettingChange("dinnerEndTime", v) })
                    ] })
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "bg-white dark:bg-gray-800 p-4 rounded-xl shadow-sm space-y-4", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("h3", { className: "font-semibold text-gray-800 dark:text-gray-200", children: "Auto-Plan Rules" }),
                    /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(NumberInput, { label: "Task Gap", value: localSettings.taskGap, onChange: (v) => handleSettingChange("taskGap", v), unit: "min" }),
                    /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(Toggle, { label: "Allow Task Splitting", enabled: localSettings.allowTaskSplitting, setEnabled: (v) => handleSettingChange("allowTaskSplitting", v) })
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "bg-white dark:bg-gray-800 p-4 rounded-xl shadow-sm space-y-3", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("h3", { className: "font-semibold text-gray-800 dark:text-gray-200", children: "Planning Algorithm" }),
                    /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "flex bg-gray-200 dark:bg-gray-700 rounded-lg p-1", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("button", { type: "button", onClick: () => handleSettingChange("algorithm", "sequential"), className: `w-1/3 py-1.5 text-sm font-semibold rounded-md transition-all ${localSettings.algorithm === "sequential" ? "bg-white dark:bg-gray-900 text-gray-800 dark:text-gray-200 shadow-sm" : "text-gray-500 dark:text-gray-400"}`, children: "Fastest" }),
                      /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("button", { type: "button", onClick: () => handleSettingChange("algorithm", "weighted"), className: `w-1/3 py-1.5 text-sm font-semibold rounded-md transition-all ${localSettings.algorithm === "weighted" ? "bg-white dark:bg-gray-900 text-gray-800 dark:text-gray-200 shadow-sm" : "text-gray-500 dark:text-gray-400"}`, children: "Smartest" }),
                      /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("button", { type: "button", onClick: () => handleSettingChange("algorithm", "ask"), className: `w-1/3 py-1.5 text-sm font-semibold rounded-md transition-all ${localSettings.algorithm === "ask" ? "bg-white dark:bg-gray-900 text-gray-800 dark:text-gray-200 shadow-sm" : "text-gray-500 dark:text-gray-400"}`, children: "Ask" })
                    ] }),
                    /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "text-xs text-gray-500 dark:text-gray-400 pt-1 px-1 min-h-[3rem]", children: [
                      localSettings.algorithm === "sequential" && /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("p", { children: [
                        /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("strong", { children: "Fastest:" }),
                        " Quickly fits tasks into available time slots. Best for speed."
                      ] }),
                      localSettings.algorithm === "weighted" && /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("p", { children: [
                        /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("strong", { children: "Smartest:" }),
                        " Considers task importance. May take longer to generate an optimal plan."
                      ] }),
                      localSettings.algorithm === "ask" && /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("p", { children: [
                        /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("strong", { children: "Ask:" }),
                        " Prompts you to choose an algorithm each time you plan."
                      ] })
                    ] })
                  ] })
                ]
              }
            )
          ]
        }
      )
    ] });
  };
  var PlanningSettingsDrawer_default = PlanningSettingsDrawer;

  // screens/TodayScreen.tsx
  var import_jsx_runtime33 = __toESM(require_jsx_runtime());
  var parseDateAsLocal = (dateString) => {
    if (!dateString) return null;
    const parts = dateString.split("-").map(Number);
    if (parts.length !== 3 || parts.some(isNaN)) return null;
    return new Date(parts[0], parts[1] - 1, parts[2]);
  };
  var timeToMinutes3 = (timeStr) => {
    if (!timeStr || !timeStr.includes(":")) return 0;
    const [hours, minutes] = timeStr.split(":").map(Number);
    return hours * 60 + minutes;
  };
  var minutesToTime3 = (totalMinutes) => {
    const hours = Math.floor(totalMinutes / 60);
    const minutes = totalMinutes % 60;
    return `${String(hours).padStart(2, "0")}:${String(minutes).padStart(2, "0")}`;
  };
  var runSequentialPlanning = (flexibleTasks, scheduledTasks, settings) => {
    const { taskGap, workStartTime, workEndTime, lunchStartTime, lunchEndTime, dinnerStartTime, dinnerEndTime } = settings;
    let busySlots = scheduledTasks.filter((t) => t.startTime && t.duration).map((t) => ({
      start: timeToMinutes3(t.startTime),
      end: timeToMinutes3(t.startTime) + t.duration
    }));
    busySlots.push(
      { start: timeToMinutes3(lunchStartTime), end: timeToMinutes3(lunchEndTime) },
      { start: timeToMinutes3(dinnerStartTime), end: timeToMinutes3(dinnerEndTime) }
    );
    busySlots = busySlots.sort((a, b) => a.start - b.start);
    const mergedBusySlots = [];
    if (busySlots.length > 0) {
      mergedBusySlots.push({ ...busySlots[0] });
      for (let i = 1; i < busySlots.length; i++) {
        const last = mergedBusySlots[mergedBusySlots.length - 1];
        const current = busySlots[i];
        if (current.start < last.end) {
          last.end = Math.max(last.end, current.end);
        } else {
          mergedBusySlots.push({ ...current });
        }
      }
    }
    const updates = [];
    const now2 = /* @__PURE__ */ new Date();
    const nowMinutes = now2.getHours() * 60 + now2.getMinutes();
    const roundedNowMinutes = Math.ceil(nowMinutes / 15) * 15;
    const effectiveWorkStartMinutes = timeToMinutes3(workStartTime);
    let currentTime = Math.max(effectiveWorkStartMinutes, roundedNowMinutes);
    const workEndMinutes = timeToMinutes3(workEndTime);
    for (const task of flexibleTasks) {
      const duration = task.duration || 30;
      let foundSlot = false;
      let potentialStartTime = currentTime;
      while (!foundSlot) {
        const taskStart = potentialStartTime;
        const taskEnd = taskStart + duration;
        if (taskStart >= workEndMinutes + 240) {
          break;
        }
        let conflict = false;
        for (const slot of mergedBusySlots) {
          if (taskStart < slot.end && taskEnd > slot.start) {
            conflict = true;
            potentialStartTime = slot.end + taskGap;
            break;
          }
        }
        if (!conflict) {
          foundSlot = true;
          const newStartTime = minutesToTime3(taskStart);
          updates.push({ taskId: task.id, updates: { startTime: newStartTime, time: newStartTime } });
          const newSlot = { start: taskStart, end: taskEnd };
          mergedBusySlots.push(newSlot);
          mergedBusySlots.sort((a, b) => a.start - b.start);
          currentTime = taskEnd + taskGap;
        }
      }
    }
    return updates;
  };
  var runWeightedPlanning = (flexibleTasks, scheduledTasks, settings) => {
    const getPermutations = (arr) => {
      const output = [];
      const swap = (array, i, j) => {
        [array[i], array[j]] = [array[j], array[i]];
      };
      const generate = (k, heapArr) => {
        if (k === 1) {
          output.push([...heapArr]);
          return;
        }
        generate(k - 1, heapArr);
        for (let i = 0; i < k - 1; i++) {
          if (k % 2 === 0) swap(heapArr, i, k - 1);
          else swap(heapArr, 0, k - 1);
          generate(k - 1, heapArr);
        }
      };
      generate(arr.length, [...arr]);
      return output;
    };
    const allPermutations = getPermutations(flexibleTasks);
    let bestPlan = null;
    const workEndMins = timeToMinutes3(settings.workEndTime);
    const lunchSlot = { start: timeToMinutes3(settings.lunchStartTime), end: timeToMinutes3(settings.lunchEndTime) };
    const dinnerSlot = { start: timeToMinutes3(settings.dinnerStartTime), end: timeToMinutes3(settings.dinnerEndTime) };
    const originalBusySlots = scheduledTasks.filter((t) => t.startTime && t.duration).map((t) => ({ start: timeToMinutes3(t.startTime), end: timeToMinutes3(t.startTime) + t.duration }));
    const allFixedSlots = [...originalBusySlots, lunchSlot, dinnerSlot];
    for (const permutation of allPermutations) {
      const simulationResult = runSequentialPlanning(permutation, scheduledTasks, settings);
      let weight = 0;
      const scheduledPermutation = [];
      permutation.forEach((task) => {
        const update = simulationResult.find((u) => u.taskId === task.id);
        if (update?.updates.startTime) {
          scheduledPermutation.push({ ...task, scheduledStartTime: update.updates.startTime });
        }
      });
      if (scheduledPermutation.length !== permutation.length) {
        weight = Infinity;
      } else {
        let crossCount = 0;
        scheduledPermutation.forEach((task, index2) => {
          if (task.important) weight += index2 * 2;
          const taskStartMins = timeToMinutes3(task.scheduledStartTime);
          for (const fixedSlot of allFixedSlots) {
            if (taskStartMins === fixedSlot.end + settings.taskGap) {
              crossCount++;
              break;
            }
          }
        });
        weight += crossCount * 1;
        const lastTask = scheduledPermutation[scheduledPermutation.length - 1];
        if (lastTask) {
          const lastEndTime = timeToMinutes3(lastTask.scheduledStartTime) + (lastTask.duration || 0);
          if (lastEndTime > workEndMins) {
            const overtimeHours = (lastEndTime - workEndMins) / 60;
            weight += overtimeHours * 2;
          }
        }
      }
      if (bestPlan === null || weight < bestPlan.weight) {
        bestPlan = { updates: simulationResult, weight };
      }
    }
    return bestPlan ? bestPlan.updates : [];
  };
  var TodayScreen = () => {
    const {
      tasks: allTasks,
      lists: taskLists,
      profile,
      addTask,
      updateTask,
      syncData
    } = useData();
    const [completingTaskId, setCompletingTaskId] = (0, import_react21.useState)(null);
    const [collapsingTaskId, setCollapsingTaskId] = (0, import_react21.useState)(null);
    const [uncompletingTaskId, setUncompletingTaskId] = (0, import_react21.useState)(null);
    const [justUncompletedId, setJustUncompletedId] = (0, import_react21.useState)(null);
    const [justCompletedId, setJustCompletedId] = (0, import_react21.useState)(null);
    const [justAddedId, setJustAddedId] = (0, import_react21.useState)(null);
    const [viewMode, setViewMode] = (0, import_react21.useState)("list");
    const [isRecommendOpen, setIsRecommendOpen] = (0, import_react21.useState)(false);
    const [isOverdueOpen, setIsOverdueOpen] = (0, import_react21.useState)(false);
    const [isAddTaskOpen, setIsAddTaskOpen] = (0, import_react21.useState)(false);
    const [isDetailOpen, setIsDetailOpen] = (0, import_react21.useState)(false);
    const [isEditOpen, setIsEditOpen] = (0, import_react21.useState)(false);
    const [isTimePickerOpen, setIsTimePickerOpen] = (0, import_react21.useState)(false);
    const [isDurationPickerOpen, setIsDurationPickerOpen] = (0, import_react21.useState)(false);
    const [isTimeChangeConfirmOpen, setIsTimeChangeConfirmOpen] = (0, import_react21.useState)(false);
    const [selectedTask, setSelectedTask] = (0, import_react21.useState)(null);
    const [timeToSet, setTimeToSet] = (0, import_react21.useState)(null);
    const [isPlanning, setIsPlanning] = (0, import_react21.useState)(false);
    const [isPlanConfirmOpen, setIsPlanConfirmOpen] = (0, import_react21.useState)(false);
    const [fixedTasksToConvert, setFixedTasksToConvert] = (0, import_react21.useState)([]);
    const [planningTrigger, setPlanningTrigger] = (0, import_react21.useState)(0);
    const [isFinishedTasksVisible, setIsFinishedTasksVisible] = useLocalStorage_default("today_finished_tasks_visible", true);
    const [rawExpandedTaskIds, setRawExpandedTaskIds] = useLocalStorage_default("today_expanded_task_ids", null);
    const defaultExpandedIds = (0, import_react21.useMemo)(
      () => new Set(allTasks.filter((t) => !t.completed && t.subtasks && t.subtasks.length > 0).map((t) => t.id)),
      [allTasks]
    );
    const expandedTaskIds = (0, import_react21.useMemo)(() => {
      if (rawExpandedTaskIds !== null) {
        return new Set(rawExpandedTaskIds);
      }
      return defaultExpandedIds;
    }, [rawExpandedTaskIds, defaultExpandedIds]);
    const setExpandedTaskIds = (0, import_react21.useCallback)((setter) => {
      const newSet = setter(expandedTaskIds);
      setRawExpandedTaskIds(Array.from(newSet));
    }, [expandedTaskIds, setRawExpandedTaskIds]);
    const [planningSettings] = usePlanningSettings_default();
    const [isPlanningSettingsOpen, setIsPlanningSettingsOpen] = (0, import_react21.useState)(false);
    const [isAlgorithmChoiceOpen, setIsAlgorithmChoiceOpen] = (0, import_react21.useState)(false);
    const [algorithmToRun, setAlgorithmToRun] = (0, import_react21.useState)(null);
    const [isRefreshing, setIsRefreshing] = (0, import_react21.useState)(false);
    const [pullDelta, setPullDelta] = (0, import_react21.useState)(0);
    const gestureStart = (0, import_react21.useRef)(null);
    const gestureType = (0, import_react21.useRef)("none");
    const listViewRef = (0, import_react21.useRef)(null);
    const timelineViewRef = (0, import_react21.useRef)(null);
    const REFRESH_THRESHOLD = 80;
    const MIN_SWIPE_DISTANCE = 50;
    const [currentTime, setCurrentTime] = (0, import_react21.useState)(/* @__PURE__ */ new Date());
    (0, import_react21.useEffect)(() => {
      const timer = setInterval(() => {
        setCurrentTime(/* @__PURE__ */ new Date());
      }, 6e4);
      return () => clearInterval(timer);
    }, []);
    const listColorMap = (0, import_react21.useMemo)(() => {
      const map = /* @__PURE__ */ new Map();
      taskLists.forEach((list) => {
        map.set(list.name, list.color);
      });
      return map;
    }, [taskLists]);
    const listInfoMap = (0, import_react21.useMemo)(() => {
      const map = /* @__PURE__ */ new Map();
      taskLists.forEach((list) => {
        map.set(list.name, { icon: list.icon, color: list.color });
      });
      return map;
    }, [taskLists]);
    const { recommendedTasks, overdueTasks } = (0, import_react21.useMemo)(() => {
      const today = /* @__PURE__ */ new Date();
      today.setHours(0, 0, 0, 0);
      const threeDaysFromNow = new Date(today);
      threeDaysFromNow.setDate(today.getDate() + 3);
      const startOfWeek = new Date(today);
      startOfWeek.setDate(today.getDate() - today.getDay());
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6);
      const recTasks = [];
      const ovdTasks = [];
      const recommendedIds = /* @__PURE__ */ new Set();
      const overdueIds = /* @__PURE__ */ new Set();
      allTasks.forEach((task) => {
        if (task.completed || task.today) return;
        const dueDate = parseDateAsLocal(task.dueDate);
        const startDate = parseDateAsLocal(task.startDate);
        if (dueDate && dueDate < today) {
          if (!overdueIds.has(task.id)) {
            const daysAgo = Math.max(1, Math.floor((today.getTime() - dueDate.getTime()) / (1e3 * 3600 * 24)));
            const reason = daysAgo === 1 ? "Due yesterday" : `Due ${daysAgo} days ago`;
            ovdTasks.push({ ...task, reason });
            overdueIds.add(task.id);
          }
        } else if (startDate && startDate < today) {
          if (!overdueIds.has(task.id)) {
            const daysAgo = Math.max(1, Math.floor((today.getTime() - startDate.getTime()) / (1e3 * 3600 * 24)));
            const reason = daysAgo === 1 ? "Should have started yesterday" : `Should have started ${daysAgo} days ago`;
            ovdTasks.push({ ...task, reason });
            overdueIds.add(task.id);
          }
        }
        const isFixedForAnotherDay = task.type === "Fixed" && task.startTime && startDate && startDate.getTime() !== today.getTime();
        if (dueDate && dueDate >= today && dueDate <= threeDaysFromNow) {
          if (!isFixedForAnotherDay && !recommendedIds.has(task.id)) {
            recTasks.push({ ...task, reason: "Due in the next 3 days" });
            recommendedIds.add(task.id);
          }
        }
        if (task.important && dueDate && dueDate >= startOfWeek && dueDate <= endOfWeek) {
          if (!isFixedForAnotherDay && !recommendedIds.has(task.id)) {
            recTasks.push({ ...task, reason: "Important this week" });
            recommendedIds.add(task.id);
          }
        }
      });
      return { recommendedTasks: recTasks, overdueTasks: ovdTasks };
    }, [allTasks]);
    const { unfinishedTasks, finishedTasks, tasksToSchedule } = (0, import_react21.useMemo)(() => {
      const todayTasks = allTasks.filter((task) => task.today);
      const finished = todayTasks.filter((task) => task.completed);
      const unfinished = todayTasks.filter((task) => !task.completed);
      unfinished.sort((a, b) => {
        const isAScheduled = !!a.startTime;
        const isBScheduled = !!b.startTime;
        if (isAScheduled && !isBScheduled) return -1;
        if (!isAScheduled && isBScheduled) return 1;
        if (isAScheduled && isBScheduled) {
          return (a.startTime || "99:99").localeCompare(b.startTime || "99:99");
        }
        return 0;
      });
      const toSchedule = unfinished.filter((t) => !t.startTime);
      return { unfinishedTasks: unfinished, finishedTasks: finished, tasksToSchedule: toSchedule };
    }, [allTasks]);
    const totalTodayTasks = unfinishedTasks.length + finishedTasks.length;
    const progress = totalTodayTasks > 0 ? finishedTasks.length / totalTodayTasks * 100 : 0;
    const handleCompleteTask = (taskId) => {
      triggerHapticNotification(NotificationType.Success);
      setCompletingTaskId(taskId);
      setExpandedTaskIds((prev) => {
        const newSet = new Set(prev);
        newSet.delete(taskId);
        return newSet;
      });
      setTimeout(() => {
        setCollapsingTaskId(taskId);
      }, 300);
      setTimeout(async () => {
        try {
          await updateTask(taskId, { completed: true });
          setJustCompletedId(taskId);
        } catch (error) {
          console.error("Failed to complete task", error);
        } finally {
          setCompletingTaskId(null);
          setCollapsingTaskId(null);
        }
      }, 600);
    };
    const handleUncompleteTask = (taskId) => {
      triggerHapticImpact(ImpactStyle2.Light);
      setUncompletingTaskId(taskId);
      const taskToUncomplete = allTasks.find((t) => t.id === taskId);
      if (taskToUncomplete?.subtasks?.length) {
        setExpandedTaskIds((prev) => new Set(prev).add(taskId));
      }
      setTimeout(async () => {
        try {
          await updateTask(taskId, { completed: false });
          setJustUncompletedId(taskId);
        } catch (error) {
          console.error("Failed to uncomplete task", error);
        } finally {
          setUncompletingTaskId(null);
        }
      }, 300);
    };
    const handleAddTaskToToday = (taskId) => {
      updateTask(taskId, { today: true });
      const task = allTasks.find((t) => t.id === taskId);
      if (task) {
        setSelectedTask({ ...task, today: true });
        setIsEditOpen(true);
      }
    };
    const handleToggleSubtask = (taskId, subtaskId) => {
      const task = allTasks.find((t) => t.id === taskId);
      if (task && task.subtasks) {
        const newSubtasks = task.subtasks.map(
          (sub) => sub.id === subtaskId ? { ...sub, completed: !sub.completed } : sub
        );
        updateTask(taskId, { subtasks: newSubtasks });
        if (selectedTask && selectedTask.id === taskId) {
          setSelectedTask((prev) => prev ? { ...prev, subtasks: newSubtasks } : null);
        }
      }
    };
    const handleToggleImportant = (taskId) => {
      const task = allTasks.find((t) => t.id === taskId);
      if (task) updateTask(taskId, { important: !task.important });
    };
    const handleToggleToday = (taskId) => {
      const task = allTasks.find((t) => t.id === taskId);
      if (task) updateTask(taskId, { today: !task.today });
    };
    const handleToggleTaskType = (taskId) => {
      const task = allTasks.find((t) => t.id === taskId);
      if (!task) return;
      const newType = task.type === "Fixed" ? "Flexible" : "Fixed";
      updateTask(taskId, { type: newType });
    };
    const handleToggleExpansion = (taskId) => {
      setExpandedTaskIds((prev) => {
        const newSet = new Set(prev);
        if (newSet.has(taskId)) newSet.delete(taskId);
        else newSet.add(taskId);
        return newSet;
      });
    };
    const handleOpenTaskDetail = (task) => {
      setSelectedTask(task);
      setIsDetailOpen(true);
    };
    const handleCloseTaskDetail = () => {
      setIsDetailOpen(false);
      setTimeout(() => setSelectedTask(null), 300);
    };
    const handleOpenEditTask = () => {
      setIsDetailOpen(false);
      setIsEditOpen(true);
    };
    const handleCloseEditTask = () => {
      setIsEditOpen(false);
      setTimeout(() => setSelectedTask(null), 300);
    };
    const handleSaveTask = async (updatedTask) => {
      await updateTask(updatedTask.id, updatedTask);
    };
    const handleOpenTimePicker = (task) => {
      setSelectedTask(task);
      if (task.startTime && task.type === "Fixed") {
        setIsTimeChangeConfirmOpen(true);
      } else {
        setIsTimePickerOpen(true);
      }
    };
    const handleConfirmTimeChange = () => {
      setIsTimeChangeConfirmOpen(false);
      setIsTimePickerOpen(true);
    };
    const handleCloseTimePicker = () => {
      setIsTimePickerOpen(false);
      setTimeout(() => {
        if (!isDurationPickerOpen) {
          setSelectedTask(null);
        }
      }, 300);
    };
    const handleClearTime = async () => {
      if (selectedTask) {
        await updateTask(selectedTask.id, { startTime: void 0 });
      }
      handleCloseTimePicker();
    };
    const handleCloseDurationPicker = () => {
      setIsDurationPickerOpen(false);
      setTimeout(() => {
        setSelectedTask(null);
        setTimeToSet(null);
      }, 300);
    };
    const handleTimeSelect = async (time) => {
      if (selectedTask) {
        setTimeToSet(time);
        setIsTimePickerOpen(false);
        setIsDurationPickerOpen(true);
      }
    };
    const handleDurationSelect = async (duration) => {
      if (selectedTask) {
        const updates = {
          duration
        };
        if (timeToSet) {
          updates.startTime = timeToSet;
          updates.time = timeToSet;
        }
        await updateTask(selectedTask.id, updates);
      }
      handleCloseDurationPicker();
    };
    const handleAddTask = async (newTaskData) => {
      const newTask = {
        title: newTaskData.title,
        category: newTaskData.list,
        important: newTaskData.isImportant,
        today: newTaskData.isToday,
        type: newTaskData.type,
        dueDate: newTaskData.dueDate || void 0,
        startDate: newTaskData.type === "Fixed" ? newTaskData.startDate || void 0 : void 0,
        startTime: newTaskData.type === "Fixed" ? newTaskData.startTime || void 0 : void 0,
        time: newTaskData.type === "Fixed" ? newTaskData.startTime || "--:--" : "--:--",
        duration: newTaskData.duration ? parseInt(newTaskData.duration, 10) : void 0,
        notes: newTaskData.notes || void 0,
        subtasks: newTaskData.subtasks || [],
        color: listColorMap.get(newTaskData.list) || "gray"
      };
      const newTaskId = await addTask(newTask);
      if (newTaskData.isToday && newTaskId) {
        setJustAddedId(newTaskId);
      }
    };
    const isTaskOverdue2 = (task, now2) => {
      if (task.completed || !task.startTime || !task.duration) {
        return false;
      }
      const endMinutes = timeToMinutes3(task.startTime) + task.duration;
      const nowMinutes = now2.getHours() * 60 + now2.getMinutes();
      return endMinutes < nowMinutes;
    };
    const executePlanningLogic = (0, import_react21.useCallback)(async () => {
      if (!algorithmToRun) return;
      setIsPlanning(true);
      try {
        const unfinishedTodayTasks = allTasks.filter((task) => task.today && !task.completed);
        const fixedTasks = unfinishedTodayTasks.filter((t) => t.type === "Fixed");
        const flexibleTasksToPlan = unfinishedTodayTasks.filter((t) => t.type === "Flexible");
        if (flexibleTasksToPlan.length === 0) {
          alert("No flexible tasks to plan.");
          setIsPlanning(false);
          setAlgorithmToRun(null);
          return;
        }
        let planUpdates = [];
        if (algorithmToRun === "sequential") {
          planUpdates = runSequentialPlanning(flexibleTasksToPlan, fixedTasks, planningSettings);
        } else if (algorithmToRun === "weighted") {
          if (flexibleTasksToPlan.length > 8) {
            alert(`Too many tasks for weighted planning (max 8). Using sequential algorithm instead.`);
            planUpdates = runSequentialPlanning(flexibleTasksToPlan, fixedTasks, planningSettings);
          } else {
            planUpdates = runWeightedPlanning(flexibleTasksToPlan, fixedTasks, planningSettings);
          }
        }
        const scheduledTaskIds = new Set(planUpdates.map((u) => u.taskId));
        const unscheduledTasksToClear = flexibleTasksToPlan.filter(
          (t) => !scheduledTaskIds.has(t.id) && t.startTime
        );
        const clearingUpdates = unscheduledTasksToClear.map((t) => ({
          taskId: t.id,
          updates: { startTime: void 0, time: "--:--" }
        }));
        const allUpdates = [...planUpdates, ...clearingUpdates];
        if (allUpdates.length > 0) {
          await Promise.all(allUpdates.map((u) => updateTask(u.taskId, u.updates)));
        }
        if (planUpdates.length < flexibleTasksToPlan.length) {
          const unscheduledCount = flexibleTasksToPlan.length - planUpdates.length;
          alert(`Successfully planned ${planUpdates.length} tasks. Could not find a time slot for ${unscheduledCount} task(s).`);
        }
      } catch (e) {
        console.error("Planning failed", e);
        alert("An error occurred during planning.");
      } finally {
        triggerHapticNotification(NotificationType.Success);
        setIsPlanning(false);
        setAlgorithmToRun(null);
      }
    }, [algorithmToRun, allTasks, planningSettings, updateTask]);
    (0, import_react21.useEffect)(() => {
      if (planningTrigger > 0 && algorithmToRun) {
        executePlanningLogic();
      }
    }, [planningTrigger, algorithmToRun, executePlanningLogic]);
    const handlePlanMyDay = () => {
      const fixedWithoutTime = unfinishedTasks.filter((t) => t.type === "Fixed" && !t.startTime);
      if (fixedWithoutTime.length > 0) {
        setFixedTasksToConvert(fixedWithoutTime);
        setIsPlanConfirmOpen(true);
      } else {
        if (planningSettings.algorithm === "ask") {
          setIsAlgorithmChoiceOpen(true);
        } else {
          setAlgorithmToRun(planningSettings.algorithm);
          setPlanningTrigger(Date.now());
        }
      }
    };
    const handleChooseAlgorithmAndPlan = (algo) => {
      setIsAlgorithmChoiceOpen(false);
      setAlgorithmToRun(algo);
      setPlanningTrigger(Date.now());
    };
    const handleConfirmAndPlan = async () => {
      setIsPlanConfirmOpen(false);
      await Promise.all(
        fixedTasksToConvert.map((t) => updateTask(t.id, { type: "Flexible" }))
      );
      if (planningSettings.algorithm === "ask") {
        setIsAlgorithmChoiceOpen(true);
      } else {
        setAlgorithmToRun(planningSettings.algorithm);
        setPlanningTrigger(Date.now());
      }
    };
    const handleTouchStart = (e) => {
      gestureStart.current = { x: e.touches[0].clientX, y: e.touches[0].clientY };
      gestureType.current = "none";
      const activeScrollView = viewMode === "list" ? listViewRef.current : timelineViewRef.current;
      if (activeScrollView?.scrollTop !== 0) {
        gestureStart.current.y = -1;
      }
    };
    const handleTouchMove = (e) => {
      if (!gestureStart.current) return;
      const deltaX = e.touches[0].clientX - gestureStart.current.x;
      const deltaY = e.touches[0].clientY - gestureStart.current.y;
      if (gestureType.current === "none") {
        if (Math.abs(deltaX) > 10 && Math.abs(deltaX) > Math.abs(deltaY)) {
          gestureType.current = "horizontal";
        } else if (Math.abs(deltaY) > 10 && Math.abs(deltaY) > Math.abs(deltaX)) {
          gestureType.current = "vertical";
        }
      }
      if (gestureType.current === "vertical" && gestureStart.current.y !== -1 && deltaY > 0) {
        setPullDelta(Math.pow(deltaY, 0.85));
      }
    };
    const handleTouchEnd = (e) => {
      if (!gestureStart.current) return;
      if (gestureType.current === "horizontal") {
        const endX = e.changedTouches[0].clientX;
        const distance = gestureStart.current.x - endX;
        if (distance > MIN_SWIPE_DISTANCE && viewMode === "list") {
          setViewMode("timeline");
        } else if (distance < -MIN_SWIPE_DISTANCE && viewMode === "timeline") {
          setViewMode("list");
        }
      } else if (gestureType.current === "vertical" && gestureStart.current.y !== -1) {
        if (pullDelta > REFRESH_THRESHOLD) {
          triggerHapticImpact(ImpactStyle2.Medium);
          setIsRefreshing(true);
          syncData().finally(() => {
            setIsRefreshing(false);
            setPullDelta(0);
          });
        } else {
          setPullDelta(0);
        }
      }
      gestureStart.current = null;
      gestureType.current = "none";
    };
    if (!profile) {
      return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "h-full w-full flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("svg", { className: "w-10 h-10 animate-ios-spinner text-[var(--color-text-secondary)]", viewBox: "0 0 50 50", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("circle", { className: "animate-ios-spinner-path", cx: "25", cy: "25", r: "20", fill: "none", stroke: "currentColor", strokeWidth: "4" }) }) });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(MainLayout_default, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "absolute inset-0 flex flex-col overflow-hidden", children: [
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: `absolute top-0 left-0 right-0 h-14 flex justify-center items-center transition-opacity duration-300 pointer-events-none ${pullDelta > 0 || isRefreshing ? "opacity-100" : "opacity-0"}`, children: isRefreshing ? /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(RefreshSpinnerIcon, {}) : /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(ChevronDownIcon, { className: `w-6 h-6 text-[var(--color-text-secondary)] transition-transform duration-300 ${pullDelta > REFRESH_THRESHOLD ? "rotate-180" : ""}` }) }),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(
          "div",
          {
            className: "h-full flex flex-col",
            style: { transform: `translateY(${isRefreshing ? 56 : pullDelta}px)`, transition: pullDelta === 0 || isRefreshing ? "transform 0.3s" : "none" },
            onTouchStart: handleTouchStart,
            onTouchMove: handleTouchMove,
            onTouchEnd: handleTouchEnd,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(
                "header",
                {
                  className: "px-6 pt-6 pb-4 grid grid-cols-[auto_1fr_auto] items-center gap-4 flex-shrink-0 bg-[var(--color-surface-container)] border-b border-[var(--color-border)]",
                  style: { paddingTop: `calc(1.5rem + env(safe-area-inset-top, 0px))` },
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "flex justify-start", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Link, { to: "/focus", className: "text-[var(--color-text-secondary)] hover:text-[var(--color-primary-500)] transition-colors p-1 -m-1", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(FocusHeaderIcon, {}) }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "flex justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "grid grid-cols-2 bg-[var(--color-surface-container-low)] rounded-lg p-1 w-full max-w-48", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
                        "button",
                        {
                          onClick: () => {
                            setViewMode("list");
                            triggerHapticSelection();
                          },
                          className: `w-full text-center py-1.5 text-sm font-semibold rounded-md transition-all ${viewMode === "list" ? "bg-[var(--color-surface-container)] text-[var(--color-text-primary)] shadow-sm" : "text-[var(--color-text-secondary)]"}`,
                          children: "List"
                        }
                      ),
                      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
                        "button",
                        {
                          onClick: () => {
                            setViewMode("timeline");
                            triggerHapticSelection();
                          },
                          className: `w-full text-center py-1.5 text-sm font-semibold rounded-md transition-all ${viewMode === "timeline" ? "bg-[var(--color-surface-container)] text-[var(--color-text-primary)] shadow-sm" : "text-[var(--color-text-secondary)]"}`,
                          children: "Timeline"
                        }
                      )
                    ] }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "flex justify-end", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("button", { className: "text-[var(--color-text-primary)]", onClick: () => setIsAddTaskOpen(true), children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(PlusIconHeader, {}) }) })
                  ]
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("main", { className: "overflow-hidden flex-grow flex flex-col", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(
                "div",
                {
                  className: "flex h-full transition-transform duration-300 ease-out",
                  style: { transform: viewMode === "list" ? "translateX(0%)" : "translateX(-100%)" },
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { ref: listViewRef, className: "w-full flex-shrink-0 h-full overflow-y-auto px-6 pb-24 flex flex-col pt-4", children: [
                      (recommendedTasks.length > 0 || overdueTasks.length > 0) && /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: `p-3 rounded-xl mb-4 text-sm flex items-center gap-3 flex-shrink-0 ${overdueTasks.length > 0 ? "bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800" : "bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800"}`, children: [
                        overdueTasks.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(OverdueIcon, {}) : /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(RecommendIcon, {}),
                        /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("p", { className: `flex-grow ${overdueTasks.length > 0 ? "text-red-800 dark:text-red-300" : "text-blue-800 dark:text-blue-300"}`, children: [
                          overdueTasks.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(import_jsx_runtime33.Fragment, { children: [
                            /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("button", { onClick: () => setIsOverdueOpen(true), className: "font-semibold hover:underline focus:outline-none", children: [
                              overdueTasks.length,
                              " overdue task",
                              overdueTasks.length > 1 ? "s" : ""
                            ] }),
                            recommendedTasks.length > 0 ? " and " : " need attention."
                          ] }),
                          recommendedTasks.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(import_jsx_runtime33.Fragment, { children: [
                            /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("button", { onClick: () => setIsRecommendOpen(true), className: `font-semibold hover:underline focus:outline-none ${overdueTasks.length > 0 ? "text-blue-600 dark:text-blue-400" : ""}`, children: [
                              recommendedTasks.length,
                              " recommended"
                            ] }),
                            overdueTasks.length > 0 ? " tasks." : ` task${recommendedTasks.length > 1 ? "s are" : " is"} available.`
                          ] })
                        ] })
                      ] }),
                      totalTodayTasks > 0 ? /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(import_jsx_runtime33.Fragment, { children: [
                        /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "mb-4 flex-shrink-0", children: [
                          /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex justify-between items-center mb-2", children: [
                            /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex items-baseline gap-2", children: [
                              /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("h2", { className: "text-lg font-bold text-[var(--color-text-primary)]", children: "Today's Tasks" }),
                              /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("span", { className: "text-sm font-medium text-[var(--color-text-secondary)]", children: [
                                finishedTasks.length,
                                "/",
                                totalTodayTasks
                              ] })
                            ] }),
                            /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex items-center gap-2", children: [
                              /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
                                "button",
                                {
                                  onClick: () => setIsPlanningSettingsOpen(true),
                                  className: "flex-shrink-0 p-1.5 text-[var(--color-text-secondary)] hover:text-[var(--color-text-primary)] hover:bg-[var(--color-surface-container-low)] rounded-full transition-colors",
                                  "aria-label": "Planning Settings",
                                  children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(SettingsHeaderIcon, { className: "w-5 h-5" })
                                }
                              ),
                              /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
                                "button",
                                {
                                  onClick: handlePlanMyDay,
                                  disabled: isPlanning,
                                  className: "flex-shrink-0 flex items-center gap-1.5 rounded-lg px-2.5 py-1 font-semibold text-xs transition-colors ease-in-out bg-indigo-100 dark:bg-indigo-900/30 text-indigo-600 dark:text-indigo-300 hover:bg-indigo-200 dark:hover:bg-indigo-900/50 focus:outline-none focus:ring-2 focus:ring-indigo-400 disabled:bg-indigo-50 dark:disabled:bg-gray-700 disabled:text-indigo-300 dark:disabled:text-gray-500 disabled:cursor-not-allowed",
                                  "aria-label": "Plan My Day",
                                  children: isPlanning ? /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(RefreshSpinnerIcon, {}) : /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(import_jsx_runtime33.Fragment, { children: [
                                    /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(SparklesIcon, { className: "w-4 h-4" }),
                                    /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("span", { children: "Plan" })
                                  ] })
                                }
                              )
                            ] })
                          ] }),
                          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "w-full bg-[var(--color-surface-container-low)] rounded-full h-2", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
                            "div",
                            {
                              className: "bg-blue-600 h-2 rounded-full transition-all duration-500 ease-out",
                              style: { width: `${progress}%` }
                            }
                          ) })
                        ] }),
                        /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "space-y-4", children: [
                          unfinishedTasks.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("section", { children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "bg-[var(--color-surface-container)] rounded-xl card-shadow overflow-hidden divide-y divide-[var(--color-border)]", children: unfinishedTasks.map((task) => {
                            const listInfo = listInfoMap.get(task.category) || { icon: "\u{1F4DD}", color: "gray" };
                            const timeParts = task.startTime ? task.startTime.split(":").map(Number) : null;
                            const isOverdue = isTaskOverdue2(task, currentTime);
                            let displayHour = "";
                            let displayMinute = "";
                            let displayPeriod = "";
                            if (timeParts) {
                              const [h, m] = timeParts;
                              displayMinute = String(m).padStart(2, "0");
                              displayPeriod = h >= 12 ? "pm" : "am";
                              let hour12 = h % 12;
                              if (hour12 === 0) hour12 = 12;
                              displayHour = hour12;
                            }
                            return /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(
                              "div",
                              {
                                className: `flex items-start ${collapsingTaskId === task.id ? "animate-task-collapse" : ""}`,
                                children: [
                                  /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "w-20 shrink-0 flex flex-col items-center pt-3.5 pb-2", children: [
                                    /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
                                      "button",
                                      {
                                        onClick: (e) => {
                                          e.stopPropagation();
                                          handleOpenTimePicker(task);
                                        },
                                        className: "flex items-start justify-center w-full focus:outline-none rounded-md focus:ring-2 focus:ring-blue-300 ",
                                        "aria-label": `Set start time for ${task.title}`,
                                        children: task.startTime ? /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex", children: [
                                          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("span", { className: `w-9 text-right text-3xl font-bold leading-none tracking-tight ${isOverdue ? "text-[var(--color-functional-red)]" : "text-[var(--color-text-primary)]"}`, children: displayHour }),
                                          /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: `flex flex-col items-start font-semibold leading-tight ml-0.5 text-[11px] mt-0.5 ${isOverdue ? "text-[var(--color-functional-red)]" : "text-[var(--color-text-secondary)]"}`, children: [
                                            /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("span", { children: displayMinute }),
                                            /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("span", { className: "-mt-0.5", children: displayPeriod })
                                          ] })
                                        ] }) : /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "flex items-center justify-center h-[36px]", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("span", { className: "font-semibold text-[var(--color-text-tertiary)] text-2xl tracking-widest", children: "--" }) })
                                      }
                                    ),
                                    /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "h-5 flex items-center", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
                                      "button",
                                      {
                                        onClick: (e) => {
                                          e.stopPropagation();
                                          handleToggleTaskType(task.id);
                                        },
                                        className: "p-1 -m-1 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-300",
                                        "aria-label": `Toggle task type for ${task.title}. Current: ${task.type}`,
                                        children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(LockIcon, { className: `w-3.5 h-3.5 transition-colors ${task.type === "Fixed" ? "text-[var(--color-text-secondary)]" : "text-[var(--color-text-tertiary)]"}` })
                                      }
                                    ) })
                                  ] }),
                                  /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "flex-grow min-w-0", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
                                    TaskCard_default,
                                    {
                                      variant: "list",
                                      ...task,
                                      color: listInfo.color,
                                      categoryIcon: listInfo.icon,
                                      onComplete: () => handleCompleteTask(task.id),
                                      isCompleting: completingTaskId === task.id,
                                      onToggleSubtask: handleToggleSubtask,
                                      onToggleImportant: () => handleToggleImportant(task.id),
                                      onClick: () => handleOpenTaskDetail(task),
                                      isJustUncompleted: justUncompletedId === task.id,
                                      onUncompleteAnimationEnd: () => setJustUncompletedId(null),
                                      isJustAdded: justAddedId === task.id,
                                      onAddAnimationEnd: () => setJustAddedId(null),
                                      hideSubtasks: !expandedTaskIds.has(task.id),
                                      onToggleSubtaskVisibility: () => handleToggleExpansion(task.id)
                                    }
                                  ) })
                                ]
                              },
                              task.id
                            );
                          }) }) }),
                          finishedTasks.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("section", { children: [
                            /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(
                              "button",
                              {
                                onClick: () => setIsFinishedTasksVisible(!isFinishedTasksVisible),
                                className: "w-full flex justify-between items-center mb-3",
                                "aria-expanded": isFinishedTasksVisible,
                                children: [
                                  /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("h2", { className: "text-base font-bold text-[var(--color-text-primary)]", children: [
                                    "Finished Tasks (",
                                    finishedTasks.length,
                                    ")"
                                  ] }),
                                  /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(ChevronDownIcon, { className: `w-5 h-5 text-[var(--color-text-secondary)] transition-transform duration-300 ${isFinishedTasksVisible ? "rotate-180" : ""}` })
                                ]
                              }
                            ),
                            /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: `grid transition-[grid-template-rows] duration-300 ease-in-out ${isFinishedTasksVisible ? "grid-rows-[1fr]" : "grid-rows-[0fr]"}`, children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "overflow-hidden", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "bg-[var(--color-surface-container)] rounded-xl card-shadow overflow-hidden divide-y divide-[var(--color-border)]", children: finishedTasks.map((task) => {
                              const listInfo = listInfoMap.get(task.category) || { icon: "\u{1F4DD}", color: "gray" };
                              return /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(
                                "div",
                                {
                                  className: `flex items-start ${uncompletingTaskId === task.id ? "animate-task-collapse" : ""}`,
                                  children: [
                                    /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "w-20 shrink-0 flex flex-col items-center pt-3.5 pb-2", children: task.completed_at && /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "text-center", children: [
                                      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("span", { className: "text-[10px] font-medium text-[var(--color-text-secondary)]", children: "done at" }),
                                      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "flex items-start justify-center w-full mt-0.5", children: (() => {
                                        const completedDate = new Date(task.completed_at);
                                        let displayHour = completedDate.getHours() % 12;
                                        if (displayHour === 0) displayHour = 12;
                                        const displayMinute = String(completedDate.getMinutes()).padStart(2, "0");
                                        const displayPeriod = completedDate.getHours() >= 12 ? "pm" : "am";
                                        return /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex", children: [
                                          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("span", { className: "text-3xl font-bold leading-none tracking-tight text-[var(--color-text-tertiary)]", children: displayHour }),
                                          /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex flex-col items-start font-semibold leading-tight ml-0.5 text-[11px] mt-0.5 text-[var(--color-text-tertiary)]", children: [
                                            /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("span", { children: displayMinute }),
                                            /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("span", { className: "-mt-0.5", children: displayPeriod })
                                          ] })
                                        ] });
                                      })() })
                                    ] }) }),
                                    /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "flex-grow min-w-0", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
                                      TaskCard_default,
                                      {
                                        variant: "list",
                                        ...task,
                                        color: listInfo.color,
                                        categoryIcon: listInfo.icon,
                                        onClick: () => handleOpenTaskDetail(task),
                                        onUncomplete: () => handleUncompleteTask(task.id),
                                        isUncompleting: uncompletingTaskId === task.id,
                                        isJustCompleted: justCompletedId === task.id,
                                        onCompleteAnimationEnd: () => setJustCompletedId(null),
                                        hideSubtasks: !expandedTaskIds.has(task.id),
                                        onToggleSubtaskVisibility: () => handleToggleExpansion(task.id),
                                        onToggleImportant: () => handleToggleImportant(task.id)
                                      }
                                    ) })
                                  ]
                                },
                                task.id
                              );
                            }) }) }) })
                          ] })
                        ] })
                      ] }) : /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "flex-grow", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(EmptyTodayIllustration, { onAddTask: () => setIsAddTaskOpen(true) }) })
                    ] }),
                    /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { ref: timelineViewRef, className: "w-full flex-shrink-0 h-full overflow-y-auto pb-24", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
                      TimelineView_default,
                      {
                        tasks: allTasks,
                        lists: taskLists,
                        currentTime,
                        onUnscheduledTaskClick: handleOpenTimePicker,
                        onScheduledTaskShortPress: handleOpenTaskDetail,
                        onScheduledTaskLongPress: handleOpenTimePicker,
                        onCompleteTask: handleCompleteTask,
                        onUncompleteTask: handleUncompleteTask,
                        completingTaskId,
                        uncompletingTaskId
                      }
                    ) })
                  ]
                }
              ) })
            ]
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
        RecommendTasksScreen_default,
        {
          isOpen: isRecommendOpen,
          onClose: () => setIsRecommendOpen(false),
          tasks: recommendedTasks,
          onAddTaskToToday: handleAddTaskToToday,
          listInfoMap
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
        OverdueTasksScreen_default,
        {
          isOpen: isOverdueOpen,
          onClose: () => setIsOverdueOpen(false),
          tasks: overdueTasks,
          onAddTaskToToday: handleAddTaskToToday,
          listInfoMap
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
        AddTaskScreen_default,
        {
          isOpen: isAddTaskOpen,
          onClose: () => setIsAddTaskOpen(false),
          onAddTask: handleAddTask
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
        TaskDetailScreen_default,
        {
          isOpen: isDetailOpen,
          onClose: handleCloseTaskDetail,
          task: selectedTask,
          onEdit: handleOpenEditTask
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
        EditTaskScreen_default,
        {
          isOpen: isEditOpen,
          onClose: handleCloseEditTask,
          task: selectedTask,
          onSave: handleSaveTask
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
        TimePickerModal_default,
        {
          isOpen: isTimePickerOpen,
          onClose: handleCloseTimePicker,
          onTimeSelect: handleTimeSelect,
          initialTime: selectedTask?.startTime,
          onClearTime: handleClearTime
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
        DurationPickerModal_default,
        {
          isOpen: isDurationPickerOpen,
          onClose: handleCloseDurationPicker,
          onDurationSelect: handleDurationSelect,
          initialDuration: selectedTask?.duration
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
        ConfirmationModal_default,
        {
          isOpen: isTimeChangeConfirmOpen,
          onClose: () => setIsTimeChangeConfirmOpen(false),
          onConfirm: handleConfirmTimeChange,
          title: "Change Start Time?",
          message: "This task already has a scheduled time. Are you sure you want to change it?",
          confirmText: "Change",
          confirmVariant: "primary"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
        ConfirmationModal_default,
        {
          isOpen: isPlanConfirmOpen,
          onClose: () => setIsPlanConfirmOpen(false),
          onConfirm: handleConfirmAndPlan,
          title: "Fixed Tasks Found",
          message: `You have ${fixedTasksToConvert.length} fixed task(s) without a start time. To auto-plan, they can be converted to flexible tasks. Or you can go back and schedule them manually.`,
          confirmText: "Convert & Plan",
          cancelText: "Go Back",
          confirmVariant: "primary"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
        PlanningSettingsDrawer_default,
        {
          isOpen: isPlanningSettingsOpen,
          onClose: () => setIsPlanningSettingsOpen(false)
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
        ConfirmationModal_default,
        {
          isOpen: isAlgorithmChoiceOpen,
          onClose: () => setIsAlgorithmChoiceOpen(false),
          onConfirm: () => handleChooseAlgorithmAndPlan("sequential"),
          onCancel: () => handleChooseAlgorithmAndPlan("weighted"),
          title: "Choose Your Plan",
          message: "Select how you'd like to automatically schedule your day. 'Fastest' is quick, 'Smartest' considers task importance.",
          confirmText: "Fastest Plan",
          cancelText: "Smartest Plan",
          confirmVariant: "primary"
        }
      )
    ] });
  };
  var TodayScreen_default = TodayScreen;

  // screens/settings/SettingsScreen.tsx
  var import_react22 = __toESM(require_react());
  init_dist();

  // node_modules/@capacitor/filesystem/dist/esm/index.js
  init_dist();
  init_definitions2();
  var Filesystem = registerPlugin("Filesystem", {
    web: () => Promise.resolve().then(() => (init_web5(), web_exports5)).then((m) => new m.FilesystemWeb())
  });

  // screens/settings/SettingsScreen.tsx
  var import_jsx_runtime34 = __toESM(require_jsx_runtime());
  var SectionHeader = ({ title }) => /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("h2", { className: "text-xs font-semibold text-[var(--color-text-secondary)] uppercase tracking-wider px-4 pb-2 pt-6", children: title });
  var SettingsItem = ({ children, onClick, isLink = false, icon, disabled = false }) => {
    const commonClasses = "flex items-center p-4 text-[var(--color-text-primary)]";
    const interactionClasses = isLink && !disabled ? "hover:bg-[var(--color-surface-container-low)] transition-colors cursor-pointer" : "";
    const disabledClasses = disabled ? "opacity-50 cursor-not-allowed" : "";
    return /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: `${commonClasses} ${interactionClasses} ${disabledClasses}`, onClick: disabled ? void 0 : onClick, children: [
      icon && /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("div", { className: "mr-4 w-7 h-7 flex items-center justify-center bg-[var(--color-surface-container-low)] rounded-lg text-[var(--color-text-secondary)]", children: icon }),
      /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("div", { className: "flex-grow flex justify-between items-center", children })
    ] });
  };
  var DefaultListSheet = ({ isOpen, onClose, lists, current, onSelect }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: `fixed inset-0 z-50 flex items-end transition-all duration-300 ${isOpen ? "visible" : "invisible"}`, children: [
      /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("div", { className: `fixed inset-0 bg-black/40 transition-opacity duration-300 ${isOpen ? "opacity-100" : "opacity-0"}`, onClick: onClose, "aria-hidden": "true" }),
      /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: `w-full bg-[var(--color-surface-container)] rounded-t-3xl shadow-2xl transition-transform duration-300 ease-out transform ${isOpen ? "translate-y-0" : "translate-y-full"}`, role: "dialog", "aria-modal": "true", "aria-labelledby": "list-picker-title", children: [
        /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("header", { className: "pt-3 px-4 pb-3 border-b border-[var(--color-border)]", children: [
          /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("div", { className: "w-8 h-1 bg-[var(--color-border)] rounded-full mx-auto mb-3" }),
          /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("h2", { id: "list-picker-title", className: "text-base font-bold text-[var(--color-text-primary)] text-center", children: "Select Default List" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("div", { className: "p-4 space-y-2 overflow-y-auto max-h-[50vh]", style: { paddingBottom: `calc(6rem + env(safe-area-inset-bottom, 0px))` }, children: lists.map((list) => /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("button", { onClick: () => onSelect(list.name), className: `w-full text-left p-3 rounded-lg text-sm font-medium transition-colors flex justify-between items-center ${current === list.name ? "bg-primary-100 text-[var(--color-primary-500)]" : "hover:bg-[var(--color-surface-container-low)] text-[var(--color-text-primary)]"}`, children: [
          /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "flex items-center gap-3", children: [
            /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("span", { className: "text-lg", children: list.icon }),
            /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("span", { children: list.name })
          ] }),
          current === list.name && /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(CheckIcon, { className: "w-5 h-5" })
        ] }, list.id)) })
      ] })
    ] });
  };
  var SettingsScreen = () => {
    const {
      session,
      profile,
      isOnline,
      isSyncing,
      offlineQueue,
      syncData,
      syncError,
      clearOfflineQueue,
      tasks,
      lists,
      moments,
      setTasks,
      setLists,
      setMoments,
      setProfile
    } = useData();
    const location = useLocation();
    const navigate = useNavigate();
    const [isClearConfirmOpen, setIsClearConfirmOpen] = (0, import_react22.useState)(false);
    const [defaultList, setDefaultList] = useLocalStorage_default("default-list", lists[0]?.name || "Personal");
    const [isListPickerOpen, setIsListPickerOpen] = (0, import_react22.useState)(false);
    const [isImportConfirmOpen, setIsImportConfirmOpen] = (0, import_react22.useState)(false);
    const [importFileData, setImportFileData] = (0, import_react22.useState)(null);
    const fileInputRef = (0, import_react22.useRef)(null);
    const [googleConnected, setGoogleConnected] = (0, import_react22.useState)(false);
    const [loadingGoogle, setLoadingGoogle] = (0, import_react22.useState)(false);
    const [errorGoogle, setErrorGoogle] = (0, import_react22.useState)(null);
    const [isDisconnectConfirmOpen, setIsDisconnectConfirmOpen] = (0, import_react22.useState)(false);
    const [isCalendarSyncing, setIsCalendarSyncing] = (0, import_react22.useState)(false);
    const [syncMessage, setSyncMessage] = (0, import_react22.useState)(null);
    (0, import_react22.useEffect)(() => {
      const checkConnections = async () => {
        const { data, error } = await supabase.from("calendar_connections").select("provider");
        if (error) {
          console.error("Error fetching calendar connections:", error);
          return;
        }
        if (data) {
          setGoogleConnected(data.some((conn) => conn.provider === "google"));
        }
      };
      if (session) {
        checkConnections();
      }
    }, [session]);
    (0, import_react22.useEffect)(() => {
      const params = new URLSearchParams(location.search);
      const errorParam = params.get("error");
      if (errorParam === "calendar_connection_failed") {
        setErrorGoogle("Failed to connect to Google Calendar. Please try again.");
        navigate("/settings", { replace: true });
      }
    }, [location, navigate]);
    (0, import_react22.useEffect)(() => {
      if (lists.length > 0) {
        const listExists = lists.some((l) => l.name === defaultList);
        if (!listExists) {
          setDefaultList(lists[0].name);
        }
      }
    }, [lists, defaultList, setDefaultList]);
    const hasPendingChanges = offlineQueue.length > 0;
    let syncStatusText = "Synced";
    let syncStatusColor = "text-green-600 dark:text-green-400";
    if (syncError) {
      syncStatusText = "Sync Failed";
      syncStatusColor = "text-red-600 dark:text-red-400";
    } else if (!isOnline) {
      syncStatusText = "Offline";
      syncStatusColor = "text-red-600 dark:text-red-400";
    } else if (isSyncing) {
      syncStatusText = "Syncing...";
      syncStatusColor = "text-blue-600 dark:text-blue-400";
    } else if (hasPendingChanges) {
      syncStatusText = `${offlineQueue.length} pending change${offlineQueue.length > 1 ? "s" : ""}`;
      syncStatusColor = "text-yellow-600 dark:text-yellow-400";
    }
    const handleSyncNow = () => {
      if (!isSyncing) {
        syncData();
      }
    };
    const handleClearQueue = () => {
      clearOfflineQueue();
      setIsClearConfirmOpen(false);
      syncData();
    };
    const handleExportData = async () => {
      try {
        const dataToExport = {
          profile,
          tasks,
          lists,
          moments,
          version: "1.0.0",
          exportedAt: (/* @__PURE__ */ new Date()).toISOString()
        };
        const fileName = `taskmaster_backup_${(/* @__PURE__ */ new Date()).toISOString().split("T")[0]}.json`;
        const jsonString = JSON.stringify(dataToExport, null, 2);
        if (Capacitor2.isNativePlatform()) {
          const result = await Filesystem.writeFile({
            path: fileName,
            data: jsonString,
            directory: Directory.Documents,
            encoding: Encoding.UTF8
          });
          alert(`Data exported successfully! Saved to your Documents folder as ${fileName}`);
        } else {
          const dataUrl = `data:text/json;charset=utf-8,${encodeURIComponent(jsonString)}`;
          const link = document.createElement("a");
          link.href = dataUrl;
          link.download = fileName;
          link.click();
        }
      } catch (error) {
        console.error("Failed to export data:", error);
        alert(`An error occurred while exporting your data: ${error instanceof Error ? error.message : "Unknown error"}`);
      }
    };
    const handleImportClick = () => fileInputRef.current?.click();
    const handleFileChange = (event) => {
      const file = event.target.files?.[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = (e) => {
          const text = e.target?.result;
          if (typeof text === "string") {
            setImportFileData(text);
            setIsImportConfirmOpen(true);
          } else {
            alert("Could not read file content.");
          }
        };
        reader.readAsText(file);
      }
      if (event.target) event.target.value = "";
    };
    const handleConfirmImport = () => {
      if (!importFileData) return;
      try {
        const importedData = JSON.parse(importFileData);
        if (!Array.isArray(importedData.tasks) || !Array.isArray(importedData.lists) || !Array.isArray(importedData.moments) || !importedData.profile) {
          throw new Error("Invalid backup file format.");
        }
        clearOfflineQueue();
        setTasks(importedData.tasks);
        setLists(importedData.lists);
        setMoments(importedData.moments);
        setProfile(importedData.profile);
        setIsImportConfirmOpen(false);
        setImportFileData(null);
        alert("Data imported successfully! Your data will now be synced.");
        syncData();
      } catch (error) {
        console.error("Failed to import data:", error);
        alert(`Import failed: ${error instanceof Error ? error.message : "Unknown error"}`);
        setIsImportConfirmOpen(false);
        setImportFileData(null);
      }
    };
    const handleConnectGoogle = async () => {
      if (!session) {
        alert("You must be logged in to connect your calendar.");
        return;
      }
      setLoadingGoogle(true);
      setErrorGoogle(null);
      try {
        const { data, error } = await supabase.functions.invoke("calendar-auth-start", {
          body: { provider: "google" }
        });
        if (error) throw error;
        if (data.authUrl) {
          window.location.href = data.authUrl;
        } else {
          throw new Error("Could not get authorization URL.");
        }
      } catch (err) {
        console.error("Error starting Google Calendar auth:", err);
        setErrorGoogle(err.message || "An unknown error occurred.");
        setLoadingGoogle(false);
      }
    };
    const handleDisconnectGoogle = async () => {
      setIsDisconnectConfirmOpen(false);
      setLoadingGoogle(true);
      setErrorGoogle(null);
      try {
        const { error } = await supabase.from("calendar_connections").delete().eq("provider", "google");
        if (error) throw error;
        setGoogleConnected(false);
      } catch (err) {
        console.error("Error disconnecting Google Calendar:", err);
        setErrorGoogle(err.message || "Could not disconnect.");
      } finally {
        setLoadingGoogle(false);
      }
    };
    const handleCalendarSync = async () => {
      setIsCalendarSyncing(true);
      setSyncMessage(null);
      setErrorGoogle(null);
      try {
        const { error } = await supabase.functions.invoke("calendar-sync", {
          body: { provider: "google" }
        });
        if (error) throw error;
        setSyncMessage("Sync completed successfully!");
        syncData();
      } catch (err) {
        console.error("Error syncing calendar:", err);
        setErrorGoogle(err.message || "An unknown error occurred during sync.");
      } finally {
        setIsCalendarSyncing(false);
        setTimeout(() => setSyncMessage(null), 3e3);
      }
    };
    if (!profile) {
      return /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(MainLayout_default, { children: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("div", { className: "h-full w-full flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(RefreshSpinnerIcon, {}) }) });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(MainLayout_default, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
        "input",
        {
          type: "file",
          ref: fileInputRef,
          onChange: handleFileChange,
          accept: ".json,application/json",
          className: "hidden"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "flex flex-col h-full", children: [
        /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
          "header",
          {
            className: "px-6 pt-6 pb-4 flex justify-center items-center flex-shrink-0 bg-[var(--color-surface-container)] border-b border-[var(--color-border)]",
            style: { paddingTop: `calc(1.5rem + env(safe-area-inset-top, 0px))` },
            children: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("h1", { className: "text-3xl font-bold text-[var(--color-text-primary)]", children: "Settings" })
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("main", { className: "overflow-y-auto", children: /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "p-4", style: { paddingBottom: `calc(6rem + env(safe-area-inset-bottom, 0px))` }, children: [
          /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(SectionHeader, { title: "Account" }),
          /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(Link, { to: "/profile", className: "block", children: /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "bg-[var(--color-surface-container)] rounded-xl p-4 flex items-center gap-4 card-shadow hover:bg-[var(--color-surface-container-low)] transition-colors", children: [
            /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("img", { src: profile.avatar_url, alt: "User Avatar", className: "w-14 h-14 rounded-full object-cover" }),
            /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "flex-grow", children: [
              /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("p", { className: "font-semibold text-lg text-[var(--color-text-primary)]", children: profile.name }),
              /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("p", { className: "text-[var(--color-text-secondary)]", children: profile.email })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(ChevronRightIcon, {})
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(SectionHeader, { title: "Preferences" }),
          /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "bg-[var(--color-surface-container)] rounded-xl card-shadow overflow-hidden divide-y divide-[var(--color-border)]", children: [
            /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(Link, { to: "/settings/notifications", children: /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(SettingsItem, { isLink: true, icon: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(BellIcon, {}), children: [
              /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("span", { children: "Notifications" }),
              /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(ChevronRightIcon, {})
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(Link, { to: "/settings/theme", children: /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(SettingsItem, { isLink: true, icon: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(PaletteIcon, {}), children: [
              /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("span", { children: "App Theme" }),
              /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(ChevronRightIcon, {})
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(SettingsItem, { isLink: true, onClick: () => setIsListPickerOpen(true), children: [
              /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("span", { className: "flex items-center gap-4", children: [
                /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("div", { className: "w-7 h-7 flex items-center justify-center bg-[var(--color-surface-container-low)] rounded-lg text-[var(--color-text-secondary)]", children: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(ListCheckIcon, {}) }),
                /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("span", { children: "Default List" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "flex items-center gap-2 text-[var(--color-text-secondary)]", children: [
                /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("span", { children: defaultList }),
                /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(ChevronRightIcon, {})
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(SectionHeader, { title: "Integrations" }),
          errorGoogle && /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("p", { className: "text-[var(--color-functional-red)] text-sm px-4 -mt-2 mb-2", children: errorGoogle }),
          syncMessage && /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("p", { className: "text-green-600 dark:text-green-400 text-sm px-4 -mt-2 mb-2", children: syncMessage }),
          /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "bg-[var(--color-surface-container)] rounded-xl card-shadow overflow-hidden divide-y divide-[var(--color-border)]", children: [
            /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(SettingsItem, { isLink: true, icon: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(GoogleCalendarIcon, {}), onClick: googleConnected ? () => setIsDisconnectConfirmOpen(true) : handleConnectGoogle, disabled: loadingGoogle, children: [
              /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("span", { children: "Google Calendar" }),
              /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "flex items-center gap-2 text-[var(--color-text-secondary)]", children: [
                loadingGoogle ? /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(RefreshSpinnerIcon, {}) : /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("span", { className: googleConnected ? "text-green-600 dark:text-green-400" : "", children: googleConnected ? "Connected" : "Not Connected" }),
                /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(ChevronRightIcon, {})
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(SettingsItem, { isLink: true, icon: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(OutlookCalendarIcon, {}), onClick: () => alert("Outlook Calendar sync coming soon!"), children: [
              /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("span", { children: "Outlook Calendar" }),
              /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "flex items-center gap-2 text-[var(--color-text-secondary)]", children: [
                /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("span", { children: "Not Connected" }),
                /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(ChevronRightIcon, {})
              ] })
            ] })
          ] }),
          googleConnected && /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("div", { className: "mt-4", children: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(Button_default, { variant: "secondary", onClick: handleCalendarSync, disabled: isCalendarSyncing, children: isCalendarSyncing ? "Syncing..." : "Sync with Google Calendar" }) }),
          syncError && /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(import_jsx_runtime34.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(SectionHeader, { title: "Sync Error" }),
            /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "bg-[var(--color-surface-container)] rounded-xl card-shadow p-4 space-y-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("p", { className: "text-sm text-red-600 dark:text-red-400", children: syncError }),
              /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(Button_default, { variant: "secondary", onClick: () => setIsClearConfirmOpen(true), children: "Clear Queue & Retry" })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(SectionHeader, { title: "Data Management" }),
          /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "bg-[var(--color-surface-container)] rounded-xl card-shadow overflow-hidden divide-y divide-[var(--color-border)]", children: [
            /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(SettingsItem, { icon: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(InfoIcon, {}), children: [
              /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("span", { children: "Sync Status" }),
              /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("span", { className: syncStatusColor, children: syncStatusText })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(SettingsItem, { isLink: true, onClick: handleSyncNow, icon: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(SyncIcon, { className: "w-5 h-5 text-[var(--color-text-secondary)]" }), children: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("span", { className: "text-blue-600 dark:text-blue-400", children: "Sync Now" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(SettingsItem, { isLink: true, onClick: handleExportData, icon: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(DownloadIcon, { className: "w-5 h-5 text-[var(--color-text-secondary)]" }), children: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("span", { className: "text-blue-600 dark:text-blue-400", children: "Export Data" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(SettingsItem, { isLink: true, onClick: handleImportClick, icon: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(UploadIcon, { className: "w-5 h-5 text-[var(--color-text-secondary)]" }), children: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("span", { className: "text-blue-600 dark:text-blue-400", children: "Import Data" }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(SectionHeader, { title: "About & Help" }),
          /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "bg-[var(--color-surface-container)] rounded-xl card-shadow overflow-hidden divide-y divide-[var(--color-border)]", children: [
            /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(SettingsItem, { icon: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(InfoIcon, {}), children: [
              /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("span", { children: "Version" }),
              /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("span", { className: "text-[var(--color-text-secondary)]", children: "1.0.0" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(Link, { to: "/settings/about", children: /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(SettingsItem, { isLink: true, children: [
              /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("span", { className: "ml-11", children: "Privacy Policy" }),
              /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(ChevronRightIcon, {})
            ] }) })
          ] })
        ] }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
        ConfirmationModal_default,
        {
          isOpen: isClearConfirmOpen,
          onClose: () => setIsClearConfirmOpen(false),
          onConfirm: handleClearQueue,
          title: "Clear Pending Changes?",
          message: "This will remove all unsynced changes. This action is useful if a bad operation is blocking the sync process. Are you sure?",
          confirmText: "Clear & Retry"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
        ConfirmationModal_default,
        {
          isOpen: isImportConfirmOpen,
          onClose: () => setIsImportConfirmOpen(false),
          onConfirm: handleConfirmImport,
          title: "Import Data?",
          message: "This will overwrite all your current local data. This action cannot be undone. Are you sure you want to proceed?",
          confirmText: "Overwrite & Import",
          confirmVariant: "primary"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
        ConfirmationModal_default,
        {
          isOpen: isDisconnectConfirmOpen,
          onClose: () => setIsDisconnectConfirmOpen(false),
          onConfirm: handleDisconnectGoogle,
          title: "Disconnect Google Calendar?",
          message: "Are you sure you want to disconnect? Your tasks will no longer be synced with Google Calendar.",
          confirmText: "Disconnect"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
        DefaultListSheet,
        {
          isOpen: isListPickerOpen,
          onClose: () => setIsListPickerOpen(false),
          lists,
          current: defaultList,
          onSelect: (listName) => {
            setDefaultList(listName);
            setIsListPickerOpen(false);
          }
        }
      )
    ] });
  };
  var SettingsScreen_default = SettingsScreen;

  // screens/settings/NotificationSettingsScreen.tsx
  var import_react23 = __toESM(require_react());

  // components/layouts/SettingsLayout.tsx
  var import_jsx_runtime35 = __toESM(require_jsx_runtime());
  var BackIcon = () => /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", className: "h-6 w-6", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2, children: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M15 19l-7-7 7-7" }) });
  var SettingsLayout = ({ title, children }) => {
    const navigate = useNavigate();
    return /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("div", { className: "h-full w-full flex flex-col bg-[var(--color-background-primary)]", children: [
      /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)(
        "header",
        {
          className: "flex-shrink-0 p-4 flex items-center border-b border-[var(--color-border)] bg-[var(--color-surface-container)] sticky top-0",
          style: { paddingTop: `calc(1rem + env(safe-area-inset-top, 0px))` },
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("button", { onClick: () => navigate(-1), className: "p-2 -ml-2 text-[var(--color-text-secondary)] hover:text-[var(--color-primary-500)]", children: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(BackIcon, {}) }),
            /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("h1", { className: "text-2xl font-bold text-[var(--color-text-primary)] ml-2", children: title })
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("main", { className: "flex-grow overflow-y-auto p-6", children })
    ] });
  };
  var SettingsLayout_default = SettingsLayout;

  // screens/settings/NotificationSettingsScreen.tsx
  var import_jsx_runtime36 = __toESM(require_jsx_runtime());
  var SettingsToggleItem = ({ label, enabled, setEnabled, description, icon }) => {
    const handleToggle = () => {
      triggerHapticSelection();
      setEnabled(!enabled);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)(
      "div",
      {
        onClick: handleToggle,
        className: "flex justify-between items-center p-4 cursor-pointer rounded-lg hover:bg-[var(--color-surface-container-low)] transition-colors",
        role: "switch",
        "aria-checked": enabled,
        "aria-label": label,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("div", { className: "flex items-center gap-4", children: [
            icon && /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("div", { className: "w-7 h-7 flex items-center justify-center bg-[var(--color-surface-container-low)] rounded-lg text-[var(--color-text-secondary)]", children: icon }),
            /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("span", { className: "font-medium text-[var(--color-text-primary)]", children: label }),
              description && /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("p", { className: "text-sm text-[var(--color-text-secondary)] mt-0.5", children: description })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
            "button",
            {
              "aria-hidden": "true",
              className: `relative inline-flex items-center h-7 w-12 rounded-full transition-colors ${enabled ? "bg-blue-600" : "bg-[var(--color-border)]"}`,
              children: /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("span", { className: `inline-block w-5 h-5 transform bg-white rounded-full transition-transform ${enabled ? "translate-x-6" : "translate-x-1"}` })
            }
          )
        ]
      }
    );
  };
  var NotificationSettingsScreen = () => {
    const { rescheduleAllNotifications } = useData();
    const [taskReminders, setTaskReminders] = useLocalStorage_default("notifications_taskReminders", true);
    const [dailySummary, setDailySummary] = (0, import_react23.useState)(false);
    const [appUpdates, setAppUpdates] = (0, import_react23.useState)(true);
    const [sound, setSound] = (0, import_react23.useState)(true);
    const [vibrate, setVibrate] = (0, import_react23.useState)(true);
    const handleTaskRemindersToggle = async (enabled) => {
      if (enabled) {
        const permissionGranted = await checkAndRequestNotificationPermission();
        if (permissionGranted) {
          setTaskReminders(true);
          rescheduleAllNotifications();
        } else {
          setTaskReminders(false);
        }
      } else {
        setTaskReminders(false);
        const pending = await LocalNotifications.getPending();
        if (pending.notifications.length > 0) {
          await LocalNotifications.cancel(pending);
        }
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)(SettingsLayout_default, { title: "Notifications", children: [
      /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("div", { className: "bg-[var(--color-surface-container)] p-2 rounded-lg card-shadow divide-y divide-[var(--color-border)]", children: [
        /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(SettingsToggleItem, { label: "Task Reminders", enabled: taskReminders, setEnabled: handleTaskRemindersToggle, description: "Get notified before a task is due." }),
        /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(SettingsToggleItem, { label: "Daily Summary", enabled: dailySummary, setEnabled: setDailySummary, description: "Receive a summary of your tasks for the day." }),
        /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(SettingsToggleItem, { label: "App Updates", enabled: appUpdates, setEnabled: setAppUpdates, description: "Stay informed about new features and updates." })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("div", { className: "bg-[var(--color-surface-container)] p-2 rounded-lg card-shadow mt-6 divide-y divide-[var(--color-border)]", children: [
        /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(SettingsToggleItem, { label: "Sound", enabled: sound, setEnabled: setSound, icon: /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(SoundOnIcon, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(SettingsToggleItem, { label: "Vibrate", enabled: vibrate, setEnabled: setVibrate, icon: /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(VibrateIcon, {}) })
      ] })
    ] });
  };
  var NotificationSettingsScreen_default = NotificationSettingsScreen;

  // screens/settings/DataManagementScreen.tsx
  var import_jsx_runtime37 = __toESM(require_jsx_runtime());
  var DataManagementScreen = () => {
    return /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)(SettingsLayout_default, { title: "Data Management", children: [
      /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "bg-[var(--color-surface-container)] p-6 rounded-lg card-shadow space-y-4 text-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("h3", { className: "text-lg font-semibold text-[var(--color-text-primary)]", children: "Sync Status" }),
        /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("p", { className: "text-[var(--color-text-secondary)]", children: "Last synced: Just now" }),
        /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Button_default, { variant: "primary", children: "Sync Now" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "bg-[var(--color-surface-container)] p-6 rounded-lg card-shadow mt-6 space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("h3", { className: "text-lg font-semibold text-[var(--color-text-primary)] text-center", children: "Manage Your Data" }),
        /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Button_default, { variant: "secondary", children: "Export Data" }),
        /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Button_default, { variant: "secondary", children: "Import Data" })
      ] })
    ] });
  };
  var DataManagementScreen_default = DataManagementScreen;

  // screens/settings/AboutHelpScreen.tsx
  var import_jsx_runtime38 = __toESM(require_jsx_runtime());
  var AboutHelpScreen = () => {
    return /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)(SettingsLayout_default, { title: "About & Help", children: [
      /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "flex flex-col items-center text-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "text-[var(--color-primary-500)] mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Logo_default, { className: "h-20 w-20" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("h2", { className: "text-2xl font-bold", children: "TaskMaster" }),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("p", { className: "text-[var(--color-text-secondary)]", children: "Version 1.0.0" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "bg-[var(--color-surface-container)] p-6 rounded-lg card-shadow mt-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("h3", { className: "text-lg font-semibold text-[var(--color-text-primary)] mb-2", children: "About Us" }),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("p", { className: "text-base text-[var(--color-text-secondary)]", children: "TaskMaster is designed to bring clarity and organization to your daily life. We believe in minimalist design and powerful functionality to help you focus on what truly matters." })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "bg-[var(--color-surface-container)] p-4 rounded-lg card-shadow mt-6", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("ul", { className: "divide-y divide-[var(--color-border)]", children: [
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("li", { className: "py-3", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("a", { href: "#", className: "text-[var(--color-primary-500)] hover:opacity-80", children: "Privacy Policy" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("li", { className: "py-3", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("a", { href: "#", className: "text-[var(--color-primary-500)] hover:opacity-80", children: "Terms of Service" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("li", { className: "py-3", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("a", { href: "#", className: "text-[var(--color-primary-500)] hover:opacity-80", children: "Contact Support" }) })
      ] }) })
    ] });
  };
  var AboutHelpScreen_default = AboutHelpScreen;

  // screens/settings/ThemeSettingsScreen.tsx
  var import_jsx_runtime39 = __toESM(require_jsx_runtime());
  var ThemeOption = ({ theme, selected, onSelect }) => {
    const themeVisuals = {
      Light: { bg: "bg-white", text: "text-gray-800", border: "border-gray-300" },
      Dark: { bg: "bg-gray-800", text: "text-white", border: "border-gray-600" },
      System: { bg: "bg-gradient-to-br from-white to-gray-800", text: "text-gray-800", border: "border-gray-400" }
    };
    const visual = themeVisuals[theme];
    return /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)(
      "div",
      {
        onClick: () => {
          triggerHapticSelection();
          onSelect();
        },
        className: `cursor-pointer rounded-lg p-4 border-2 transition-all ${selected ? "border-[var(--color-primary-500)]" : "border-[var(--color-border)] hover:opacity-80"}`,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: `w-full h-24 rounded-md flex flex-col p-2 justify-between ${visual.bg} ${visual.border} border`, children: [
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("div", { className: `w-3/4 h-2 rounded-sm ${selected ? "bg-[var(--color-primary-500)]" : "bg-gray-400"}` }),
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("div", { className: `w-1/2 h-2 rounded-sm ${selected ? "bg-[var(--color-primary-200)]" : "bg-gray-300"}` })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("p", { className: `mt-3 text-center font-medium ${selected ? "text-[var(--color-primary-500)]" : "text-[var(--color-text-secondary)]"}`, children: [
            theme,
            " Mode"
          ] })
        ]
      }
    );
  };
  var FontSizeOption = ({ size: size2, label, selected, onSelect }) => {
    const sizeClasses = {
      sm: "text-xs",
      md: "text-sm",
      lg: "text-base",
      xl: "text-lg"
    };
    return /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)(
      "div",
      {
        onClick: () => {
          triggerHapticSelection();
          onSelect();
        },
        className: `cursor-pointer rounded-lg p-3 border-2 flex flex-col items-center justify-center transition-all h-24 ${selected ? "border-[var(--color-primary-500)] bg-primary-100 dark:bg-primary-900/20" : "border-[var(--color-border)] hover:opacity-80"}`,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("div", { className: `font-semibold ${sizeClasses[size2]}`, children: "Aa" }),
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("p", { className: `mt-2 text-center text-xs font-medium ${selected ? "text-[var(--color-primary-500)]" : "text-[var(--color-text-secondary)]"}`, children: label })
        ]
      }
    );
  };
  var ThemeSettingsScreen = () => {
    const { theme, setTheme, fontSize, setFontSize } = useData();
    return /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)(SettingsLayout_default, { title: "App Theme", children: [
      /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("h3", { className: "text-lg font-semibold text-[var(--color-text-primary)] mb-4 text-center", children: "Appearance" }),
        /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "grid grid-cols-3 gap-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(ThemeOption, { theme: "Light", selected: theme === "Light", onSelect: () => setTheme("Light") }),
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(ThemeOption, { theme: "Dark", selected: theme === "Dark", onSelect: () => setTheme("Dark") }),
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(ThemeOption, { theme: "System", selected: theme === "System", onSelect: () => setTheme("System") })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("p", { className: "mt-6 text-sm text-[var(--color-text-secondary)] text-center", children: "Selecting 'System' will automatically switch the theme based on your device's settings." })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "mt-10", children: [
        /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("h3", { className: "text-lg font-semibold text-[var(--color-text-primary)] mb-4 text-center", children: "Font Size" }),
        /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "grid grid-cols-4 gap-4 max-w-md mx-auto", children: [
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(FontSizeOption, { size: "sm", label: "Small", selected: fontSize === "sm", onSelect: () => setFontSize("sm") }),
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(FontSizeOption, { size: "md", label: "Medium", selected: fontSize === "md", onSelect: () => setFontSize("md") }),
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(FontSizeOption, { size: "lg", label: "Default", selected: fontSize === "lg", onSelect: () => setFontSize("lg") }),
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(FontSizeOption, { size: "xl", label: "Large", selected: fontSize === "xl", onSelect: () => setFontSize("xl") })
        ] })
      ] })
    ] });
  };
  var ThemeSettingsScreen_default = ThemeSettingsScreen;

  // screens/PlanScreen.tsx
  var import_react26 = __toESM(require_react());

  // screens/EditListScreen.tsx
  var import_react24 = __toESM(require_react());
  var import_jsx_runtime40 = __toESM(require_jsx_runtime());
  var colors2 = ["green", "blue", "pink", "purple", "yellow", "red", "orange", "teal", "cyan", "indigo", "lime", "amber", "rose", "fuchsia"];
  var icons2 = ["\u{1F6D2}", "\u{1F4BC}", "\u{1F4AA}", "\u2708\uFE0F", "\u{1F381}", "\u{1F4A1}", "\u{1F3E0}", "\u2764\uFE0F", "\u{1F389}", "\u{1F4DA}", "\u{1F4B0}", "\u{1F3B5}", "\u{1F4BB}", "\u{1F331}", "\u{1F3A8}", "\u{1F37D}\uFE0F", "\u{1F3AC}", "\u{1F3C0}", "\u{1F43E}", "\u{1F48A}", "\u{1F6E0}\uFE0F", "\u{1F4AC}", "\u2728", "\u{1F4CD}"];
  var EditListScreen = ({ isOpen, onClose, list, onSaveList, onDeleteList }) => {
    const [name, setName] = (0, import_react24.useState)("");
    const [selectedIcon, setSelectedIcon] = (0, import_react24.useState)("\u{1F6D2}");
    const [selectedColor, setSelectedColor] = (0, import_react24.useState)("green");
    const [loading, setLoading] = (0, import_react24.useState)(false);
    const [error, setError] = (0, import_react24.useState)(null);
    (0, import_react24.useEffect)(() => {
      if (isOpen && list) {
        setName(list.name);
        setSelectedIcon(list.icon);
        setSelectedColor(list.color);
        setLoading(false);
        setError(null);
      }
    }, [isOpen, list]);
    const handleSubmit = async (e) => {
      e.preventDefault();
      if (!name.trim() || !list) {
        setError("List name is required.");
        return;
      }
      setLoading(true);
      setError(null);
      try {
        await onSaveList({
          ...list,
          name,
          icon: selectedIcon,
          color: selectedColor
        });
        onClose();
      } catch (err) {
        setError(err.message || "Failed to save changes.");
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    const handleDelete = () => {
      if (list && window.confirm(`Are you sure you want to delete the "${list.name}" list? All tasks within it will be moved to your default list.`)) {
        onDeleteList(list.id);
      }
    };
    const colorVariants6 = {
      green: { bg: "bg-green-500", ring: "ring-green-500" },
      blue: { bg: "bg-blue-500", ring: "ring-blue-500" },
      pink: { bg: "bg-pink-500", ring: "ring-pink-500" },
      purple: { bg: "bg-purple-500", ring: "ring-purple-500" },
      yellow: { bg: "bg-yellow-500", ring: "ring-yellow-500" },
      red: { bg: "bg-red-500", ring: "ring-red-500" },
      orange: { bg: "bg-orange-500", ring: "ring-orange-500" },
      teal: { bg: "bg-teal-500", ring: "ring-teal-500" },
      cyan: { bg: "bg-cyan-500", ring: "ring-cyan-500" },
      indigo: { bg: "bg-indigo-500", ring: "ring-indigo-500" },
      lime: { bg: "bg-lime-500", ring: "ring-lime-500" },
      amber: { bg: "bg-amber-500", ring: "ring-amber-500" },
      rose: { bg: "bg-rose-500", ring: "ring-rose-500" },
      fuchsia: { bg: "bg-fuchsia-500", ring: "ring-fuchsia-500" }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: `fixed inset-0 z-50 flex items-end transition-all duration-300 ${isOpen ? "visible" : "invisible"}`, children: [
      /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
        "div",
        {
          className: `fixed inset-0 bg-black/40 transition-opacity duration-300 ${isOpen ? "opacity-100" : "opacity-0"}`,
          onClick: onClose,
          "aria-hidden": "true"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(
        "div",
        {
          className: `w-full bg-gray-50 rounded-t-3xl shadow-2xl transition-transform duration-300 ease-out transform ${isOpen ? "translate-y-0" : "translate-y-full"}`,
          role: "dialog",
          "aria-modal": "true",
          "aria-labelledby": "edit-list-title",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("header", { className: "pt-3 px-4 pb-3 border-b border-gray-200 bg-white rounded-t-3xl sticky top-0 z-10", children: [
              /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("div", { className: "w-8 h-1 bg-gray-300 rounded-full mx-auto mb-3" }),
              /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "flex justify-between items-center h-8", children: [
                /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("button", { onClick: handleDelete, className: "p-1 text-gray-500 hover:text-red-500 rounded-full hover:bg-red-50 transition-colors", children: /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(TrashIcon, {}) }),
                /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("h2", { id: "edit-list-title", className: "text-base font-bold text-gray-900", children: "Edit List" }),
                /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("button", { type: "submit", form: "edit-list-form", disabled: loading, className: "p-1 text-blue-600 hover:text-blue-800 rounded-full hover:bg-blue-50 transition-colors disabled:opacity-50", children: loading ? /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(RefreshSpinnerIcon, {}) : /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(CheckIcon, {}) })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("form", { id: "edit-list-form", onSubmit: handleSubmit, children: /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(
              "div",
              {
                className: "p-4 space-y-6 overflow-y-auto max-h-[75vh] pb-24",
                style: { paddingBottom: `calc(6rem + env(safe-area-inset-bottom))` },
                children: [
                  error && /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("p", { className: "text-red-500 text-sm text-center -mt-4 mb-2 px-4 bg-red-50 py-2 rounded-lg", children: error }),
                  /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("div", { className: "bg-white p-4 rounded-xl shadow-sm space-y-4", children: /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { children: [
                    /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("label", { htmlFor: "list-name-edit", className: "block text-sm font-medium text-gray-700 mb-1", children: "List Name" }),
                    /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
                      "input",
                      {
                        id: "list-name-edit",
                        type: "text",
                        placeholder: "e.g. Home Project",
                        value: name,
                        onChange: (e) => setName(e.target.value),
                        required: true,
                        className: "w-full px-4 py-2.5 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                      }
                    )
                  ] }) }),
                  /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "bg-white p-4 rounded-xl shadow-sm", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Icon" }),
                    /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("div", { className: "grid grid-cols-6 gap-2", children: icons2.map((icon) => /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
                      "button",
                      {
                        type: "button",
                        onClick: () => setSelectedIcon(icon),
                        className: `flex items-center justify-center text-2xl w-12 h-12 rounded-lg transition-all ${selectedIcon === icon ? "bg-blue-100 ring-2 ring-blue-500" : "bg-gray-100 hover:bg-gray-200"}`,
                        children: icon
                      },
                      icon
                    )) })
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "bg-white p-4 rounded-xl shadow-sm", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Color" }),
                    /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("div", { className: "flex flex-wrap gap-3", children: colors2.map((color) => {
                      const variant = colorVariants6[color];
                      return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
                        "button",
                        {
                          type: "button",
                          onClick: () => setSelectedColor(color),
                          className: `w-10 h-10 rounded-full transition-all ${variant.bg} ${selectedColor === color ? `ring-2 ring-offset-2 ${variant.ring}` : ""}`,
                          "aria-label": `Select ${color} color`
                        },
                        color
                      );
                    }) })
                  ] })
                ]
              }
            ) })
          ]
        }
      )
    ] });
  };
  var EditListScreen_default = EditListScreen;

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends4() {
    return _extends4 = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
      }
      return n;
    }, _extends4.apply(null, arguments);
  }

  // node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
  function _assertThisInitialized(e) {
    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e;
  }

  // node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
  function _setPrototypeOf(t, e) {
    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
      return t2.__proto__ = e2, t2;
    }, _setPrototypeOf(t, e);
  }

  // node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
  function _inheritsLoose(t, o) {
    t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o);
  }

  // node_modules/memoize-one/dist/memoize-one.esm.js
  var safeIsNaN = Number.isNaN || function ponyfill(value) {
    return typeof value === "number" && value !== value;
  };
  function isEqual(first, second) {
    if (first === second) {
      return true;
    }
    if (safeIsNaN(first) && safeIsNaN(second)) {
      return true;
    }
    return false;
  }
  function areInputsEqual(newInputs, lastInputs) {
    if (newInputs.length !== lastInputs.length) {
      return false;
    }
    for (var i = 0; i < newInputs.length; i++) {
      if (!isEqual(newInputs[i], lastInputs[i])) {
        return false;
      }
    }
    return true;
  }
  function memoizeOne(resultFn, isEqual2) {
    if (isEqual2 === void 0) {
      isEqual2 = areInputsEqual;
    }
    var lastThis;
    var lastArgs = [];
    var lastResult;
    var calledOnce = false;
    function memoized() {
      var newArgs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        newArgs[_i] = arguments[_i];
      }
      if (calledOnce && lastThis === this && isEqual2(newArgs, lastArgs)) {
        return lastResult;
      }
      lastResult = resultFn.apply(this, newArgs);
      calledOnce = true;
      lastThis = this;
      lastArgs = newArgs;
      return lastResult;
    }
    return memoized;
  }
  var memoize_one_esm_default = memoizeOne;

  // node_modules/react-window/dist/index.esm.js
  var import_react25 = __toESM(require_react());
  var hasNativePerformanceNow = typeof performance === "object" && typeof performance.now === "function";
  var now = hasNativePerformanceNow ? function() {
    return performance.now();
  } : function() {
    return Date.now();
  };
  function cancelTimeout(timeoutID) {
    cancelAnimationFrame(timeoutID.id);
  }
  function requestTimeout(callback, delay) {
    var start = now();
    function tick() {
      if (now() - start >= delay) {
        callback.call(null);
      } else {
        timeoutID.id = requestAnimationFrame(tick);
      }
    }
    var timeoutID = {
      id: requestAnimationFrame(tick)
    };
    return timeoutID;
  }
  var size = -1;
  function getScrollbarSize(recalculate) {
    if (recalculate === void 0) {
      recalculate = false;
    }
    if (size === -1 || recalculate) {
      var div = document.createElement("div");
      var style = div.style;
      style.width = "50px";
      style.height = "50px";
      style.overflow = "scroll";
      document.body.appendChild(div);
      size = div.offsetWidth - div.clientWidth;
      document.body.removeChild(div);
    }
    return size;
  }
  var cachedRTLResult = null;
  function getRTLOffsetType(recalculate) {
    if (recalculate === void 0) {
      recalculate = false;
    }
    if (cachedRTLResult === null || recalculate) {
      var outerDiv = document.createElement("div");
      var outerStyle = outerDiv.style;
      outerStyle.width = "50px";
      outerStyle.height = "50px";
      outerStyle.overflow = "scroll";
      outerStyle.direction = "rtl";
      var innerDiv = document.createElement("div");
      var innerStyle = innerDiv.style;
      innerStyle.width = "100px";
      innerStyle.height = "100px";
      outerDiv.appendChild(innerDiv);
      document.body.appendChild(outerDiv);
      if (outerDiv.scrollLeft > 0) {
        cachedRTLResult = "positive-descending";
      } else {
        outerDiv.scrollLeft = 1;
        if (outerDiv.scrollLeft === 0) {
          cachedRTLResult = "negative";
        } else {
          cachedRTLResult = "positive-ascending";
        }
      }
      document.body.removeChild(outerDiv);
      return cachedRTLResult;
    }
    return cachedRTLResult;
  }
  if (false) {
    if (typeof window !== "undefined" && typeof window.WeakSet !== "undefined") {
      devWarningsOverscanCount = /* @__PURE__ */ new WeakSet();
      devWarningsOverscanRowsColumnsCount = /* @__PURE__ */ new WeakSet();
      devWarningsTagName = /* @__PURE__ */ new WeakSet();
    }
  }
  var IS_SCROLLING_DEBOUNCE_INTERVAL$1 = 150;
  var defaultItemKey$1 = function defaultItemKey(index2, data) {
    return index2;
  };
  if (false) {
    if (typeof window !== "undefined" && typeof window.WeakSet !== "undefined") {
      devWarningsDirection = /* @__PURE__ */ new WeakSet();
      devWarningsTagName$1 = /* @__PURE__ */ new WeakSet();
    }
  }
  function createListComponent(_ref) {
    var _class;
    var getItemOffset2 = _ref.getItemOffset, getEstimatedTotalSize2 = _ref.getEstimatedTotalSize, getItemSize2 = _ref.getItemSize, getOffsetForIndexAndAlignment2 = _ref.getOffsetForIndexAndAlignment, getStartIndexForOffset2 = _ref.getStartIndexForOffset, getStopIndexForStartIndex2 = _ref.getStopIndexForStartIndex, initInstanceProps2 = _ref.initInstanceProps, shouldResetStyleCacheOnItemSizeChange = _ref.shouldResetStyleCacheOnItemSizeChange, validateProps2 = _ref.validateProps;
    return _class = /* @__PURE__ */ function(_PureComponent) {
      _inheritsLoose(List, _PureComponent);
      function List(props) {
        var _this;
        _this = _PureComponent.call(this, props) || this;
        _this._instanceProps = initInstanceProps2(_this.props, _assertThisInitialized(_this));
        _this._outerRef = void 0;
        _this._resetIsScrollingTimeoutId = null;
        _this.state = {
          instance: _assertThisInitialized(_this),
          isScrolling: false,
          scrollDirection: "forward",
          scrollOffset: typeof _this.props.initialScrollOffset === "number" ? _this.props.initialScrollOffset : 0,
          scrollUpdateWasRequested: false
        };
        _this._callOnItemsRendered = void 0;
        _this._callOnItemsRendered = memoize_one_esm_default(function(overscanStartIndex, overscanStopIndex, visibleStartIndex, visibleStopIndex) {
          return _this.props.onItemsRendered({
            overscanStartIndex,
            overscanStopIndex,
            visibleStartIndex,
            visibleStopIndex
          });
        });
        _this._callOnScroll = void 0;
        _this._callOnScroll = memoize_one_esm_default(function(scrollDirection, scrollOffset, scrollUpdateWasRequested) {
          return _this.props.onScroll({
            scrollDirection,
            scrollOffset,
            scrollUpdateWasRequested
          });
        });
        _this._getItemStyle = void 0;
        _this._getItemStyle = function(index2) {
          var _this$props = _this.props, direction = _this$props.direction, itemSize = _this$props.itemSize, layout = _this$props.layout;
          var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && itemSize, shouldResetStyleCacheOnItemSizeChange && layout, shouldResetStyleCacheOnItemSizeChange && direction);
          var style;
          if (itemStyleCache.hasOwnProperty(index2)) {
            style = itemStyleCache[index2];
          } else {
            var _offset = getItemOffset2(_this.props, index2, _this._instanceProps);
            var size2 = getItemSize2(_this.props, index2, _this._instanceProps);
            var isHorizontal = direction === "horizontal" || layout === "horizontal";
            var isRtl = direction === "rtl";
            var offsetHorizontal = isHorizontal ? _offset : 0;
            itemStyleCache[index2] = style = {
              position: "absolute",
              left: isRtl ? void 0 : offsetHorizontal,
              right: isRtl ? offsetHorizontal : void 0,
              top: !isHorizontal ? _offset : 0,
              height: !isHorizontal ? size2 : "100%",
              width: isHorizontal ? size2 : "100%"
            };
          }
          return style;
        };
        _this._getItemStyleCache = void 0;
        _this._getItemStyleCache = memoize_one_esm_default(function(_, __, ___) {
          return {};
        });
        _this._onScrollHorizontal = function(event) {
          var _event$currentTarget = event.currentTarget, clientWidth = _event$currentTarget.clientWidth, scrollLeft = _event$currentTarget.scrollLeft, scrollWidth = _event$currentTarget.scrollWidth;
          _this.setState(function(prevState) {
            if (prevState.scrollOffset === scrollLeft) {
              return null;
            }
            var direction = _this.props.direction;
            var scrollOffset = scrollLeft;
            if (direction === "rtl") {
              switch (getRTLOffsetType()) {
                case "negative":
                  scrollOffset = -scrollLeft;
                  break;
                case "positive-descending":
                  scrollOffset = scrollWidth - clientWidth - scrollLeft;
                  break;
              }
            }
            scrollOffset = Math.max(0, Math.min(scrollOffset, scrollWidth - clientWidth));
            return {
              isScrolling: true,
              scrollDirection: prevState.scrollOffset < scrollOffset ? "forward" : "backward",
              scrollOffset,
              scrollUpdateWasRequested: false
            };
          }, _this._resetIsScrollingDebounced);
        };
        _this._onScrollVertical = function(event) {
          var _event$currentTarget2 = event.currentTarget, clientHeight = _event$currentTarget2.clientHeight, scrollHeight = _event$currentTarget2.scrollHeight, scrollTop = _event$currentTarget2.scrollTop;
          _this.setState(function(prevState) {
            if (prevState.scrollOffset === scrollTop) {
              return null;
            }
            var scrollOffset = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));
            return {
              isScrolling: true,
              scrollDirection: prevState.scrollOffset < scrollOffset ? "forward" : "backward",
              scrollOffset,
              scrollUpdateWasRequested: false
            };
          }, _this._resetIsScrollingDebounced);
        };
        _this._outerRefSetter = function(ref) {
          var outerRef = _this.props.outerRef;
          _this._outerRef = ref;
          if (typeof outerRef === "function") {
            outerRef(ref);
          } else if (outerRef != null && typeof outerRef === "object" && outerRef.hasOwnProperty("current")) {
            outerRef.current = ref;
          }
        };
        _this._resetIsScrollingDebounced = function() {
          if (_this._resetIsScrollingTimeoutId !== null) {
            cancelTimeout(_this._resetIsScrollingTimeoutId);
          }
          _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL$1);
        };
        _this._resetIsScrolling = function() {
          _this._resetIsScrollingTimeoutId = null;
          _this.setState({
            isScrolling: false
          }, function() {
            _this._getItemStyleCache(-1, null);
          });
        };
        return _this;
      }
      List.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
        validateSharedProps$1(nextProps, prevState);
        validateProps2(nextProps);
        return null;
      };
      var _proto = List.prototype;
      _proto.scrollTo = function scrollTo(scrollOffset) {
        scrollOffset = Math.max(0, scrollOffset);
        this.setState(function(prevState) {
          if (prevState.scrollOffset === scrollOffset) {
            return null;
          }
          return {
            scrollDirection: prevState.scrollOffset < scrollOffset ? "forward" : "backward",
            scrollOffset,
            scrollUpdateWasRequested: true
          };
        }, this._resetIsScrollingDebounced);
      };
      _proto.scrollToItem = function scrollToItem(index2, align) {
        if (align === void 0) {
          align = "auto";
        }
        var _this$props2 = this.props, itemCount = _this$props2.itemCount, layout = _this$props2.layout;
        var scrollOffset = this.state.scrollOffset;
        index2 = Math.max(0, Math.min(index2, itemCount - 1));
        var scrollbarSize = 0;
        if (this._outerRef) {
          var outerRef = this._outerRef;
          if (layout === "vertical") {
            scrollbarSize = outerRef.scrollWidth > outerRef.clientWidth ? getScrollbarSize() : 0;
          } else {
            scrollbarSize = outerRef.scrollHeight > outerRef.clientHeight ? getScrollbarSize() : 0;
          }
        }
        this.scrollTo(getOffsetForIndexAndAlignment2(this.props, index2, align, scrollOffset, this._instanceProps, scrollbarSize));
      };
      _proto.componentDidMount = function componentDidMount() {
        var _this$props3 = this.props, direction = _this$props3.direction, initialScrollOffset = _this$props3.initialScrollOffset, layout = _this$props3.layout;
        if (typeof initialScrollOffset === "number" && this._outerRef != null) {
          var outerRef = this._outerRef;
          if (direction === "horizontal" || layout === "horizontal") {
            outerRef.scrollLeft = initialScrollOffset;
          } else {
            outerRef.scrollTop = initialScrollOffset;
          }
        }
        this._callPropsCallbacks();
      };
      _proto.componentDidUpdate = function componentDidUpdate() {
        var _this$props4 = this.props, direction = _this$props4.direction, layout = _this$props4.layout;
        var _this$state = this.state, scrollOffset = _this$state.scrollOffset, scrollUpdateWasRequested = _this$state.scrollUpdateWasRequested;
        if (scrollUpdateWasRequested && this._outerRef != null) {
          var outerRef = this._outerRef;
          if (direction === "horizontal" || layout === "horizontal") {
            if (direction === "rtl") {
              switch (getRTLOffsetType()) {
                case "negative":
                  outerRef.scrollLeft = -scrollOffset;
                  break;
                case "positive-ascending":
                  outerRef.scrollLeft = scrollOffset;
                  break;
                default:
                  var clientWidth = outerRef.clientWidth, scrollWidth = outerRef.scrollWidth;
                  outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;
                  break;
              }
            } else {
              outerRef.scrollLeft = scrollOffset;
            }
          } else {
            outerRef.scrollTop = scrollOffset;
          }
        }
        this._callPropsCallbacks();
      };
      _proto.componentWillUnmount = function componentWillUnmount() {
        if (this._resetIsScrollingTimeoutId !== null) {
          cancelTimeout(this._resetIsScrollingTimeoutId);
        }
      };
      _proto.render = function render() {
        var _this$props5 = this.props, children = _this$props5.children, className = _this$props5.className, direction = _this$props5.direction, height = _this$props5.height, innerRef = _this$props5.innerRef, innerElementType = _this$props5.innerElementType, innerTagName = _this$props5.innerTagName, itemCount = _this$props5.itemCount, itemData = _this$props5.itemData, _this$props5$itemKey = _this$props5.itemKey, itemKey = _this$props5$itemKey === void 0 ? defaultItemKey$1 : _this$props5$itemKey, layout = _this$props5.layout, outerElementType = _this$props5.outerElementType, outerTagName = _this$props5.outerTagName, style = _this$props5.style, useIsScrolling = _this$props5.useIsScrolling, width = _this$props5.width;
        var isScrolling = this.state.isScrolling;
        var isHorizontal = direction === "horizontal" || layout === "horizontal";
        var onScroll = isHorizontal ? this._onScrollHorizontal : this._onScrollVertical;
        var _this$_getRangeToRend = this._getRangeToRender(), startIndex = _this$_getRangeToRend[0], stopIndex = _this$_getRangeToRend[1];
        var items = [];
        if (itemCount > 0) {
          for (var _index = startIndex; _index <= stopIndex; _index++) {
            items.push((0, import_react25.createElement)(children, {
              data: itemData,
              key: itemKey(_index, itemData),
              index: _index,
              isScrolling: useIsScrolling ? isScrolling : void 0,
              style: this._getItemStyle(_index)
            }));
          }
        }
        var estimatedTotalSize = getEstimatedTotalSize2(this.props, this._instanceProps);
        return (0, import_react25.createElement)(outerElementType || outerTagName || "div", {
          className,
          onScroll,
          ref: this._outerRefSetter,
          style: _extends4({
            position: "relative",
            height,
            width,
            overflow: "auto",
            WebkitOverflowScrolling: "touch",
            willChange: "transform",
            direction
          }, style)
        }, (0, import_react25.createElement)(innerElementType || innerTagName || "div", {
          children: items,
          ref: innerRef,
          style: {
            height: isHorizontal ? "100%" : estimatedTotalSize,
            pointerEvents: isScrolling ? "none" : void 0,
            width: isHorizontal ? estimatedTotalSize : "100%"
          }
        }));
      };
      _proto._callPropsCallbacks = function _callPropsCallbacks() {
        if (typeof this.props.onItemsRendered === "function") {
          var itemCount = this.props.itemCount;
          if (itemCount > 0) {
            var _this$_getRangeToRend2 = this._getRangeToRender(), _overscanStartIndex = _this$_getRangeToRend2[0], _overscanStopIndex = _this$_getRangeToRend2[1], _visibleStartIndex = _this$_getRangeToRend2[2], _visibleStopIndex = _this$_getRangeToRend2[3];
            this._callOnItemsRendered(_overscanStartIndex, _overscanStopIndex, _visibleStartIndex, _visibleStopIndex);
          }
        }
        if (typeof this.props.onScroll === "function") {
          var _this$state2 = this.state, _scrollDirection = _this$state2.scrollDirection, _scrollOffset = _this$state2.scrollOffset, _scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;
          this._callOnScroll(_scrollDirection, _scrollOffset, _scrollUpdateWasRequested);
        }
      };
      _proto._getRangeToRender = function _getRangeToRender() {
        var _this$props6 = this.props, itemCount = _this$props6.itemCount, overscanCount = _this$props6.overscanCount;
        var _this$state3 = this.state, isScrolling = _this$state3.isScrolling, scrollDirection = _this$state3.scrollDirection, scrollOffset = _this$state3.scrollOffset;
        if (itemCount === 0) {
          return [0, 0, 0, 0];
        }
        var startIndex = getStartIndexForOffset2(this.props, scrollOffset, this._instanceProps);
        var stopIndex = getStopIndexForStartIndex2(this.props, startIndex, scrollOffset, this._instanceProps);
        var overscanBackward = !isScrolling || scrollDirection === "backward" ? Math.max(1, overscanCount) : 1;
        var overscanForward = !isScrolling || scrollDirection === "forward" ? Math.max(1, overscanCount) : 1;
        return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];
      };
      return List;
    }(import_react25.PureComponent), _class.defaultProps = {
      direction: "ltr",
      itemData: void 0,
      layout: "vertical",
      overscanCount: 2,
      useIsScrolling: false
    }, _class;
  }
  var validateSharedProps$1 = function validateSharedProps(_ref2, _ref3) {
    var children = _ref2.children, direction = _ref2.direction, height = _ref2.height, layout = _ref2.layout, innerTagName = _ref2.innerTagName, outerTagName = _ref2.outerTagName, width = _ref2.width;
    var instance = _ref3.instance;
    if (false) {
      if (innerTagName != null || outerTagName != null) {
        if (devWarningsTagName$1 && !devWarningsTagName$1.has(instance)) {
          devWarningsTagName$1.add(instance);
          console.warn("The innerTagName and outerTagName props have been deprecated. Please use the innerElementType and outerElementType props instead.");
        }
      }
      var isHorizontal = direction === "horizontal" || layout === "horizontal";
      switch (direction) {
        case "horizontal":
        case "vertical":
          if (devWarningsDirection && !devWarningsDirection.has(instance)) {
            devWarningsDirection.add(instance);
            console.warn('The direction prop should be either "ltr" (default) or "rtl". Please use the layout prop to specify "vertical" (default) or "horizontal" orientation.');
          }
          break;
        case "ltr":
        case "rtl":
          break;
        default:
          throw Error('An invalid "direction" prop has been specified. Value should be either "ltr" or "rtl". ' + ('"' + direction + '" was specified.'));
      }
      switch (layout) {
        case "horizontal":
        case "vertical":
          break;
        default:
          throw Error('An invalid "layout" prop has been specified. Value should be either "horizontal" or "vertical". ' + ('"' + layout + '" was specified.'));
      }
      if (children == null) {
        throw Error('An invalid "children" prop has been specified. Value should be a React component. ' + ('"' + (children === null ? "null" : typeof children) + '" was specified.'));
      }
      if (isHorizontal && typeof width !== "number") {
        throw Error('An invalid "width" prop has been specified. Horizontal lists must specify a number for width. ' + ('"' + (width === null ? "null" : typeof width) + '" was specified.'));
      } else if (!isHorizontal && typeof height !== "number") {
        throw Error('An invalid "height" prop has been specified. Vertical lists must specify a number for height. ' + ('"' + (height === null ? "null" : typeof height) + '" was specified.'));
      }
    }
  };
  var FixedSizeList = /* @__PURE__ */ createListComponent({
    getItemOffset: function getItemOffset(_ref, index2) {
      var itemSize = _ref.itemSize;
      return index2 * itemSize;
    },
    getItemSize: function getItemSize(_ref2, index2) {
      var itemSize = _ref2.itemSize;
      return itemSize;
    },
    getEstimatedTotalSize: function getEstimatedTotalSize(_ref3) {
      var itemCount = _ref3.itemCount, itemSize = _ref3.itemSize;
      return itemSize * itemCount;
    },
    getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(_ref4, index2, align, scrollOffset, instanceProps, scrollbarSize) {
      var direction = _ref4.direction, height = _ref4.height, itemCount = _ref4.itemCount, itemSize = _ref4.itemSize, layout = _ref4.layout, width = _ref4.width;
      var isHorizontal = direction === "horizontal" || layout === "horizontal";
      var size2 = isHorizontal ? width : height;
      var lastItemOffset = Math.max(0, itemCount * itemSize - size2);
      var maxOffset = Math.min(lastItemOffset, index2 * itemSize);
      var minOffset = Math.max(0, index2 * itemSize - size2 + itemSize + scrollbarSize);
      if (align === "smart") {
        if (scrollOffset >= minOffset - size2 && scrollOffset <= maxOffset + size2) {
          align = "auto";
        } else {
          align = "center";
        }
      }
      switch (align) {
        case "start":
          return maxOffset;
        case "end":
          return minOffset;
        case "center": {
          var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);
          if (middleOffset < Math.ceil(size2 / 2)) {
            return 0;
          } else if (middleOffset > lastItemOffset + Math.floor(size2 / 2)) {
            return lastItemOffset;
          } else {
            return middleOffset;
          }
        }
        case "auto":
        default:
          if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
            return scrollOffset;
          } else if (scrollOffset < minOffset) {
            return minOffset;
          } else {
            return maxOffset;
          }
      }
    },
    getStartIndexForOffset: function getStartIndexForOffset(_ref5, offset) {
      var itemCount = _ref5.itemCount, itemSize = _ref5.itemSize;
      return Math.max(0, Math.min(itemCount - 1, Math.floor(offset / itemSize)));
    },
    getStopIndexForStartIndex: function getStopIndexForStartIndex(_ref6, startIndex, scrollOffset) {
      var direction = _ref6.direction, height = _ref6.height, itemCount = _ref6.itemCount, itemSize = _ref6.itemSize, layout = _ref6.layout, width = _ref6.width;
      var isHorizontal = direction === "horizontal" || layout === "horizontal";
      var offset = startIndex * itemSize;
      var size2 = isHorizontal ? width : height;
      var numVisibleItems = Math.ceil((size2 + scrollOffset - offset) / itemSize);
      return Math.max(0, Math.min(
        itemCount - 1,
        startIndex + numVisibleItems - 1
        // -1 is because stop index is inclusive
      ));
    },
    initInstanceProps: function initInstanceProps(props) {
    },
    shouldResetStyleCacheOnItemSizeChange: true,
    validateProps: function validateProps(_ref7) {
      var itemSize = _ref7.itemSize;
      if (false) {
        if (typeof itemSize !== "number") {
          throw Error('An invalid "itemSize" prop has been specified. Value should be a number. ' + ('"' + (itemSize === null ? "null" : typeof itemSize) + '" was specified.'));
        }
      }
    }
  });

  // screens/PlanScreen.tsx
  var import_jsx_runtime41 = __toESM(require_jsx_runtime());
  var colorVariants4 = {
    green: { bg: "bg-green-100 dark:bg-green-900/30" },
    blue: { bg: "bg-blue-100 dark:bg-blue-900/30" },
    pink: { bg: "bg-pink-100 dark:bg-pink-900/30" },
    purple: { bg: "bg-purple-100 dark:bg-purple-900/30" },
    yellow: { bg: "bg-yellow-100 dark:bg-yellow-900/30" },
    red: { bg: "bg-red-100 dark:bg-red-900/30" },
    orange: { bg: "bg-orange-100 dark:bg-orange-900/30" }
  };
  var formatDateToYYYYMMDD = (date) => {
    const year = date.getFullYear();
    const month = (date.getMonth() + 1).toString().padStart(2, "0");
    const day = date.getDate().toString().padStart(2, "0");
    return `${year}-${month}-${day}`;
  };
  var PlanScreen = () => {
    const [viewMode, setViewMode] = (0, import_react26.useState)("lists");
    const {
      lists: taskLists,
      tasks: allTasks,
      addList,
      updateList,
      deleteList,
      syncData,
      addTask,
      updateTask
    } = useData();
    const navigate = useNavigate();
    const [isAddListOpen, setIsAddListOpen] = (0, import_react26.useState)(false);
    const [isEditListOpen, setIsEditListOpen] = (0, import_react26.useState)(false);
    const [listToEdit, setListToEdit] = (0, import_react26.useState)(null);
    const [isSearchVisible, setIsSearchVisible] = (0, import_react26.useState)(false);
    const [searchQuery, setSearchQuery] = (0, import_react26.useState)("");
    const searchInputRef = (0, import_react26.useRef)(null);
    const [currentDate, setCurrentDate] = (0, import_react26.useState)(/* @__PURE__ */ new Date());
    const [selectedDate, setSelectedDate] = (0, import_react26.useState)(/* @__PURE__ */ new Date());
    const [isCalendarCollapsed, setIsCalendarCollapsed] = (0, import_react26.useState)(false);
    const [taskFilterMode, setTaskFilterMode] = (0, import_react26.useState)("due");
    const [isAddTaskOpen, setIsAddTaskOpen] = (0, import_react26.useState)(false);
    const [completingTaskId, setCompletingTaskId] = (0, import_react26.useState)(null);
    const [isDetailOpen, setIsDetailOpen] = (0, import_react26.useState)(false);
    const [isEditOpen, setIsEditOpen] = (0, import_react26.useState)(false);
    const [selectedTask, setSelectedTask] = (0, import_react26.useState)(null);
    const [isRefreshing, setIsRefreshing] = (0, import_react26.useState)(false);
    const [pullDelta, setPullDelta] = (0, import_react26.useState)(0);
    const gestureStart = (0, import_react26.useRef)(null);
    const gestureType = (0, import_react26.useRef)("none");
    const listsViewRef = (0, import_react26.useRef)(null);
    const calendarViewRef = (0, import_react26.useRef)(null);
    const REFRESH_THRESHOLD = 80;
    const MIN_SWIPE_DISTANCE = 50;
    const [mainListSize, setMainListSize] = (0, import_react26.useState)({ width: 0, height: 0 });
    const mainListContainerRef = (0, import_react26.useRef)(null);
    const [searchListSize, setSearchListSize] = (0, import_react26.useState)({ width: 0, height: 0 });
    const searchListContainerRef = (0, import_react26.useRef)(null);
    const LIST_ITEM_SIZE = 92;
    (0, import_react26.useEffect)(() => {
      if (isSearchVisible) {
        setTimeout(() => searchInputRef.current?.focus(), 300);
      }
    }, [isSearchVisible]);
    (0, import_react26.useEffect)(() => {
      const mainEl = mainListContainerRef.current;
      if (mainEl) {
        const resizeObserver = new ResizeObserver((entries) => {
          if (entries[0]) {
            const { width, height } = entries[0].contentRect;
            setMainListSize({ width, height });
          }
        });
        resizeObserver.observe(mainEl);
        return () => resizeObserver.disconnect();
      }
    }, []);
    (0, import_react26.useEffect)(() => {
      const searchEl = searchListContainerRef.current;
      if (searchEl && isSearchVisible) {
        const resizeObserver = new ResizeObserver((entries) => {
          if (entries[0]) {
            const { width, height } = entries[0].contentRect;
            setSearchListSize({ width, height });
          }
        });
        resizeObserver.observe(searchEl);
        return () => resizeObserver.disconnect();
      }
    }, [isSearchVisible]);
    const taskCounts = (0, import_react26.useMemo)(() => {
      const counts = {};
      for (const task of allTasks) {
        if (!task.completed) {
          counts[task.category] = (counts[task.category] || 0) + 1;
        }
      }
      return counts;
    }, [allTasks]);
    const filteredTaskLists = (0, import_react26.useMemo)(() => {
      if (!searchQuery) {
        return taskLists;
      }
      const lowerCaseQuery = searchQuery.toLowerCase();
      return taskLists.filter(
        (list) => list.name.toLowerCase().includes(lowerCaseQuery)
      );
    }, [taskLists, searchQuery]);
    const handleAddList = async (newListData) => await addList(newListData);
    const handleOpenEditModal = (list) => {
      setListToEdit(list);
      setIsEditListOpen(true);
    };
    const handleCloseEditModal = () => {
      setIsEditListOpen(false);
      setListToEdit(null);
    };
    const handleSaveList = async (updatedList) => {
      await updateList(updatedList.id, updatedList);
      handleCloseEditModal();
    };
    const handleDeleteList = async (listId) => {
      const listToDelete = taskLists.find((l) => l.id === listId);
      if (listToDelete) await deleteList(listId, listToDelete.name);
      handleCloseEditModal();
    };
    const pressTimerRef = (0, import_react26.useRef)(null);
    const isClickRef = (0, import_react26.useRef)(true);
    const cancelLongPress = () => {
      if (pressTimerRef.current) clearTimeout(pressTimerRef.current);
    };
    const onPointerDown = (list) => {
      isClickRef.current = true;
      cancelLongPress();
      pressTimerRef.current = setTimeout(() => {
        isClickRef.current = false;
        handleOpenEditModal(list);
      }, 500);
    };
    const onPointerUp = (listId) => {
      cancelLongPress();
      if (isClickRef.current) navigate(`/lists/${listId}`);
    };
    const ListRow = ({ data, index: index2, style }) => {
      const list = data[index2];
      const colors3 = colorVariants4[list.color] || colorVariants4.blue;
      const count = taskCounts[list.name] || 0;
      return /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { style, children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { style: { paddingBottom: "12px" }, children: /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(
        "div",
        {
          onPointerDown: () => onPointerDown(list),
          onPointerUp: () => onPointerUp(list.id),
          onPointerLeave: cancelLongPress,
          onPointerCancel: cancelLongPress,
          className: "bg-white dark:bg-gray-800 p-4 rounded-xl card-shadow flex items-center space-x-4 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors select-none h-[80px]",
          onContextMenu: (e) => e.preventDefault(),
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: `p-2 rounded-lg flex items-center justify-center w-12 h-12 ${colors3.bg}`, children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("span", { className: "text-2xl", children: list.icon }) }),
            /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("p", { className: "font-semibold text-gray-800 dark:text-gray-200", children: list.name }),
              /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: [
                count,
                " tasks"
              ] })
            ] })
          ]
        }
      ) }) });
    };
    const listColorMap = (0, import_react26.useMemo)(() => new Map(taskLists.map((l) => [l.name, l.color])), [taskLists]);
    const firstDayOfMonth = (0, import_react26.useMemo)(() => new Date(currentDate.getFullYear(), currentDate.getMonth(), 1), [currentDate]);
    const lastDayOfMonth = (0, import_react26.useMemo)(() => new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0), [currentDate]);
    const tasksByDay = (0, import_react26.useMemo)(() => {
      const map = /* @__PURE__ */ new Map();
      const ensureDay = (date) => {
        if (!map.has(date)) map.set(date, { due: [], start: [] });
      };
      allTasks.forEach((task) => {
        if (task.dueDate) {
          ensureDay(task.dueDate);
          map.get(task.dueDate).due.push(task);
        }
        if (task.startDate) {
          ensureDay(task.startDate);
          map.get(task.startDate).start.push(task);
        }
      });
      return map;
    }, [allTasks]);
    const displayedDays = (0, import_react26.useMemo)(() => {
      const generateDays = (startDate, dayCount, offset = 0) => {
        const days = [];
        for (let i = 0; i < offset; i++) days.push({ day: null, date: null, hasTask: false });
        for (let i = 0; i < dayCount; i++) {
          const date = new Date(startDate);
          date.setDate(date.getDate() + i);
          const dateString = formatDateToYYYYMMDD(date);
          const dayTasks = tasksByDay.get(dateString);
          days.push({ day: date.getDate(), date, hasTask: !!dayTasks && (dayTasks.due.length > 0 || dayTasks.start.length > 0) });
        }
        return days;
      };
      if (isCalendarCollapsed) {
        const startOfWeek = new Date(selectedDate);
        startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());
        return generateDays(startOfWeek, 7);
      } else {
        return generateDays(firstDayOfMonth, lastDayOfMonth.getDate(), firstDayOfMonth.getDay());
      }
    }, [isCalendarCollapsed, selectedDate, tasksByDay, firstDayOfMonth, lastDayOfMonth]);
    const selectedDayTasks = (0, import_react26.useMemo)(() => {
      const dateString = formatDateToYYYYMMDD(selectedDate);
      const dayTasks = tasksByDay.get(dateString);
      if (!dayTasks) return [];
      const tasksToShow = taskFilterMode === "start" ? dayTasks.start : dayTasks.due;
      return [...tasksToShow].sort((a, b) => (a.completed ? 1 : 0) - (b.completed ? 1 : 0));
    }, [selectedDate, tasksByDay, taskFilterMode]);
    const handleCompleteTask = (taskId) => {
      setCompletingTaskId(taskId);
      setTimeout(async () => {
        await updateTask(taskId, { completed: true });
        setCompletingTaskId(null);
      }, 300);
    };
    const handleUncompleteTask = (taskId) => updateTask(taskId, { completed: false });
    const handleToggleSubtask = (taskId, subtaskId) => {
      const task = allTasks.find((t) => t.id === taskId);
      if (task?.subtasks) {
        const newSubtasks = task.subtasks.map((s) => s.id === subtaskId ? { ...s, completed: !s.completed } : s);
        updateTask(taskId, { subtasks: newSubtasks });
        if (selectedTask?.id === taskId) setSelectedTask((p) => p ? { ...p, subtasks: newSubtasks } : null);
      }
    };
    const handleToggleImportant = (taskId) => {
      const task = allTasks.find((t) => t.id === taskId);
      if (task) updateTask(taskId, { important: !task.important });
    };
    const handleToggleToday = (taskId) => {
      const task = allTasks.find((t) => t.id === taskId);
      if (task) updateTask(taskId, { today: !task.today });
    };
    const handleOpenTaskDetail = (task) => {
      setSelectedTask(task);
      setIsDetailOpen(true);
    };
    const handleCloseTaskDetail = () => {
      setIsDetailOpen(false);
      setTimeout(() => setSelectedTask(null), 300);
    };
    const handleOpenEditTask = () => {
      setIsDetailOpen(false);
      setIsEditOpen(true);
    };
    const handleCloseEditTask = () => {
      setIsEditOpen(false);
      setTimeout(() => setSelectedTask(null), 300);
    };
    const handleSaveTask = async (updatedTask) => {
      await updateTask(updatedTask.id, updatedTask);
    };
    const handleSelectDate = (date) => {
      if (isSameDay(date, selectedDate)) setIsAddTaskOpen(true);
      else setSelectedDate(date);
    };
    const handleAddTask = async (newTaskData) => {
      const newTask = {
        title: newTaskData.title,
        category: newTaskData.list,
        important: newTaskData.isImportant,
        today: newTaskData.isToday,
        type: newTaskData.type,
        dueDate: newTaskData.dueDate || void 0,
        startDate: newTaskData.type === "Fixed" ? newTaskData.startDate || void 0 : void 0,
        startTime: newTaskData.type === "Fixed" ? newTaskData.startTime || void 0 : void 0,
        time: newTaskData.type === "Fixed" ? newTaskData.startTime || "--:--" : "--:--",
        duration: newTaskData.duration ? parseInt(newTaskData.duration, 10) : void 0,
        notes: newTaskData.notes || void 0,
        subtasks: newTaskData.subtasks || [],
        color: listColorMap.get(newTaskData.list) || "gray"
      };
      await addTask(newTask);
    };
    const handlePrevMonth = () => setCurrentDate((p) => new Date(p.getFullYear(), p.getMonth() - 1, 1));
    const handleNextMonth = () => setCurrentDate((p) => new Date(p.getFullYear(), p.getMonth() + 1, 1));
    const today = /* @__PURE__ */ new Date();
    const isSameDay = (d1, d2) => d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate();
    const dayHeaders = ["S", "M", "T", "W", "T", "F", "S"];
    const handleTouchStart = (e) => {
      gestureStart.current = { x: e.touches[0].clientX, y: e.touches[0].clientY };
      gestureType.current = "none";
      const activeScrollView = viewMode === "lists" ? mainListContainerRef.current : calendarViewRef.current;
      if (activeScrollView?.scrollTop !== 0) {
        gestureStart.current.y = -1;
      }
    };
    const handleTouchMove = (e) => {
      if (!gestureStart.current) return;
      const deltaX = e.touches[0].clientX - gestureStart.current.x;
      const deltaY = e.touches[0].clientY - gestureStart.current.y;
      if (gestureType.current === "none") {
        if (Math.abs(deltaX) > 10 && Math.abs(deltaX) > Math.abs(deltaY)) {
          gestureType.current = "horizontal";
        } else if (Math.abs(deltaY) > 10 && Math.abs(deltaY) > Math.abs(deltaX)) {
          gestureType.current = "vertical";
        }
      }
      if (gestureType.current === "vertical" && gestureStart.current.y !== -1 && deltaY > 0) {
        setPullDelta(Math.pow(deltaY, 0.85));
      }
    };
    const handleTouchEnd = (e) => {
      if (!gestureStart.current) return;
      if (gestureType.current === "horizontal") {
        const endX = e.changedTouches[0].clientX;
        const distance = gestureStart.current.x - endX;
        if (distance > MIN_SWIPE_DISTANCE && viewMode === "lists") {
          setViewMode("calendar");
        } else if (distance < -MIN_SWIPE_DISTANCE && viewMode === "calendar") {
          setViewMode("lists");
        }
      } else if (gestureType.current === "vertical" && gestureStart.current.y !== -1) {
        if (pullDelta > REFRESH_THRESHOLD) {
          setIsRefreshing(true);
          syncData().finally(() => {
            setIsRefreshing(false);
            setPullDelta(0);
          });
        } else {
          setPullDelta(0);
        }
      }
      gestureStart.current = null;
      gestureType.current = "none";
    };
    return /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(MainLayout_default, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "absolute inset-0 flex flex-col overflow-hidden", children: [
        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: `absolute top-0 left-0 right-0 h-14 flex justify-center items-center transition-opacity duration-300 pointer-events-none ${pullDelta > 0 || isRefreshing ? "opacity-100" : "opacity-0"}`, children: isRefreshing ? /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(RefreshSpinnerIcon, {}) : /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(ChevronDownIcon, { className: `w-6 h-6 text-gray-500 dark:text-gray-400 transition-transform duration-300 ${pullDelta > REFRESH_THRESHOLD ? "rotate-180" : ""}` }) }),
        /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(
          "div",
          {
            className: "h-full flex flex-col",
            style: { transform: `translateY(${isRefreshing ? 56 : pullDelta}px)`, transition: pullDelta === 0 || isRefreshing ? "transform 0.3s" : "none" },
            onTouchStart: handleTouchStart,
            onTouchMove: handleTouchMove,
            onTouchEnd: handleTouchEnd,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(
                "header",
                {
                  className: "px-6 pt-6 pb-4 grid grid-cols-[auto_1fr_auto] items-center gap-4 flex-shrink-0 bg-[var(--color-surface-container)] border-b border-[var(--color-border)]",
                  style: { paddingTop: `calc(1.5rem + env(safe-area-inset-top, 0px))` },
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "flex justify-start", children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("button", { className: "text-gray-600 dark:text-gray-400 p-1", onClick: () => setIsSearchVisible(true), children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(SearchIcon, {}) }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "flex justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "grid grid-cols-2 bg-gray-200 dark:bg-gray-700 rounded-lg p-1 w-full max-w-48", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("button", { onClick: () => setViewMode("lists"), className: `w-full text-center py-1.5 text-sm font-semibold rounded-md transition-all ${viewMode === "lists" ? "bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-200 shadow-sm" : "text-gray-500 dark:text-gray-400"}`, children: "Lists" }),
                      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("button", { onClick: () => setViewMode("calendar"), className: `w-full text-center py-1.5 text-sm font-semibold rounded-md transition-all ${viewMode === "calendar" ? "bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-200 shadow-sm" : "text-gray-500 dark:text-gray-400"}`, children: "Calendar" })
                    ] }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "flex justify-end", children: viewMode === "lists" ? /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("button", { className: "text-gray-800 dark:text-gray-200", onClick: () => setIsAddListOpen(true), children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(PlusIconHeader, {}) }) : /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("button", { onClick: () => setTaskFilterMode((p) => p === "due" ? "start" : "due"), className: "text-gray-600 dark:text-gray-400 p-1 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(HamburgerMenuIcon, {}) }) })
                  ]
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("main", { className: "overflow-hidden flex-grow flex flex-col", children: /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(
                "div",
                {
                  className: "flex h-full transition-transform duration-300 ease-out",
                  style: { transform: viewMode === "lists" ? "translateX(0%)" : "translateX(-100%)" },
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { ref: mainListContainerRef, className: "w-full flex-shrink-0 h-full px-6 pb-24 pt-4", children: taskLists.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(EmptyListsIllustration, { onAddList: () => setIsAddListOpen(true) }) : mainListSize.height > 0 && /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
                      FixedSizeList,
                      {
                        height: mainListSize.height,
                        width: mainListSize.width,
                        itemCount: taskLists.length,
                        itemSize: LIST_ITEM_SIZE,
                        itemData: taskLists,
                        children: ListRow
                      }
                    ) }),
                    /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { ref: calendarViewRef, className: "w-full flex-shrink-0 h-full overflow-y-auto px-6 pb-24", children: /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "pt-4 -mx-1", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "mb-6 flex-shrink-0", children: [
                        /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: `flex items-center mb-4 ${isCalendarCollapsed ? "justify-center" : "justify-between"}`, children: [
                          !isCalendarCollapsed && /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("button", { onClick: handlePrevMonth, className: "p-1 text-gray-500 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200", children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(ChevronLeftIcon, {}) }),
                          /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("button", { onClick: () => setIsCalendarCollapsed(!isCalendarCollapsed), className: "flex items-center gap-1 font-bold text-lg text-gray-800 dark:text-gray-200 focus:outline-none rounded-md px-2 py-1 hover:bg-gray-100 dark:hover:bg-gray-700", children: [
                            currentDate.toLocaleString("default", { month: "long", year: "numeric" }),
                            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(ChevronDownIcon, { className: `w-5 h-5 text-gray-500 dark:text-gray-400 transition-transform duration-300 ${isCalendarCollapsed ? "rotate-180" : ""}` })
                          ] }),
                          !isCalendarCollapsed && /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("button", { onClick: handleNextMonth, className: "p-1 text-gray-500 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200", children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(ChevronRightIcon, {}) })
                        ] }),
                        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: `transition-all duration-500 ease-in-out overflow-hidden ${isCalendarCollapsed ? "max-h-20" : "max-h-96"}`, children: /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "grid grid-cols-7 gap-y-2 text-center", children: [
                          dayHeaders.map((day) => /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "text-sm font-medium text-gray-500 dark:text-gray-400", children: day }, day)),
                          displayedDays.map((dayObj, index2) => {
                            const isSelected = dayObj.date && isSameDay(dayObj.date, selectedDate);
                            const isToday = dayObj.date && isSameDay(dayObj.date, today);
                            let buttonClass = "text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700";
                            if (isSelected) buttonClass = "bg-blue-600 text-white";
                            else if (isToday) buttonClass = "bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200";
                            return /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "py-1.5 flex justify-center items-center", children: dayObj.day && /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("button", { onClick: () => dayObj.date && handleSelectDate(dayObj.date), className: `w-8 h-8 rounded-full text-sm font-medium flex flex-col items-center justify-center transition-colors relative ${buttonClass}`, children: [
                              dayObj.day,
                              dayObj.hasTask && !isSelected && /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "absolute bottom-1 w-1 h-1 bg-blue-500 rounded-full" })
                            ] }) }, index2);
                          })
                        ] }) })
                      ] }),
                      /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "flex-grow flex flex-col", children: [
                        /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("h2", { className: "text-lg font-bold text-gray-800 dark:text-gray-200 mb-4 flex-shrink-0", children: [
                          taskFilterMode === "due" ? "Tasks Due for " : "Tasks Starting ",
                          selectedDate.toLocaleString("default", { month: "long" }),
                          " ",
                          selectedDate.getDate()
                        ] }),
                        selectedDayTasks.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "flex-grow flex flex-col", children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(EmptyCalendarIllustration, {}) }) : /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "space-y-3", children: selectedDayTasks.map((task) => /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(TaskCard_default, { ...task, onComplete: () => handleCompleteTask(task.id), isCompleting: completingTaskId === task.id, onUncomplete: () => handleUncompleteTask(task.id), onToggleSubtask: handleToggleSubtask, onToggleImportant: () => handleToggleImportant(task.id), onToggleToday: () => handleToggleToday(task.id), onClick: () => handleOpenTaskDetail(task) }, task.id)) })
                      ] })
                    ] }) })
                  ]
                }
              ) })
            ]
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(
        "div",
        {
          className: `fixed inset-0 z-40 bg-gray-50 dark:bg-gray-900 flex flex-col transition-transform duration-300 ease-in-out ${isSearchVisible ? "translate-y-0" : "translate-y-full"}`,
          style: { paddingTop: `var(--safe-area-inset-top, 0px)` },
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "flex-shrink-0 px-4 pt-4 pb-3 flex items-center gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "relative flex-grow", children: [
                /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none", children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(SearchIcon, {}) }),
                /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
                  "input",
                  {
                    ref: searchInputRef,
                    type: "text",
                    value: searchQuery,
                    onChange: (e) => setSearchQuery(e.target.value),
                    placeholder: "Search lists...",
                    className: "w-full pl-10 pr-4 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900 dark:text-gray-100"
                  }
                )
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
                "button",
                {
                  onClick: () => {
                    setIsSearchVisible(false);
                    setSearchQuery("");
                  },
                  className: "font-semibold text-blue-600 dark:text-blue-400 px-2",
                  children: "Cancel"
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { ref: searchListContainerRef, className: "flex-grow px-6 pb-24 pt-4", children: filteredTaskLists.length === 0 && searchQuery ? /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "text-center py-16", children: [
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("p", { className: "text-lg font-semibold text-gray-700 dark:text-gray-300", children: "No lists found" }),
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400 mt-1", children: "Try a different search term." })
            ] }) : searchListSize.height > 0 && /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
              FixedSizeList,
              {
                height: searchListSize.height,
                width: searchListSize.width,
                itemCount: filteredTaskLists.length,
                itemSize: LIST_ITEM_SIZE,
                itemData: filteredTaskLists,
                children: ListRow
              }
            ) })
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(AddListScreen_default, { isOpen: isAddListOpen, onClose: () => setIsAddListOpen(false), onAddList: handleAddList }),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(EditListScreen_default, { isOpen: isEditListOpen, onClose: handleCloseEditModal, list: listToEdit, onSaveList: handleSaveList, onDeleteList: handleDeleteList }),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(AddTaskScreen_default, { isOpen: isAddTaskOpen, onClose: () => setIsAddTaskOpen(false), initialDate: formatDateToYYYYMMDD(selectedDate), onAddTask: handleAddTask }),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(TaskDetailScreen_default, { isOpen: isDetailOpen, onClose: handleCloseTaskDetail, task: selectedTask, onEdit: handleOpenEditTask }),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
        EditTaskScreen_default,
        {
          isOpen: isEditOpen,
          onClose: handleCloseEditTask,
          task: selectedTask,
          onSave: handleSaveTask
        }
      )
    ] });
  };
  var PlanScreen_default = PlanScreen;

  // screens/ListDetailScreen.tsx
  var import_react27 = __toESM(require_react());
  var import_jsx_runtime42 = __toESM(require_jsx_runtime());
  var colorVariants5 = {
    green: { bg: "bg-green-100 dark:bg-green-900/30" },
    blue: { bg: "bg-blue-100 dark:bg-blue-900/30" },
    pink: { bg: "bg-pink-100 dark:bg-pink-900/30" },
    purple: { bg: "bg-purple-100 dark:bg-purple-900/30" },
    yellow: { bg: "bg-yellow-100 dark:bg-yellow-900/30" },
    red: { bg: "bg-red-100 dark:bg-red-900/30" },
    orange: { bg: "bg-orange-100 dark:bg-orange-900/30" }
  };
  var parseDateString = (dateString) => {
    if (!dateString) return null;
    const parts = dateString.split("-").map(Number);
    if (parts.length !== 3) return null;
    const [year, month, day] = parts;
    const date = new Date(Date.UTC(year, month - 1, day));
    return date;
  };
  var CustomDateRangeSheet = ({
    isOpen,
    onClose,
    onApply,
    initialRange,
    initialType
  }) => {
    const today = (/* @__PURE__ */ new Date()).toISOString().split("T")[0];
    const [startDate, setStartDate] = (0, import_react27.useState)(initialRange.start || today);
    const [endDate, setEndDate] = (0, import_react27.useState)(initialRange.end || today);
    const [rangeType, setRangeType] = (0, import_react27.useState)(initialType);
    (0, import_react27.useEffect)(() => {
      if (isOpen) {
        setStartDate(initialRange.start || today);
        setEndDate(initialRange.end || today);
        setRangeType(initialType);
      }
    }, [isOpen, initialRange, initialType, today]);
    const handleApply = () => {
      if (startDate && endDate) {
        onApply({ start: startDate, end: endDate, type: rangeType });
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: `fixed inset-0 z-50 flex items-end transition-all duration-300 ${isOpen ? "visible" : "invisible"}`, children: [
      /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: `fixed inset-0 bg-black/40 transition-opacity duration-300 ${isOpen ? "opacity-100" : "opacity-0"}`, onClick: onClose, "aria-hidden": "true" }),
      /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: `w-full bg-white dark:bg-gray-800 rounded-t-3xl shadow-2xl transition-transform duration-300 ease-out transform ${isOpen ? "translate-y-0" : "translate-y-full"}`, role: "dialog", children: [
        /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("header", { className: "pt-3 px-4 pb-3 border-b border-gray-200 dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: "w-8 h-1 bg-gray-300 dark:bg-gray-600 rounded-full mx-auto mb-3" }),
          /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("h2", { className: "text-base font-bold text-gray-900 dark:text-gray-100 text-center", children: "Custom Date Range" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(
          "div",
          {
            className: "p-4 space-y-4 pb-8",
            style: { paddingBottom: `calc(2rem + env(safe-area-inset-bottom, 0px))` },
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [
                /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("label", { htmlFor: "start-date", className: "block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1", children: "Start Date" }),
                  /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("input", { type: "date", id: "start-date", value: startDate, onChange: (e) => setStartDate(e.target.value), className: "w-full px-4 py-2.5 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm" })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("label", { htmlFor: "end-date", className: "block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1", children: "End Date" }),
                  /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("input", { type: "date", id: "end-date", value: endDate, onChange: (e) => setEndDate(e.target.value), className: "w-full px-4 py-2.5 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm" })
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("label", { className: "block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2", children: "Apply range to" }),
                /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "flex bg-gray-200 dark:bg-gray-700 rounded-lg p-1", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("button", { type: "button", onClick: () => setRangeType("due"), className: `w-1/2 py-1.5 text-sm font-semibold rounded-md transition-all ${rangeType === "due" ? "bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-200 shadow-sm" : "text-gray-500 dark:text-gray-400"}`, children: "Due Date" }),
                  /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("button", { type: "button", onClick: () => setRangeType("start"), className: `w-1/2 py-1.5 text-sm font-semibold rounded-md transition-all ${rangeType === "start" ? "bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-200 shadow-sm" : "text-gray-500 dark:text-gray-400"}`, children: "Start Date" })
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("button", { onClick: handleApply, className: "w-full bg-blue-600 text-white font-semibold py-3 rounded-xl hover:bg-blue-700 transition-colors mt-2 !-mb-2", children: "Apply Filter" })
            ]
          }
        )
      ] })
    ] });
  };
  var FilterSheet = ({ isOpen, onClose, onSelectFilter, onCustomRangeClick, currentFilter }) => {
    const filters = [
      { label: "All Tasks", value: null },
      { label: "Overdue", value: "overdue" },
      { label: "Due in 3 days", value: "dueIn3Days" },
      { label: "Due this week", value: "dueThisWeek" },
      { label: "Starts in 3 days", value: "startIn3Days" },
      { label: "Starts this week", value: "startThisWeek" }
    ];
    const handleSelect = (filter) => {
      onSelectFilter(filter);
      onClose();
    };
    return /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: `fixed inset-0 z-50 flex items-end transition-all duration-300 ${isOpen ? "visible" : "invisible"}`, children: [
      /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: `fixed inset-0 bg-black/40 transition-opacity duration-300 ${isOpen ? "opacity-100" : "opacity-0"}`, onClick: onClose, "aria-hidden": "true" }),
      /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: `w-full bg-white dark:bg-gray-800 rounded-t-3xl shadow-2xl transition-transform duration-300 ease-out transform ${isOpen ? "translate-y-0" : "translate-y-full"}`, role: "dialog", "aria-modal": "true", "aria-labelledby": "filter-title", children: [
        /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("header", { className: "pt-3 px-4 pb-3 border-b border-gray-200 dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: "w-8 h-1 bg-gray-300 dark:bg-gray-600 rounded-full mx-auto mb-3" }),
          /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("h2", { id: "filter-title", className: "text-base font-bold text-gray-900 dark:text-gray-100 text-center", children: "Filter Tasks" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(
          "div",
          {
            className: "p-4 space-y-2 pb-8",
            style: { paddingBottom: `calc(2rem + var(--safe-area-inset-bottom, 0px))` },
            children: [
              filters.map((filter) => /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("button", { onClick: () => handleSelect(filter.value), className: `w-full text-left p-3 rounded-lg text-sm font-medium transition-colors flex justify-between items-center ${currentFilter === filter.value ? "bg-blue-100 dark:bg-blue-900/40 text-blue-700 dark:text-blue-300" : "hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-800 dark:text-gray-200"}`, children: [
                /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("span", { children: filter.label }),
                currentFilter === filter.value && /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(CheckIcon, {})
              ] }, filter.label)),
              /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: "border-t border-gray-200 dark:border-gray-700 my-2 !mt-4" }),
              /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("button", { onClick: onCustomRangeClick, className: `w-full text-left p-3 rounded-lg text-sm font-medium transition-colors flex justify-between items-center ${currentFilter === "custom" ? "bg-blue-100 dark:bg-blue-900/40 text-blue-700 dark:text-blue-300" : "hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-800 dark:text-gray-200"}`, children: [
                /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("span", { children: "Custom Range..." }),
                currentFilter === "custom" && /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(CheckIcon, {})
              ] })
            ]
          }
        )
      ] })
    ] });
  };
  var SortSheet = ({ isOpen, onClose, onSelectSort, currentSort }) => {
    const sortOptions = [
      { label: "Default", value: "default" },
      { label: "Sort by Due Date", value: "dueDate" },
      { label: "Sort by Start Date", value: "startDate" },
      { label: "Sort by Importance", value: "importance" },
      { label: "Sort by Title (A-Z)", value: "title" }
    ];
    const handleSelect = (sort) => {
      onSelectSort(sort);
      onClose();
    };
    return /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: `fixed inset-0 z-50 flex items-end transition-all duration-300 ${isOpen ? "visible" : "invisible"}`, children: [
      /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: `fixed inset-0 bg-black/40 transition-opacity duration-300 ${isOpen ? "opacity-100" : "opacity-0"}`, onClick: onClose, "aria-hidden": "true" }),
      /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: `w-full bg-white dark:bg-gray-800 rounded-t-3xl shadow-2xl transition-transform duration-300 ease-out transform ${isOpen ? "translate-y-0" : "translate-y-full"}`, role: "dialog", "aria-modal": "true", "aria-labelledby": "sort-title", children: [
        /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("header", { className: "pt-3 px-4 pb-3 border-b border-gray-200 dark:border-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: "w-8 h-1 bg-gray-300 dark:bg-gray-600 rounded-full mx-auto mb-3" }),
          /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("h2", { id: "sort-title", className: "text-base font-bold text-gray-900 dark:text-gray-100 text-center", children: "Sort Tasks" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
          "div",
          {
            className: "p-4 space-y-2 pb-8",
            style: { paddingBottom: `calc(2rem + var(--safe-area-inset-bottom, 0px))` },
            children: sortOptions.map((option) => /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("button", { onClick: () => handleSelect(option.value), className: `w-full text-left p-3 rounded-lg text-sm font-medium transition-colors flex justify-between items-center ${currentSort === option.value ? "bg-blue-100 dark:bg-blue-900/40 text-blue-700 dark:text-blue-300" : "hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-800 dark:text-gray-200"}`, children: [
              /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("span", { children: option.label }),
              currentSort === option.value && /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(CheckIcon, {})
            ] }, option.value))
          }
        )
      ] })
    ] });
  };
  var ListDetailScreen = () => {
    const { listId } = useParams();
    const navigate = useNavigate();
    const { tasks: allTasks, lists: taskLists, addTask, updateTask } = useData();
    const [completingTaskId, setCompletingTaskId] = (0, import_react27.useState)(null);
    const [uncompletingTaskId, setUncompletingTaskId] = (0, import_react27.useState)(null);
    const [justUncompletedId, setJustUncompletedId] = (0, import_react27.useState)(null);
    const [isAddTaskOpen, setIsAddTaskOpen] = (0, import_react27.useState)(false);
    const [isDetailOpen, setIsDetailOpen] = (0, import_react27.useState)(false);
    const [isEditOpen, setIsEditOpen] = (0, import_react27.useState)(false);
    const [selectedTask, setSelectedTask] = (0, import_react27.useState)(null);
    const [isFinishedTasksVisible, setIsFinishedTasksVisible] = (0, import_react27.useState)(false);
    const [isFilterOpen, setIsFilterOpen] = (0, import_react27.useState)(false);
    const [activeFilter, setActiveFilter] = (0, import_react27.useState)(null);
    const [isCustomRangeOpen, setIsCustomRangeOpen] = (0, import_react27.useState)(false);
    const [customDateRange, setCustomDateRange] = (0, import_react27.useState)({ start: null, end: null });
    const [customRangeType, setCustomRangeType] = (0, import_react27.useState)("due");
    const [isSortOpen, setIsSortOpen] = (0, import_react27.useState)(false);
    const [activeSort, setActiveSort] = (0, import_react27.useState)("default");
    const listInfoMap = (0, import_react27.useMemo)(() => {
      const map = /* @__PURE__ */ new Map();
      taskLists.forEach((list) => {
        map.set(list.name, { icon: list.icon, color: list.color });
      });
      return map;
    }, [taskLists]);
    const currentList = (0, import_react27.useMemo)(() => taskLists.find((list) => list.id.toString() === listId), [taskLists, listId]);
    const listTasks = (0, import_react27.useMemo)(() => allTasks.filter((task) => task.category === currentList?.name), [allTasks, currentList]);
    const filteredListTasks = (0, import_react27.useMemo)(() => {
      const today = /* @__PURE__ */ new Date();
      today.setUTCHours(0, 0, 0, 0);
      if (!activeFilter) return listTasks;
      if (activeFilter === "custom" && customDateRange.start && customDateRange.end) {
        const customStart = parseDateString(customDateRange.start);
        const customEnd = parseDateString(customDateRange.end);
        if (!customStart || !customEnd) return listTasks;
        return listTasks.filter((task) => {
          if (customRangeType === "due") {
            const dueDate = parseDateString(task.dueDate);
            return dueDate && dueDate >= customStart && dueDate <= customEnd;
          }
          const startDate = parseDateString(task.startDate);
          return startDate && startDate >= customStart && startDate <= customEnd;
        });
      }
      const threeDaysFromNow = new Date(today);
      threeDaysFromNow.setDate(today.getDate() + 3);
      const startOfWeek = new Date(today);
      startOfWeek.setDate(today.getDate() - today.getDay());
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6);
      return listTasks.filter((task) => {
        const dueDate = parseDateString(task.dueDate);
        const startDate = parseDateString(task.startDate);
        switch (activeFilter) {
          case "overdue":
            return dueDate && dueDate < today && !task.completed;
          case "dueIn3Days":
            return dueDate && dueDate >= today && dueDate <= threeDaysFromNow;
          case "dueThisWeek":
            return dueDate && dueDate >= startOfWeek && dueDate <= endOfWeek;
          case "startIn3Days":
            return startDate && startDate >= today && startDate <= threeDaysFromNow;
          case "startThisWeek":
            return startDate && startDate >= startOfWeek && startDate <= endOfWeek;
          default:
            return true;
        }
      });
    }, [listTasks, activeFilter, customDateRange, customRangeType]);
    const sortTasks = (tasks2) => {
      const tasksToSort = [...tasks2];
      return tasksToSort.sort((a, b) => {
        switch (activeSort) {
          case "importance":
            return (b.important ? 1 : 0) - (a.important ? 1 : 0);
          case "title":
            return a.title.localeCompare(b.title);
          case "dueDate": {
            const dateA = a.dueDate ? parseDateString(a.dueDate)?.getTime() : Infinity;
            const dateB = b.dueDate ? parseDateString(b.dueDate)?.getTime() : Infinity;
            return dateA - dateB;
          }
          case "startDate": {
            const dateA = a.startDate ? parseDateString(a.startDate)?.getTime() : Infinity;
            const dateB = b.startDate ? parseDateString(b.startDate)?.getTime() : Infinity;
            return dateA - dateB;
          }
          default:
            if (typeof a.id === "number" && typeof b.id === "number") {
              return a.id - b.id;
            }
            if (typeof a.id === "string" && typeof b.id === "string") {
              return a.id.localeCompare(b.id);
            }
            if (typeof a.id === "number") {
              return -1;
            }
            if (typeof b.id === "number") {
              return 1;
            }
            return 0;
        }
      });
    };
    const tasks = (0, import_react27.useMemo)(() => sortTasks(filteredListTasks.filter((task) => !task.completed)), [filteredListTasks, activeSort]);
    const finishedTasks = (0, import_react27.useMemo)(() => sortTasks(filteredListTasks.filter((task) => task.completed)), [filteredListTasks, activeSort]);
    const handleCompleteTask = (taskId) => {
      setCompletingTaskId(taskId);
      setTimeout(async () => {
        await updateTask(taskId, { completed: true });
        setCompletingTaskId(null);
      }, 600);
    };
    const handleUncompleteTask = (taskId) => {
      setUncompletingTaskId(taskId);
      setTimeout(async () => {
        await updateTask(taskId, { completed: false });
        setJustUncompletedId(taskId);
        setUncompletingTaskId(null);
      }, 300);
    };
    const handleToggleSubtask = (taskId, subtaskId) => {
      const task = allTasks.find((t) => t.id === taskId);
      if (task?.subtasks) {
        const newSubtasks = task.subtasks.map(
          (sub) => sub.id === subtaskId ? { ...sub, completed: !sub.completed } : sub
        );
        updateTask(taskId, { subtasks: newSubtasks });
        if (selectedTask?.id === taskId) {
          setSelectedTask((prev) => prev ? { ...prev, subtasks: newSubtasks } : null);
        }
      }
    };
    const handleToggleImportant = (taskId) => {
      const task = allTasks.find((t) => t.id === taskId);
      if (task) updateTask(taskId, { important: !task.important });
    };
    const handleToggleToday = (taskId) => {
      const task = allTasks.find((t) => t.id === taskId);
      if (task) updateTask(taskId, { today: !task.today });
    };
    const handleOpenTaskDetail = (task) => {
      setSelectedTask(task);
      setIsDetailOpen(true);
    };
    const handleCloseTaskDetail = () => {
      setIsDetailOpen(false);
      setTimeout(() => setSelectedTask(null), 300);
    };
    const handleOpenEditTask = () => {
      setIsDetailOpen(false);
      setIsEditOpen(true);
    };
    const handleCloseEditTask = () => {
      setIsEditOpen(false);
      setTimeout(() => setSelectedTask(null), 300);
    };
    const handleSaveTask = async (updatedTask) => {
      await updateTask(updatedTask.id, updatedTask);
    };
    const handleAddTask = async (newTaskData) => {
      const newTask = {
        title: newTaskData.title,
        category: currentList?.name || "Work",
        important: newTaskData.isImportant,
        today: newTaskData.isToday,
        type: newTaskData.type,
        dueDate: newTaskData.dueDate || void 0,
        startDate: newTaskData.type === "Fixed" ? newTaskData.startDate || void 0 : void 0,
        startTime: newTaskData.type === "Fixed" ? newTaskData.startTime || void 0 : void 0,
        time: newTaskData.type === "Fixed" ? newTaskData.startTime || "--:--" : "--:--",
        duration: newTaskData.duration ? parseInt(newTaskData.duration, 10) : void 0,
        notes: newTaskData.notes || void 0,
        subtasks: newTaskData.subtasks || [],
        color: currentList?.color || "gray"
      };
      await addTask(newTask);
    };
    const handleSelectFilter = (filter) => {
      setActiveFilter(filter);
      if (filter !== "custom") setCustomDateRange({ start: null, end: null });
    };
    const handleOpenCustomRange = () => {
      setIsFilterOpen(false);
      setIsCustomRangeOpen(true);
    };
    const handleApplyCustomRange = (data) => {
      setCustomDateRange({ start: data.start, end: data.end });
      setCustomRangeType(data.type);
      setActiveFilter("custom");
      setIsCustomRangeOpen(false);
    };
    const clearFilter = () => {
      setActiveFilter(null);
      setCustomDateRange({ start: null, end: null });
      setCustomRangeType("due");
    };
    if (!currentList) {
      return /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(MainLayout_default, { children: /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "flex flex-col items-center justify-center h-full", children: [
        /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("p", { className: "text-lg font-semibold", children: "List not found" }),
        /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("button", { onClick: () => navigate("/lists"), className: "mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg", children: "Go back to lists" })
      ] }) });
    }
    const listColor = colorVariants5[currentList.color] || colorVariants5.blue;
    return /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(MainLayout_default, { hideNavBar: true, children: [
      /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "absolute inset-0 flex flex-col", children: [
        /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(
          "header",
          {
            className: "px-4 pt-6 pb-4 flex items-center gap-2 flex-shrink-0 bg-[var(--color-surface-container)] border-b border-[var(--color-border)]",
            style: { paddingTop: `calc(1.5rem + env(safe-area-inset-top, 0px))` },
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("button", { onClick: () => navigate("/plan"), className: "p-2 text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400", children: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(ChevronLeftIcon, {}) }),
              /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: `p-2 rounded-lg flex items-center justify-center w-10 h-10 ${listColor.bg}`, children: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("span", { className: "text-xl", children: currentList.icon }) }),
              /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("h1", { className: "text-2xl font-bold text-gray-900 dark:text-gray-100", children: currentList.name }),
              /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: "flex-grow" }),
              /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
                "button",
                {
                  onClick: () => setIsSortOpen(true),
                  className: `p-2 rounded-full transition-colors ${activeSort !== "default" ? "text-blue-600 dark:text-blue-400 bg-blue-100 dark:bg-blue-900/30" : "text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700"}`,
                  "aria-label": "Sort tasks",
                  children: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(SortIcon, {})
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
                "button",
                {
                  onClick: () => setIsFilterOpen(true),
                  className: `p-2 rounded-full transition-colors ${activeFilter ? "text-blue-600 dark:text-blue-400 bg-blue-100 dark:bg-blue-900/30" : "text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700"}`,
                  "aria-label": "Filter tasks",
                  children: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(FilterIcon, {})
                }
              )
            ]
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("main", { className: "px-6 pb-6 overflow-y-auto flex-grow", children: tasks.length === 0 && finishedTasks.length === 0 && activeFilter ? /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "text-center py-16", children: [
          /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("p", { className: "text-lg font-semibold text-gray-700 dark:text-gray-300", children: "No tasks match your filter" }),
          /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("p", { className: "text-gray-500 dark:text-gray-400 mt-1", children: "Try adjusting or clearing the filter." }),
          /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("button", { onClick: clearFilter, className: "mt-4 px-4 py-2 text-sm font-semibold bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600", children: "Clear Filter" })
        ] }) : listTasks.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(EmptyListDetailIllustration, { onAddTask: () => setIsAddTaskOpen(true) }) : /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(import_jsx_runtime42.Fragment, { children: [
          tasks.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("section", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("h2", { className: "text-base font-bold text-gray-800 dark:text-gray-200 mb-3", children: "Tasks" }),
            /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: "space-y-3", children: tasks.map((task) => {
              const listInfo = listInfoMap.get(task.category) || { icon: "\u{1F4DD}", color: "gray" };
              return /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
                TaskCard_default,
                {
                  ...task,
                  color: listInfo.color,
                  categoryIcon: listInfo.icon,
                  onComplete: () => handleCompleteTask(task.id),
                  isCompleting: completingTaskId === task.id,
                  onToggleSubtask: handleToggleSubtask,
                  onToggleImportant: () => handleToggleImportant(task.id),
                  onClick: () => handleOpenTaskDetail(task),
                  hideSubtasks: true,
                  isJustUncompleted: justUncompletedId === task.id,
                  onUncompleteAnimationEnd: () => setJustUncompletedId(null)
                },
                task.id
              );
            }) })
          ] }),
          finishedTasks.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("section", { className: tasks.length > 0 ? "mt-6" : "", children: [
            /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(
              "button",
              {
                onClick: () => setIsFinishedTasksVisible(!isFinishedTasksVisible),
                className: "w-full flex justify-between items-center mb-3",
                "aria-expanded": isFinishedTasksVisible,
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("h2", { className: "text-base font-bold text-gray-800 dark:text-gray-200", children: "Finished Tasks" }),
                  /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(ChevronDownIcon, { className: `w-5 h-5 text-gray-500 dark:text-gray-400 transition-transform duration-300 ${isFinishedTasksVisible ? "rotate-180" : ""}` })
                ]
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: `grid transition-[grid-template-rows] duration-300 ease-in-out ${isFinishedTasksVisible ? "grid-rows-[1fr]" : "grid-rows-[0fr]"}`, children: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: "overflow-hidden", children: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: "space-y-3", children: finishedTasks.map((task) => {
              const listInfo = listInfoMap.get(task.category) || { icon: "\u{1F4DD}", color: "gray" };
              return /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
                TaskCard_default,
                {
                  ...task,
                  color: listInfo.color,
                  categoryIcon: listInfo.icon,
                  onClick: () => handleOpenTaskDetail(task),
                  onUncomplete: () => handleUncompleteTask(task.id),
                  isUncompleting: uncompletingTaskId === task.id,
                  hideSubtasks: true
                },
                task.id
              );
            }) }) }) })
          ] })
        ] }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
        "button",
        {
          onClick: () => setIsAddTaskOpen(true),
          className: "fixed bottom-6 right-6 w-16 h-16 bg-blue-600 text-white rounded-full flex items-center justify-center shadow-lg transform hover:scale-105 transition-transform duration-200 focus:outline-none focus:ring-2 focus:ring-blue-400 z-30",
          "aria-label": "Add new task",
          children: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(PlusIcon, {})
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
        AddTaskScreen_default,
        {
          isOpen: isAddTaskOpen,
          onClose: () => setIsAddTaskOpen(false),
          onAddTask: handleAddTask
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
        TaskDetailScreen_default,
        {
          isOpen: isDetailOpen,
          onClose: handleCloseTaskDetail,
          task: selectedTask,
          onEdit: handleOpenEditTask
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
        EditTaskScreen_default,
        {
          isOpen: isEditOpen,
          onClose: handleCloseEditTask,
          task: selectedTask,
          onSave: handleSaveTask
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
        FilterSheet,
        {
          isOpen: isFilterOpen,
          onClose: () => setIsFilterOpen(false),
          onSelectFilter: handleSelectFilter,
          onCustomRangeClick: handleOpenCustomRange,
          currentFilter: activeFilter
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
        SortSheet,
        {
          isOpen: isSortOpen,
          onClose: () => setIsSortOpen(false),
          onSelectSort: setActiveSort,
          currentSort: activeSort
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
        CustomDateRangeSheet,
        {
          isOpen: isCustomRangeOpen,
          onClose: () => setIsCustomRangeOpen(false),
          onApply: handleApplyCustomRange,
          initialRange: customDateRange,
          initialType: customRangeType
        }
      )
    ] });
  };
  var ListDetailScreen_default = ListDetailScreen;

  // screens/MomentsScreen.tsx
  var import_react30 = __toESM(require_react());

  // components/views/TagsView.tsx
  var import_react28 = __toESM(require_react());
  var import_jsx_runtime43 = __toESM(require_jsx_runtime());
  var TagsView = () => {
    const { moments, tags: allTags, addTag, deleteTag } = useData();
    const navigate = useNavigate();
    const [newTag, setNewTag] = (0, import_react28.useState)("");
    const [tagToDelete, setTagToDelete] = (0, import_react28.useState)(null);
    const tagData = (0, import_react28.useMemo)(() => {
      const counts = /* @__PURE__ */ new Map();
      const recentMoments = /* @__PURE__ */ new Map();
      moments.forEach((moment) => {
        moment.tags?.forEach((tag) => {
          counts.set(tag, (counts.get(tag) || 0) + 1);
          if (!recentMoments.has(tag)) {
            recentMoments.set(tag, moment.imageUrl);
          }
        });
      });
      allTags.forEach((tag) => {
        if (!counts.has(tag)) {
          counts.set(tag, 0);
        }
      });
      return Array.from(counts.entries()).map(([name, count]) => ({
        name,
        count,
        imageUrl: recentMoments.get(name)
      })).sort((a, b) => b.count - a.count);
    }, [moments, allTags]);
    const handleAddTag = () => {
      if (newTag.trim()) {
        addTag(newTag.trim());
        setNewTag("");
      }
    };
    const handleDeleteClick = (tagName) => {
      setTagToDelete(tagName);
    };
    const handleConfirmDelete = async () => {
      if (tagToDelete) {
        await deleteTag(tagToDelete);
        setTagToDelete(null);
      }
    };
    const totalCheckins = (0, import_react28.useMemo)(() => tagData.reduce((sum, tag) => sum + tag.count, 0), [tagData]);
    return /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)(import_jsx_runtime43.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "p-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "grid grid-cols-2 gap-4 mb-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "bg-white dark:bg-gray-800 p-4 rounded-xl card-shadow text-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("p", { className: "text-2xl font-bold text-purple-600 dark:text-purple-400", children: tagData.length }),
            /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400 mt-1", children: "Total Tags" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "bg-white dark:bg-gray-800 p-4 rounded-xl card-shadow text-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("p", { className: "text-2xl font-bold text-purple-600 dark:text-purple-400", children: totalCheckins }),
            /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400 mt-1", children: "Total Check-ins" })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "bg-white dark:bg-gray-800 p-4 rounded-xl card-shadow mb-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("label", { htmlFor: "new-tag-input", className: "block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1", children: "Add New Tag" }),
          /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "flex items-center gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
              "input",
              {
                id: "new-tag-input",
                type: "text",
                placeholder: "e.g. Gym, Reading...",
                value: newTag,
                onChange: (e) => setNewTag(e.target.value),
                onKeyDown: (e) => e.key === "Enter" && (e.preventDefault(), handleAddTag()),
                className: "w-full px-4 py-2.5 border border-gray-300 dark:border-gray-600 bg-gray-50 dark:bg-gray-700 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
              "button",
              {
                type: "button",
                onClick: handleAddTag,
                className: "flex-shrink-0 w-10 h-10 bg-blue-600 text-white rounded-full flex items-center justify-center hover:bg-blue-700 transition-colors",
                "aria-label": "Add new tag",
                children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(PlusIconHeader, {})
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("div", { className: "bg-white dark:bg-gray-800 rounded-xl card-shadow overflow-hidden divide-y divide-gray-100 dark:divide-gray-700", children: tagData.map((tag) => /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "flex items-center p-3 group hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors", children: [
          /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "flex items-center gap-4 flex-grow", onClick: () => navigate(`/moments/tags/${encodeURIComponent(tag.name)}`), children: [
            tag.imageUrl ? /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("img", { src: tag.imageUrl, alt: tag.name, className: "w-10 h-10 rounded-lg object-cover" }) : /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("div", { className: "w-10 h-10 flex items-center justify-center bg-gray-100 dark:bg-gray-700 rounded-lg text-gray-400 dark:text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(TagIcon, { className: "w-5 h-5" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "flex-grow", children: [
              /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("p", { className: "font-semibold text-gray-800 dark:text-gray-200", children: tag.name }),
              /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: [
                tag.count,
                " check-in",
                tag.count !== 1 ? "s" : ""
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "flex items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
              "button",
              {
                onClick: (e) => {
                  e.stopPropagation();
                  handleDeleteClick(tag.name);
                },
                className: "p-2 text-gray-400 dark:text-gray-500 hover:text-red-500 dark:hover:text-red-400 opacity-0 group-hover:opacity-100 transition-opacity",
                "aria-label": `Delete tag ${tag.name}`,
                children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(TrashIcon, {})
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("div", { onClick: () => navigate(`/moments/tags/${encodeURIComponent(tag.name)}`), children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(ChevronRightIcon, {}) })
          ] })
        ] }, tag.name)) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
        ConfirmationModal_default,
        {
          isOpen: !!tagToDelete,
          onClose: () => setTagToDelete(null),
          onConfirm: handleConfirmDelete,
          title: `Delete "${tagToDelete}"?`,
          message: "This will remove the tag from all associated moments. This action cannot be undone.",
          confirmText: "Delete Tag"
        }
      )
    ] });
  };
  var TagsView_default = TagsView;

  // components/views/CalendarView.tsx
  var import_react29 = __toESM(require_react());
  var import_jsx_runtime44 = __toESM(require_jsx_runtime());
  var formatDateToYYYYMMDD2 = (date) => {
    const year = date.getFullYear();
    const month = (date.getMonth() + 1).toString().padStart(2, "0");
    const day = date.getDate().toString().padStart(2, "0");
    return `${year}-${month}-${day}`;
  };
  var parseDateString2 = (dateString) => {
    const [monthStr, dayStr, yearStr] = dateString.split(" ");
    const month = new Date(Date.parse(monthStr + " 1, 2012")).getMonth();
    const day = parseInt(dayStr.replace(",", ""));
    const year = parseInt(yearStr);
    return new Date(year, month, day);
  };
  var CalendarView = () => {
    const { moments } = useData();
    const navigate = useNavigate();
    const [currentDate, setCurrentDate] = (0, import_react29.useState)(/* @__PURE__ */ new Date());
    const [selectedDate, setSelectedDate] = (0, import_react29.useState)(/* @__PURE__ */ new Date());
    const [isCalendarCollapsed, setIsCalendarCollapsed] = (0, import_react29.useState)(false);
    const firstDayOfMonth = (0, import_react29.useMemo)(() => new Date(currentDate.getFullYear(), currentDate.getMonth(), 1), [currentDate]);
    const lastDayOfMonth = (0, import_react29.useMemo)(() => new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0), [currentDate]);
    const momentsByDay = (0, import_react29.useMemo)(() => {
      const map = /* @__PURE__ */ new Map();
      moments.forEach((moment) => {
        if (moment.date) {
          const date = parseDateString2(moment.date);
          const dateString = formatDateToYYYYMMDD2(date);
          if (!map.has(dateString)) {
            map.set(dateString, []);
          }
          map.get(dateString).push(moment);
        }
      });
      return map;
    }, [moments]);
    const displayedDays = (0, import_react29.useMemo)(() => {
      const generateDays = (startDate, dayCount, offset = 0) => {
        const days = [];
        for (let i = 0; i < offset; i++) {
          days.push({ day: null, date: null, moments: [] });
        }
        for (let i = 0; i < dayCount; i++) {
          const date = new Date(startDate);
          date.setDate(date.getDate() + i);
          const dateString = formatDateToYYYYMMDD2(date);
          days.push({
            day: date.getDate(),
            date,
            moments: momentsByDay.get(dateString) || []
          });
        }
        return days;
      };
      if (isCalendarCollapsed) {
        const startOfWeek = new Date(selectedDate);
        startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());
        return generateDays(startOfWeek, 7);
      } else {
        return generateDays(firstDayOfMonth, lastDayOfMonth.getDate(), firstDayOfMonth.getDay());
      }
    }, [isCalendarCollapsed, selectedDate, momentsByDay, firstDayOfMonth, lastDayOfMonth]);
    const selectedDayMoments = (0, import_react29.useMemo)(() => {
      const dateString = formatDateToYYYYMMDD2(selectedDate);
      return momentsByDay.get(dateString) || [];
    }, [selectedDate, momentsByDay]);
    const handlePrevMonth = () => setCurrentDate((prev) => new Date(prev.getFullYear(), prev.getMonth() - 1, 1));
    const handleNextMonth = () => setCurrentDate((prev) => new Date(prev.getFullYear(), prev.getMonth() + 1, 1));
    const today = /* @__PURE__ */ new Date();
    const isSameDay = (d1, d2) => d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate();
    const dayHeaders = ["S", "M", "T", "W", "T", "F", "S"];
    return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: "px-6", children: /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "pt-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "mb-6 flex-shrink-0", children: [
        /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: `flex items-center mb-4 ${isCalendarCollapsed ? "justify-center" : "justify-between"}`, children: [
          !isCalendarCollapsed && /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("button", { onClick: handlePrevMonth, className: "p-1 text-gray-500 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200", "aria-label": "Previous month", children: /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(ChevronLeftIcon, {}) }),
          /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)(
            "button",
            {
              onClick: () => setIsCalendarCollapsed(!isCalendarCollapsed),
              className: "flex items-center gap-1 font-bold text-lg text-gray-800 dark:text-gray-200 focus:outline-none rounded-md px-2 py-1 hover:bg-gray-100 dark:hover:bg-gray-700",
              "aria-expanded": !isCalendarCollapsed,
              children: [
                currentDate.toLocaleString("default", { month: "long", year: "numeric" }),
                /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(ChevronDownIcon, { className: `w-5 h-5 text-gray-500 dark:text-gray-400 transition-transform duration-300 ${isCalendarCollapsed ? "rotate-180" : ""}` })
              ]
            }
          ),
          !isCalendarCollapsed && /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("button", { onClick: handleNextMonth, className: "p-1 text-gray-500 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200", "aria-label": "Next month", children: /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(ChevronRightIcon, {}) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: `transition-all duration-500 ease-in-out overflow-hidden ${isCalendarCollapsed ? "max-h-32" : "max-h-[30rem]"}`, children: /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "grid grid-cols-7 gap-1 text-center", children: [
          dayHeaders.map((day) => /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: "text-sm h-8 flex items-center justify-center font-medium text-gray-500 dark:text-gray-400", children: day }, day)),
          displayedDays.map((dayObj, index2) => {
            const isSelected = dayObj.date && isSameDay(dayObj.date, selectedDate);
            const isToday = dayObj.date && isSameDay(dayObj.date, today);
            let buttonClass = "bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700";
            if (isSelected) buttonClass = "bg-blue-600 text-white";
            else if (isToday) buttonClass = "bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200";
            const tagsForDay = Array.from(new Set(dayObj.moments.flatMap((m) => m.tags || [])));
            return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: "flex justify-center items-start", children: dayObj.day && /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)(
              "button",
              {
                onClick: () => dayObj.date && setSelectedDate(dayObj.date),
                className: `w-full h-20 rounded-lg text-sm font-medium flex flex-col items-center pt-1.5 transition-colors relative ${buttonClass}`,
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("span", { className: `w-6 h-6 flex items-center justify-center rounded-full ${isSelected ? "" : isToday ? "bg-white dark:bg-gray-800" : ""}`, children: dayObj.day }),
                  tagsForDay.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "mt-1 w-full px-1 space-y-0.5 overflow-hidden", children: [
                    tagsForDay.slice(0, 2).map((tag) => /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: `text-xs text-left truncate px-1 rounded-sm ${isSelected ? "bg-white/20 text-white" : "bg-purple-50 dark:bg-purple-900/40 text-purple-700 dark:text-purple-300"}`, children: tag }, tag)),
                    tagsForDay.length > 2 && /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: `text-xs text-center ${isSelected ? "text-purple-100" : "text-gray-400 dark:text-gray-500"}`, children: [
                      "+ ",
                      tagsForDay.length - 2,
                      " more"
                    ] })
                  ] })
                ]
              }
            ) }, index2);
          })
        ] }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "flex-grow flex flex-col", children: [
        /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("h2", { className: "text-lg font-bold text-gray-800 dark:text-gray-200 mb-4 flex-shrink-0", children: [
          "Check-ins for ",
          selectedDate.toLocaleString("default", { month: "long" }),
          " ",
          selectedDate.getDate()
        ] }),
        selectedDayMoments.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: "text-center py-8 text-gray-500 dark:text-gray-400", children: "No check-ins for this day." }) : /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: "grid grid-cols-3 gap-2", children: selectedDayMoments.map((moment) => /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("button", { onClick: () => navigate(`/moments/${moment.id}`), className: "aspect-square rounded-lg overflow-hidden card-shadow", children: /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("img", { src: moment.imageUrl, alt: moment.title, className: "w-full h-full object-cover" }) }, moment.id)) })
      ] })
    ] }) });
  };
  var CalendarView_default = CalendarView;

  // screens/MomentsScreen.tsx
  var import_jsx_runtime45 = __toESM(require_jsx_runtime());
  var MomentCard = ({ id, title, description, imageUrl, index: index2, createdAt, tags }) => {
    const formattedTime = (0, import_react30.useMemo)(() => {
      if (!createdAt) return null;
      try {
        const date = new Date(createdAt);
        if (isNaN(date.getTime())) return null;
        return date.toLocaleTimeString("en-US", { hour: "numeric", minute: "2-digit", hour12: true });
      } catch (e) {
        console.error("Error formatting date:", e);
        return null;
      }
    }, [createdAt]);
    return /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(
      Link,
      {
        to: `/moments/${id}`,
        className: "relative aspect-[4/3] rounded-2xl overflow-hidden group cursor-pointer block animate-card-fade-in card-shadow",
        style: { animationDelay: `${index2 * 50}ms`, willChange: "transform, opacity" },
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("img", { src: imageUrl, alt: title, className: "w-full h-full object-cover group-hover:scale-105 transition-transform duration-300" }),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { className: "absolute inset-0 bg-gradient-to-t from-black/60 to-transparent" }),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "absolute bottom-0 left-0 p-3 text-white w-full", children: [
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("h3", { className: "font-bold truncate", children: title }),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "text-xs text-gray-200 mt-0.5 flex items-center gap-1.5 truncate", children: [
              formattedTime && /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("span", { children: formattedTime }),
              tags && tags.length > 0 && formattedTime && /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("span", { children: "\xB7" }),
              tags && tags.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("span", { className: "truncate", children: tags.map((t) => `#${t}`).join(" ") })
            ] }),
            description && /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("p", { className: "text-xs mt-1 opacity-80 truncate", children: description })
          ] })
        ]
      }
    );
  };
  var MomentsScreen = () => {
    const { moments: momentsData, addMoment, syncData } = useData();
    const [isAddMomentOpen, setIsAddMomentOpen] = (0, import_react30.useState)(false);
    const [viewMode, setViewMode] = (0, import_react30.useState)("moments");
    const [isSearchVisible, setIsSearchVisible] = (0, import_react30.useState)(false);
    const [searchQuery, setSearchQuery] = (0, import_react30.useState)("");
    const searchInputRef = (0, import_react30.useRef)(null);
    const [isRefreshing, setIsRefreshing] = (0, import_react30.useState)(false);
    const [pullDelta, setPullDelta] = (0, import_react30.useState)(0);
    const gestureStart = (0, import_react30.useRef)(null);
    const gestureType = (0, import_react30.useRef)("none");
    const momentsViewRef = (0, import_react30.useRef)(null);
    const calendarViewRef = (0, import_react30.useRef)(null);
    const tagsViewRef = (0, import_react30.useRef)(null);
    const REFRESH_THRESHOLD = 80;
    const MIN_SWIPE_DISTANCE = 50;
    (0, import_react30.useEffect)(() => {
      if (isSearchVisible) {
        setTimeout(() => searchInputRef.current?.focus(), 300);
      }
    }, [isSearchVisible]);
    const filteredMoments = (0, import_react30.useMemo)(() => {
      if (!searchQuery) {
        return momentsData;
      }
      const lowerCaseQuery = searchQuery.toLowerCase();
      return momentsData.filter(
        (moment) => moment.title.toLowerCase().includes(lowerCaseQuery) || moment.notes && moment.notes.toLowerCase().includes(lowerCaseQuery) || moment.tags && moment.tags.some((tag) => tag.toLowerCase().includes(lowerCaseQuery))
      );
    }, [momentsData, searchQuery]);
    const handleAddMoment = async (newMomentData) => {
      const newMoment = {
        title: newMomentData.title,
        description: newMomentData.notes.substring(0, 50) + (newMomentData.notes.length > 50 ? "..." : ""),
        imageUrl: newMomentData.imageUrl,
        date: (/* @__PURE__ */ new Date()).toLocaleDateString("en-US", { month: "long", day: "numeric", year: "numeric" }),
        notes: newMomentData.notes,
        tags: newMomentData.tags
      };
      await addMoment(newMoment);
    };
    const handleTouchStart = (e) => {
      gestureStart.current = { x: e.touches[0].clientX, y: e.touches[0].clientY };
      gestureType.current = "none";
      const viewRefMap = {
        moments: momentsViewRef,
        calendar: calendarViewRef,
        tags: tagsViewRef
      };
      const activeScrollView = viewRefMap[viewMode].current;
      if (activeScrollView?.scrollTop !== 0) {
        gestureStart.current.y = -1;
      }
    };
    const handleTouchMove = (e) => {
      if (!gestureStart.current) return;
      const deltaX = e.touches[0].clientX - gestureStart.current.x;
      const deltaY = e.touches[0].clientY - gestureStart.current.y;
      if (gestureType.current === "none") {
        if (Math.abs(deltaX) > 10 && Math.abs(deltaX) > Math.abs(deltaY)) {
          gestureType.current = "horizontal";
        } else if (Math.abs(deltaY) > 10 && Math.abs(deltaY) > Math.abs(deltaX)) {
          gestureType.current = "vertical";
        }
      }
      if (gestureType.current === "vertical" && gestureStart.current.y !== -1 && deltaY > 0) {
        setPullDelta(Math.pow(deltaY, 0.85));
      }
    };
    const handleTouchEnd = (e) => {
      if (!gestureStart.current) return;
      if (gestureType.current === "horizontal") {
        const endX = e.changedTouches[0].clientX;
        const distance = gestureStart.current.x - endX;
        if (distance > MIN_SWIPE_DISTANCE) {
          if (viewMode === "moments") setViewMode("calendar");
          else if (viewMode === "calendar") setViewMode("tags");
        } else if (distance < -MIN_SWIPE_DISTANCE) {
          if (viewMode === "tags") setViewMode("calendar");
          else if (viewMode === "calendar") setViewMode("moments");
        }
      } else if (gestureType.current === "vertical" && gestureStart.current.y !== -1) {
        if (pullDelta > REFRESH_THRESHOLD) {
          setIsRefreshing(true);
          syncData().finally(() => {
            setIsRefreshing(false);
            setPullDelta(0);
          });
        } else {
          setPullDelta(0);
        }
      }
      gestureStart.current = null;
      gestureType.current = "none";
    };
    const viewIndex = (0, import_react30.useMemo)(() => {
      if (viewMode === "moments") return 0;
      if (viewMode === "calendar") return 1;
      return 2;
    }, [viewMode]);
    return /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(MainLayout_default, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "absolute inset-0 flex flex-col bg-[var(--color-background-primary)] overflow-hidden", children: [
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { className: `absolute top-0 left-0 right-0 h-14 flex justify-center items-center transition-opacity duration-300 pointer-events-none z-10 ${pullDelta > 0 || isRefreshing ? "opacity-100" : "opacity-0"}`, children: isRefreshing ? /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(RefreshSpinnerIcon, {}) : /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(ChevronDownIcon, { className: `w-6 h-6 text-gray-500 transition-transform duration-300 ${pullDelta > REFRESH_THRESHOLD ? "rotate-180" : ""}` }) }),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(
          "div",
          {
            className: "h-full flex flex-col",
            style: { transform: `translateY(${isRefreshing ? 56 : pullDelta}px)`, transition: pullDelta === 0 || isRefreshing ? "transform 0.3s" : "none" },
            onTouchStart: handleTouchStart,
            onTouchMove: handleTouchMove,
            onTouchEnd: handleTouchEnd,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(
                "header",
                {
                  className: "px-6 pt-6 pb-4 flex-shrink-0 grid grid-cols-[auto_1fr_auto] items-center gap-4 bg-[var(--color-surface-container)] border-b border-[var(--color-border)]",
                  style: { paddingTop: `calc(1.5rem + env(safe-area-inset-top, 0px))` },
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { className: "flex justify-start", children: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("button", { className: "text-gray-600 dark:text-gray-400 p-1", onClick: () => setIsSearchVisible(true), children: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(SearchIcon, {}) }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { className: "flex justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "grid grid-cols-3 bg-gray-200 dark:bg-gray-700 rounded-lg p-1 w-full max-w-xs", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("button", { onClick: () => setViewMode("moments"), className: `flex justify-center items-center py-1.5 text-sm font-semibold rounded-md transition-all ${viewMode === "moments" ? "bg-white dark:bg-gray-900 text-gray-800 dark:text-gray-200 shadow-sm" : "text-gray-500 dark:text-gray-400"}`, children: "Grid" }),
                      /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("button", { onClick: () => setViewMode("calendar"), className: `flex justify-center items-center py-1.5 text-sm font-semibold rounded-md transition-all ${viewMode === "calendar" ? "bg-white dark:bg-gray-900 text-gray-800 dark:text-gray-200 shadow-sm" : "text-gray-500 dark:text-gray-400"}`, children: "Calendar" }),
                      /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("button", { onClick: () => setViewMode("tags"), className: `flex justify-center items-center py-1.5 text-sm font-semibold rounded-md transition-all ${viewMode === "tags" ? "bg-white dark:bg-gray-900 text-gray-800 dark:text-gray-200 shadow-sm" : "text-gray-500 dark:text-gray-400"}`, children: "Tags" })
                    ] }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { className: "flex justify-end", children: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("button", { className: "text-gray-800 dark:text-gray-200", onClick: () => setIsAddMomentOpen(true), children: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(PlusIconHeader, {}) }) })
                  ]
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("main", { className: "overflow-hidden flex-grow flex flex-col", children: /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(
                "div",
                {
                  className: "flex h-full transition-transform duration-300 ease-out",
                  style: { transform: `translateX(-${viewIndex * 100}%)` },
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { ref: momentsViewRef, className: "w-full flex-shrink-0 h-full overflow-y-auto px-6 pb-24", children: momentsData.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(EmptyMomentsIllustration, { onAddMoment: () => setIsAddMomentOpen(true) }) : /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { className: "grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-4 pt-4", children: momentsData.map((moment, index2) => /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(MomentCard, { ...moment, index: index2, createdAt: moment.created_at }, moment.id)) }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { ref: calendarViewRef, className: "w-full flex-shrink-0 h-full overflow-y-auto pb-24", children: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(CalendarView_default, {}) }),
                    /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { ref: tagsViewRef, className: "w-full flex-shrink-0 h-full overflow-y-auto pb-24", children: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(TagsView_default, {}) })
                  ]
                }
              ) })
            ]
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(
        "div",
        {
          className: `fixed inset-0 z-40 bg-[var(--color-background-primary)] flex flex-col transition-transform duration-300 ease-in-out ${isSearchVisible ? "translate-y-0" : "translate-y-full"}`,
          style: { paddingTop: `var(--safe-area-inset-top, 0px)` },
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "flex-shrink-0 px-4 pt-4 pb-3 flex items-center gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "relative flex-grow", children: [
                /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { className: "absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none", children: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(SearchIcon, {}) }),
                /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
                  "input",
                  {
                    ref: searchInputRef,
                    type: "text",
                    value: searchQuery,
                    onChange: (e) => setSearchQuery(e.target.value),
                    placeholder: "Search moments...",
                    className: "w-full pl-10 pr-4 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  }
                )
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
                "button",
                {
                  onClick: () => {
                    setIsSearchVisible(false);
                    setSearchQuery("");
                  },
                  className: "font-semibold text-blue-600 dark:text-blue-400 px-2",
                  children: "Cancel"
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { className: "flex-grow overflow-y-auto px-6 pb-24", children: filteredMoments.length === 0 && searchQuery ? /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "text-center py-16", children: [
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("p", { className: "text-lg font-semibold text-gray-700 dark:text-gray-300", children: "No moments found" }),
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("p", { className: "text-gray-500 dark:text-gray-400 mt-1", children: "Try a different search term." })
            ] }) : /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { className: "grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4 pt-4", children: filteredMoments.map((moment, index2) => /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(MomentCard, { ...moment, index: index2, createdAt: moment.created_at }, moment.id)) }) })
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
        AddMomentScreen,
        {
          isOpen: isAddMomentOpen,
          onClose: () => setIsAddMomentOpen(false),
          onAddMoment: handleAddMoment
        }
      )
    ] });
  };
  var MomentsScreen_default = MomentsScreen;

  // screens/MomentDetailScreen.tsx
  var import_react32 = __toESM(require_react());

  // screens/EditMomentScreen.tsx
  var import_react31 = __toESM(require_react());
  var import_jsx_runtime46 = __toESM(require_jsx_runtime());
  var CloseIcon4 = ({ className }) => /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("svg", { className: `w-6 h-6 ${className}`, fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2.5, children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M6 18L18 6M6 6l12 12" }) });
  var ImageCropperModal2 = ({ imageSrc, onCrop, onCancel }) => {
    const [image, setImage] = (0, import_react31.useState)(null);
    const [position, setPosition] = (0, import_react31.useState)({ x: 0, y: 0 });
    const [zoom, setZoom] = (0, import_react31.useState)(1);
    const [minZoom, setMinZoom] = (0, import_react31.useState)(1);
    const viewportRef = (0, import_react31.useRef)(null);
    const panStartRef = (0, import_react31.useRef)({ x: 0, y: 0, imageX: 0, imageY: 0 });
    const activePointersRef = (0, import_react31.useRef)([]);
    const pinchStartDistanceRef = (0, import_react31.useRef)(0);
    const pinchStartZoomRef = (0, import_react31.useRef)(1);
    (0, import_react31.useEffect)(() => {
      const img = new Image();
      img.src = imageSrc;
      img.crossOrigin = "anonymous";
      const viewportEl = viewportRef.current;
      if (!viewportEl) return;
      let isImageLoaded = false;
      const calculateAndSetInitialState = () => {
        if (!isImageLoaded || !viewportRef.current) return;
        const { clientWidth: viewportWidth, clientHeight: viewportHeight } = viewportRef.current;
        if (viewportWidth > 0 && viewportHeight > 0 && img.naturalWidth > 0) {
          const scaleX = viewportWidth / img.naturalWidth;
          const scaleY = viewportHeight / img.naturalHeight;
          const initialZoom = Math.max(scaleX, scaleY);
          setZoom(initialZoom);
          setMinZoom(initialZoom);
          setPosition({ x: 0, y: 0 });
        }
      };
      img.onload = () => {
        setImage(img);
        isImageLoaded = true;
        calculateAndSetInitialState();
      };
      const observer = new ResizeObserver(calculateAndSetInitialState);
      observer.observe(viewportEl);
      return () => {
        img.onload = null;
        observer.disconnect();
      };
    }, [imageSrc]);
    const getConstrainedPosition = (0, import_react31.useCallback)((x, y, currentZoom) => {
      if (!image || !viewportRef.current) return { x: 0, y: 0 };
      const { clientWidth: viewportWidth, clientHeight: viewportHeight } = viewportRef.current;
      const imageWidth = image.naturalWidth * currentZoom;
      const imageHeight = image.naturalHeight * currentZoom;
      const maxX = Math.max(0, (imageWidth - viewportWidth) / 2);
      const maxY = Math.max(0, (imageHeight - viewportHeight) / 2);
      return { x: Math.max(-maxX, Math.min(maxX, x)), y: Math.max(-maxY, Math.min(maxY, y)) };
    }, [image]);
    (0, import_react31.useEffect)(() => {
      const { x, y } = getConstrainedPosition(position.x, position.y, zoom);
      if (x !== position.x || y !== position.y) setPosition({ x, y });
    }, [zoom, position.x, position.y, getConstrainedPosition]);
    const getDistance = (p1, p2) => Math.sqrt(Math.pow(p2.clientX - p1.clientX, 2) + Math.pow(p2.clientY - p1.clientY, 2));
    const onPointerDown = (e) => {
      e.preventDefault();
      e.target.setPointerCapture(e.pointerId);
      activePointersRef.current.push(e.nativeEvent);
      if (activePointersRef.current.length === 1) {
        panStartRef.current = { x: e.clientX, y: e.clientY, imageX: position.x, imageY: position.y };
      } else if (activePointersRef.current.length === 2) {
        pinchStartDistanceRef.current = getDistance(activePointersRef.current[0], activePointersRef.current[1]);
        pinchStartZoomRef.current = zoom;
      }
    };
    const onPointerMove = (e) => {
      e.preventDefault();
      const index2 = activePointersRef.current.findIndex((p) => p.pointerId === e.pointerId);
      if (index2 === -1) return;
      activePointersRef.current[index2] = e.nativeEvent;
      if (activePointersRef.current.length === 1) {
        const dx = e.clientX - panStartRef.current.x;
        const dy = e.clientY - panStartRef.current.y;
        setPosition(getConstrainedPosition(panStartRef.current.imageX + dx, panStartRef.current.imageY + dy, zoom));
      } else if (activePointersRef.current.length === 2) {
        const newDistance = getDistance(activePointersRef.current[0], activePointersRef.current[1]);
        const scale = newDistance / pinchStartDistanceRef.current;
        setZoom(Math.max(minZoom, Math.min(minZoom * 4, pinchStartZoomRef.current * scale)));
      }
    };
    const onPointerUp = (e) => {
      e.preventDefault();
      e.target.releasePointerCapture(e.pointerId);
      activePointersRef.current = activePointersRef.current.filter((p) => p.pointerId !== e.pointerId);
      if (activePointersRef.current.length === 1) {
        const p = activePointersRef.current[0];
        panStartRef.current = { x: p.clientX, y: p.clientY, imageX: position.x, imageY: position.y };
      }
    };
    const handleCrop = () => {
      if (!image || !viewportRef.current) return;
      const canvas = document.createElement("canvas");
      const ctx = canvas.getContext("2d");
      if (!ctx) return;
      const { clientWidth: vw, clientHeight: vh } = viewportRef.current;
      canvas.width = 600;
      canvas.height = 450;
      const sWidth = vw / zoom, sHeight = vh / zoom;
      const sx = (image.naturalWidth - sWidth) / 2 - position.x / zoom;
      const sy = (image.naturalHeight - sHeight) / 2 - position.y / zoom;
      ctx.drawImage(image, sx, sy, sWidth, sHeight, 0, 0, 600, 450);
      onCrop(canvas.toDataURL("image/jpeg", 0.8));
    };
    return /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "fixed inset-0 z-[60] bg-black flex flex-col animate-page-fade-in", children: [
      /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("header", { className: "flex-shrink-0 flex justify-between items-center p-4 text-white", style: { paddingTop: `calc(1rem + env(safe-area-inset-top))` }, children: [
        /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("button", { onClick: onCancel, className: "text-lg font-medium", children: "Cancel" }),
        /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("h2", { className: "font-bold", children: "Crop Image" }),
        /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("button", { onClick: handleCrop, className: "text-lg font-bold text-blue-400", children: "Done" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("main", { className: "flex-grow flex items-center justify-center p-4", children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { ref: viewportRef, className: "relative w-full aspect-[4/3] overflow-hidden bg-gray-900 rounded-lg touch-none", onPointerDown, onPointerMove, onPointerUp, onPointerCancel: onPointerUp, children: image && /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("img", { src: image.src, alt: "Crop preview", className: "absolute top-1/2 left-1/2", style: { transformOrigin: "center center", transform: `translate(-50%, -50%) translate(${position.x}px, ${position.y}px) scale(${zoom})`, willChange: "transform" } }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("footer", { className: "flex-shrink-0 p-4", style: { paddingBottom: `calc(1rem + env(safe-area-inset-bottom))` }, children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("input", { type: "range", min: minZoom, max: minZoom * 4, step: "0.01", value: zoom, onChange: (e) => setZoom(parseFloat(e.target.value)), className: "w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer" }) })
    ] });
  };
  var EditMomentScreen = ({ isOpen, onClose, moment, onSaveMoment }) => {
    const { tags: allAvailableTags, addTag } = useData();
    const [title, setTitle] = (0, import_react31.useState)("");
    const [notes, setNotes] = (0, import_react31.useState)("");
    const [selectedTags, setSelectedTags] = (0, import_react31.useState)([]);
    const [newTag, setNewTag] = (0, import_react31.useState)("");
    const [imagePreview, setImagePreview] = (0, import_react31.useState)(null);
    const [imageToCrop, setImageToCrop] = (0, import_react31.useState)(null);
    const [isImageSourceSelectorOpen, setIsImageSourceSelectorOpen] = (0, import_react31.useState)(false);
    const fileInputRef = (0, import_react31.useRef)(null);
    const [loading, setLoading] = (0, import_react31.useState)(false);
    const [error, setError] = (0, import_react31.useState)(null);
    const keyboardHeight = useKeyboardHeight();
    (0, import_react31.useEffect)(() => {
      if (isOpen && moment) {
        setTitle(moment.title || "");
        setNotes(moment.notes || "");
        setSelectedTags(moment.tags || []);
        setImagePreview(moment.imageUrl);
        setNewTag("");
        setImageToCrop(null);
        setIsImageSourceSelectorOpen(false);
        setLoading(false);
        setError(null);
      }
    }, [isOpen, moment]);
    const handleSave = async () => {
      if (!moment) return;
      if (!title.trim()) {
        setError("Title is required.");
        return;
      }
      if (!imagePreview) {
        setError("An image is required.");
        return;
      }
      setLoading(true);
      setError(null);
      try {
        await onSaveMoment(moment.id, {
          title,
          notes,
          tags: selectedTags,
          imageUrl: imagePreview,
          description: notes.substring(0, 50) + (notes.length > 50 ? "..." : "")
        });
        onClose();
      } catch (err) {
        setError(err.message || "Failed to save moment.");
      } finally {
        setLoading(false);
      }
    };
    const handleAddTag = () => {
      const trimmedTag = newTag.trim();
      if (trimmedTag && !selectedTags.find((t) => t.toLowerCase() === trimmedTag.toLowerCase())) {
        setSelectedTags([...selectedTags, trimmedTag]);
        addTag(trimmedTag);
        setNewTag("");
      }
    };
    const handleToggleTag = (tagToToggle) => {
      setSelectedTags(
        (current) => current.includes(tagToToggle) ? current.filter((t) => t !== tagToToggle) : [...current, tagToToggle]
      );
    };
    const handleTakePhoto = async () => {
      const photoDataUrl = await takePhotoWithCapacitor();
      if (photoDataUrl) setImageToCrop(photoDataUrl);
      setIsImageSourceSelectorOpen(false);
    };
    const handleChooseFromLibrary = () => {
      if (fileInputRef.current) {
        fileInputRef.current.removeAttribute("capture");
        fileInputRef.current.click();
      }
      setIsImageSourceSelectorOpen(false);
    };
    const handleFileChange = (event) => {
      const file = event.target.files?.[0];
      if (file) {
        const reader = new FileReader();
        reader.onloadend = () => setImageToCrop(reader.result);
        reader.readAsDataURL(file);
      }
      if (event.target) event.target.value = "";
    };
    const handleCropComplete = (croppedImageUrl) => {
      setImagePreview(croppedImageUrl);
      setImageToCrop(null);
    };
    const handleCropCancel = () => setImageToCrop(null);
    const handleRemoveImage = () => {
      setImagePreview(null);
      if (fileInputRef.current) fileInputRef.current.value = "";
    };
    const unselectedTags = allAvailableTags.filter((t) => !selectedTags.includes(t));
    return /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(import_jsx_runtime46.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: `fixed inset-0 z-50 flex items-end transition-all duration-300 ${isOpen ? "visible" : "invisible"}`, children: [
        /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { className: `fixed inset-0 bg-black/40 transition-opacity duration-300 ${isOpen ? "opacity-100" : "opacity-0"}`, onClick: onClose, "aria-hidden": "true" }),
        /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: `w-full bg-white rounded-t-3xl shadow-2xl transition-transform duration-300 ease-out transform ${isOpen ? "translate-y-0" : "translate-y-full"}`, role: "dialog", "aria-modal": "true", "aria-labelledby": "edit-moment-title", children: [
          /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("header", { className: "pt-3 px-4 pb-3 border-b border-gray-200", style: { paddingTop: `calc(0.75rem + env(safe-area-inset-top))` }, children: [
            /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { className: "w-8 h-1 bg-gray-200 rounded-full mx-auto mb-3" }),
            /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "flex justify-between items-center h-8", children: [
              /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("button", { onClick: onClose, className: "p-1 text-gray-600 hover:text-gray-900", children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(CloseIcon4, {}) }),
              /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("h2", { id: "edit-moment-title", className: "text-lg font-bold text-gray-900", children: "Edit Moment" }),
              /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("button", { onClick: handleSave, disabled: loading, className: "p-1 text-blue-600 hover:text-blue-800 disabled:opacity-50", children: loading ? /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(RefreshSpinnerIcon, {}) : /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(CheckIcon, {}) })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(
            "div",
            {
              className: "p-4 space-y-4 overflow-y-auto max-h-[75vh] pb-8 bg-gray-50",
              style: { paddingBottom: `calc(2rem + env(safe-area-inset-bottom) + ${keyboardHeight}px)` },
              children: [
                error && /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("p", { className: "text-red-500 text-sm text-center -mt-2 mb-2 px-4 bg-red-50 py-2 rounded-lg", children: error }),
                /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "rounded-xl px-4 py-1 bg-white", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("input", { type: "text", placeholder: "Title", value: title, onChange: (e) => setTitle(e.target.value), className: "w-full bg-transparent py-3 border-b border-gray-200 focus:outline-none text-base text-gray-900 placeholder-gray-400" }),
                  /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("textarea", { rows: 5, placeholder: "Notes", value: notes, onChange: (e) => setNotes(e.target.value), className: "w-full bg-transparent py-3 focus:outline-none resize-none text-base text-gray-900 placeholder-gray-400" })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "rounded-xl p-4 bg-white", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("label", { className: "block text-sm font-medium text-gray-700 mb-3", children: "Tags" }),
                  /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { className: "flex flex-wrap gap-2", children: selectedTags.map((tag) => /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("button", { onClick: () => handleToggleTag(tag), className: "flex items-center gap-1.5 px-3 py-1.5 rounded-full text-sm font-medium bg-purple-100 text-purple-700", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("span", { children: tag }),
                    /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("svg", { className: "w-3.5 h-3.5", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2.5, d: "M6 18L18 6M6 6l12 12" }) })
                  ] }, tag)) }),
                  unselectedTags.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "mt-3 pt-3 border-t border-gray-100", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("p", { className: "text-xs font-medium text-gray-500 mb-2", children: "Suggestions" }),
                    /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { className: "flex flex-wrap gap-2", children: unselectedTags.map((tag) => /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("button", { onClick: () => handleToggleTag(tag), className: "px-3 py-1.5 rounded-full text-sm font-medium bg-gray-100 text-gray-600 hover:bg-gray-200", children: [
                      "+ ",
                      tag
                    ] }, tag)) })
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "flex items-center justify-between mt-3 pt-3 border-t border-gray-100", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
                      "input",
                      {
                        type: "text",
                        placeholder: "Add new tag...",
                        value: newTag,
                        onChange: (e) => setNewTag(e.target.value),
                        onKeyDown: (e) => e.key === "Enter" && (e.preventDefault(), handleAddTag()),
                        className: "w-full bg-transparent focus:outline-none text-gray-600 placeholder-gray-500 text-base"
                      }
                    ),
                    /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("button", { onClick: handleAddTag, className: "text-blue-500 p-1", children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(PlusIconHeader, {}) })
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "rounded-xl bg-white p-4", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Image" }),
                  /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("input", { type: "file", ref: fileInputRef, onChange: handleFileChange, accept: "image/*", className: "hidden" }),
                  imagePreview ? /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "relative group", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("img", { src: imagePreview, alt: "Preview", className: "w-full aspect-[4/3] object-cover rounded-xl shadow-sm" }),
                    /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { className: "absolute inset-0 bg-black/20 rounded-xl flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity", children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("button", { type: "button", onClick: () => setIsImageSourceSelectorOpen(true), className: "bg-white/90 text-gray-800 font-semibold py-2 px-4 rounded-lg shadow-md hover:bg-white transition-all text-sm", children: "Change Image" }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("button", { type: "button", onClick: handleRemoveImage, className: "absolute top-2 right-2 w-7 h-7 bg-black/40 text-white rounded-full flex items-center justify-center hover:bg-black/60 transition-colors backdrop-blur-sm", "aria-label": "Remove image", children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(CloseIcon4, { className: "w-4 h-4" }) })
                  ] }) : /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("button", { type: "button", onClick: () => setIsImageSourceSelectorOpen(true), className: "w-full flex flex-col items-center justify-center gap-2 bg-gray-100 text-gray-500 font-medium py-10 rounded-xl hover:bg-gray-200 border-2 border-dashed border-gray-300 hover:border-gray-400 transition-colors", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(UploadImageIcon, { className: "w-8 h-8 text-gray-400" }),
                    /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("span", { children: "Add Image" })
                  ] })
                ] })
              ]
            }
          )
        ] })
      ] }),
      imageToCrop && /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(ImageCropperModal2, { imageSrc: imageToCrop, onCrop: handleCropComplete, onCancel: handleCropCancel }),
      /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: `fixed inset-0 z-[60] flex items-end transition-all duration-300 ${isImageSourceSelectorOpen ? "visible" : "invisible"}`, children: [
        /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { className: `absolute inset-0 bg-black/40 transition-opacity duration-300 ${isImageSourceSelectorOpen ? "opacity-100" : "opacity-0"}`, onClick: () => setIsImageSourceSelectorOpen(false), "aria-hidden": "true" }),
        /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: `w-full bg-gray-100 rounded-t-2xl shadow-2xl transition-transform duration-300 ease-out transform ${isImageSourceSelectorOpen ? "translate-y-0" : "translate-y-full"} p-4 pb-5 space-y-2`, style: { paddingBottom: `calc(1.25rem + env(safe-area-inset-bottom))` }, children: [
          /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "space-y-2 bg-white/80 backdrop-blur-sm rounded-xl", children: [
            /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("button", { onClick: handleTakePhoto, className: "w-full text-center p-3 text-lg text-blue-500 border-b border-gray-200", children: "Take Photo" }),
            /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("button", { onClick: handleChooseFromLibrary, className: "w-full text-center p-3 text-lg text-blue-500", children: "Choose from Library" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("button", { onClick: () => setIsImageSourceSelectorOpen(false), className: "w-full text-center p-3 text-lg text-blue-500 font-bold bg-white/80 backdrop-blur-sm rounded-xl", children: "Cancel" })
        ] })
      ] })
    ] });
  };
  var EditMomentScreen_default = EditMomentScreen;

  // screens/MomentDetailScreen.tsx
  init_dist();

  // node_modules/@capacitor/share/dist/esm/index.js
  init_dist();
  var Share = registerPlugin("Share", {
    web: () => Promise.resolve().then(() => (init_web6(), web_exports6)).then((m) => new m.ShareWeb())
  });

  // screens/MomentDetailScreen.tsx
  var import_jsx_runtime47 = __toESM(require_jsx_runtime());
  var MomentDetailScreen = () => {
    const { id } = useParams();
    const navigate = useNavigate();
    const { moments, deleteMoment, updateMoment } = useData();
    const [isEditOpen, setIsEditOpen] = (0, import_react32.useState)(false);
    const [isDeleteConfirmOpen, setIsDeleteConfirmOpen] = (0, import_react32.useState)(false);
    const INITIAL_IMAGE_HEIGHT = 320;
    const [imageHeight, setImageHeight] = (0, import_react32.useState)(INITIAL_IMAGE_HEIGHT);
    const moment = moments.find((m) => m.id.toString() === id);
    const handleBack = () => {
      navigate("/moments");
    };
    const handleOpenEdit = () => {
      setIsEditOpen(true);
    };
    const handleSaveEdit = async (momentId, updates) => {
      try {
        await updateMoment(momentId, updates);
        setIsEditOpen(false);
      } catch (error) {
        console.error("Failed to save moment:", error);
        alert("Could not save changes. Please try again.");
      }
    };
    const handleDeleteClick = () => {
      setIsDeleteConfirmOpen(true);
    };
    const handleConfirmDelete = async () => {
      if (!moment) return;
      try {
        await deleteMoment(moment.id);
        setIsDeleteConfirmOpen(false);
        navigate("/moments");
      } catch (error) {
        console.error("Failed to delete moment:", error);
        alert("Could not delete the moment. Please try again.");
        setIsDeleteConfirmOpen(false);
      }
    };
    const handleShare = async () => {
      if (!moment) return;
      try {
        if (Capacitor2.isNativePlatform()) {
          await Share.share({
            title: moment.title,
            text: moment.notes || "Check out this moment!",
            url: moment.imageUrl,
            dialogTitle: "Share Moment"
          });
        } else {
          if (!navigator.share) {
            alert("Sharing is not supported on your browser.");
            return;
          }
          const response = await fetch(moment.imageUrl);
          const blob = await response.blob();
          const file = new File([blob], `${moment.title.replace(/\s/g, "_")}.jpg`, { type: blob.type });
          if (navigator.canShare && navigator.canShare({ files: [file] })) {
            await navigator.share({
              title: moment.title,
              text: moment.notes || "Check out this moment!",
              files: [file]
            });
          } else {
            await navigator.share({
              title: moment.title,
              text: `${moment.notes || "Check out this moment!"} See it here: ${moment.imageUrl}`
            });
          }
        }
      } catch (error) {
        console.error("Error sharing moment:", error);
        const errorMessage = error?.message || "";
        if (errorMessage !== "Share canceled" && error.name !== "AbortError") {
          alert("Could not share the moment.");
        }
      }
    };
    const handleScroll = (event) => {
      const scrollTop = event.currentTarget.scrollTop;
      if (scrollTop < 0) {
        setImageHeight(INITIAL_IMAGE_HEIGHT - scrollTop);
      } else if (imageHeight !== INITIAL_IMAGE_HEIGHT) {
        setImageHeight(INITIAL_IMAGE_HEIGHT);
      }
    };
    const handleScrollEnd = () => {
      if (imageHeight !== INITIAL_IMAGE_HEIGHT) {
        setImageHeight(INITIAL_IMAGE_HEIGHT);
      }
    };
    if (!moment) {
      return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(MainLayout_default, { children: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "flex items-center justify-center h-full", children: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("p", { children: "Moment not found." }) }) });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(MainLayout_default, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(
        "div",
        {
          className: "absolute inset-0 bg-gray-50 dark:bg-gray-900 flex flex-col z-10 animate-page-fade-in",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(
              "header",
              {
                className: "absolute top-0 left-0 right-0 z-20 flex justify-between items-center p-4 pt-5 bg-gradient-to-b from-black/30 to-transparent",
                style: { paddingTop: `calc(1.25rem + env(safe-area-inset-top, 0px))` },
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("button", { onClick: handleBack, className: "p-2 text-white bg-black/20 rounded-full hover:bg-black/40 transition-colors", children: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(ChevronLeftIcon, {}) }),
                  /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "flex items-center space-x-2", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("button", { onClick: handleOpenEdit, className: "p-2 text-white bg-black/20 rounded-full hover:bg-black/40 transition-colors", children: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(EditIcon, {}) }),
                    /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("button", { onClick: handleShare, className: "p-2 text-white bg-black/20 rounded-full hover:bg-black/40 transition-colors", children: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(ShareIcon, {}) }),
                    /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("button", { onClick: handleDeleteClick, className: "p-2 text-white bg-black/20 rounded-full hover:bg-black/40 transition-colors", children: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(TrashIcon, {}) })
                  ] })
                ]
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(
              "main",
              {
                onScroll: handleScroll,
                onMouseUp: handleScrollEnd,
                onTouchEnd: handleScrollEnd,
                className: "flex-grow overflow-y-auto pb-24",
                style: { paddingBottom: "env(safe-area-inset-bottom, 0px)" },
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
                    "div",
                    {
                      className: "relative overflow-hidden transition-all duration-300 ease-out",
                      style: { height: `${imageHeight}px` },
                      children: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
                        "img",
                        {
                          src: moment.imageUrl,
                          alt: moment.title,
                          className: "w-full h-full object-cover"
                        }
                      )
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "p-6", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("h1", { className: "text-3xl font-bold text-gray-900 dark:text-gray-100", children: moment.title }),
                    /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("p", { className: "text-sm text-gray-500 dark:text-gray-400 mt-1", children: [
                      "Created on ",
                      moment.date
                    ] }),
                    /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "mt-6", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("h2", { className: "text-lg font-semibold text-gray-800 dark:text-gray-200", children: "Notes" }),
                      /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("p", { className: "text-base text-gray-700 dark:text-gray-300 mt-2 leading-relaxed whitespace-pre-wrap", children: moment.notes })
                    ] }),
                    /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "mt-6", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("h2", { className: "text-lg font-semibold text-gray-800 dark:text-gray-200", children: "Tags" }),
                      /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { className: "flex flex-wrap gap-2 mt-2", children: moment.tags && moment.tags.map((tag) => /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("span", { className: "px-3 py-1 bg-blue-100 dark:bg-blue-900/40 text-blue-700 dark:text-blue-300 text-sm font-medium rounded-full", children: [
                        "#",
                        tag
                      ] }, tag)) })
                    ] })
                  ] })
                ]
              }
            )
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
        EditMomentScreen_default,
        {
          isOpen: isEditOpen,
          onClose: () => setIsEditOpen(false),
          moment,
          onSaveMoment: handleSaveEdit
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
        ConfirmationModal_default,
        {
          isOpen: isDeleteConfirmOpen,
          onClose: () => setIsDeleteConfirmOpen(false),
          onConfirm: handleConfirmDelete,
          title: "Delete Moment?",
          message: "Are you sure you want to permanently delete this moment? This action cannot be undone.",
          confirmText: "Delete"
        }
      )
    ] });
  };
  var MomentDetailScreen_default = MomentDetailScreen;

  // screens/ProfileScreen.tsx
  var import_react33 = __toESM(require_react());
  var import_jsx_runtime48 = __toESM(require_jsx_runtime());
  function dataURLtoBlob(dataurl) {
    const arr = dataurl.split(",");
    const mimeMatch = arr[0].match(/:(.*?);/);
    if (!mimeMatch) throw new Error("Invalid data URL");
    const mime = mimeMatch[1];
    const bstr = atob(arr[1]);
    let n = bstr.length;
    const u8arr = new Uint8Array(n);
    while (n--) {
      u8arr[n] = bstr.charCodeAt(n);
    }
    return new Blob([u8arr], { type: mime });
  }
  var resizeImage = (file, maxWidth, maxHeight, quality) => {
    return new Promise((resolve2, reject) => {
      const reader = new FileReader();
      reader.onload = (event) => {
        const img = new Image();
        img.onload = () => {
          let width = img.width;
          let height = img.height;
          if (width > height) {
            if (width > maxWidth) {
              height = Math.round(height * maxWidth / width);
              width = maxWidth;
            }
          } else {
            if (height > maxHeight) {
              width = Math.round(width * maxHeight / height);
              height = maxHeight;
            }
          }
          const canvas = document.createElement("canvas");
          canvas.width = width;
          canvas.height = height;
          const ctx = canvas.getContext("2d");
          if (!ctx) {
            return reject(new Error("Could not get canvas context"));
          }
          ctx.drawImage(img, 0, 0, width, height);
          resolve2(canvas.toDataURL("image/jpeg", quality));
        };
        img.onerror = reject;
        const result = event.target?.result;
        if (typeof result === "string") {
          img.src = result;
        } else {
          reject(new Error("FileReader result is not a string"));
        }
      };
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  };
  var ProfileScreen = () => {
    const navigate = useNavigate();
    const { profile, setProfile, tasks: allTasks, moments: momentsData, logout, user, focusHistory } = useData();
    const fileInputRef = (0, import_react33.useRef)(null);
    const tasksCompleted = (0, import_react33.useMemo)(() => {
      return allTasks.filter((task) => task.completed).length;
    }, [allTasks]);
    const momentsCreated = (0, import_react33.useMemo)(() => {
      return momentsData.length;
    }, [momentsData]);
    const { totalFocusMinutes, focusStreak } = (0, import_react33.useMemo)(() => {
      if (!focusHistory || focusHistory.length === 0) {
        return { totalFocusMinutes: 0, focusStreak: 0 };
      }
      const totalMinutes = focusHistory.reduce((sum, session) => sum + (session.duration || 0), 0);
      const uniqueDates = [...new Set(focusHistory.map((s) => s.session_date))].sort().reverse();
      if (uniqueDates.length === 0) {
        return { totalFocusMinutes: totalMinutes, focusStreak: 0 };
      }
      let streak = 0;
      const today = /* @__PURE__ */ new Date();
      const todayStr = today.toISOString().split("T")[0];
      const mostRecentDate = /* @__PURE__ */ new Date(uniqueDates[0] + "T00:00:00");
      const todayDate = /* @__PURE__ */ new Date(todayStr + "T00:00:00");
      const diffDays = Math.round((todayDate.getTime() - mostRecentDate.getTime()) / (1e3 * 60 * 60 * 24));
      if (diffDays > 1) {
        return { totalFocusMinutes: totalMinutes, focusStreak: 0 };
      }
      streak = 1;
      for (let i = 0; i < uniqueDates.length - 1; i++) {
        const currentDate = /* @__PURE__ */ new Date(uniqueDates[i] + "T00:00:00");
        const prevDate = /* @__PURE__ */ new Date(uniqueDates[i + 1] + "T00:00:00");
        const dayDiff = Math.round((currentDate.getTime() - prevDate.getTime()) / (1e3 * 60 * 60 * 24));
        if (dayDiff === 1) {
          streak++;
        } else {
          break;
        }
      }
      return { totalFocusMinutes: totalMinutes, focusStreak: streak };
    }, [focusHistory]);
    const totalFocusTime = (0, import_react33.useMemo)(() => {
      if (totalFocusMinutes < 60) {
        return `${totalFocusMinutes} min`;
      }
      const hours = Math.floor(totalFocusMinutes / 60);
      const minutes = totalFocusMinutes % 60;
      return `${hours}h ${minutes}m`;
    }, [totalFocusMinutes]);
    const handleAvatarClick = () => {
      fileInputRef.current?.click();
    };
    const handleAvatarChange = async (e) => {
      const file = e.target.files?.[0];
      if (!file || !user || !profile) return;
      try {
        const resizedDataUrl = await resizeImage(file, 256, 256, 0.8);
        const imageBlob = dataURLtoBlob(resizedDataUrl);
        const filePath = `public/${user.id}/avatar.jpg`;
        const { error: uploadError } = await supabase.storage.from("avatars").upload(filePath, imageBlob, { upsert: true });
        if (uploadError) throw uploadError;
        const { data: { publicUrl } } = supabase.storage.from("avatars").getPublicUrl(filePath);
        if (!publicUrl) throw new Error("Could not get public URL");
        const updatedProfile = { ...profile, avatar_url: `${publicUrl}?t=${(/* @__PURE__ */ new Date()).getTime()}` };
        const { error: dbError } = await supabase.from("profiles").upsert(updatedProfile);
        if (dbError) throw dbError;
        setProfile(updatedProfile);
      } catch (error) {
        console.error("Error updating avatar:", error);
        alert("Failed to update avatar. Please try again.");
      }
    };
    const handleProfileUpdate = async () => {
      if (!profile) return;
      const { error } = await supabase.from("profiles").upsert(profile);
      if (error) {
        alert("Failed to save profile changes.");
      } else {
        alert("Profile saved!");
      }
    };
    const handleLogout = async () => {
      await logout();
      navigate("/login");
    };
    if (!profile) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(MainLayout_default, { hideNavBar: true, children: /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "absolute inset-0 flex flex-col bg-gray-50 dark:bg-gray-900", children: [
      /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)(
        "header",
        {
          className: "px-4 pt-6 pb-4 grid grid-cols-3 items-center flex-shrink-0 bg-[var(--color-surface-container)] border-b border-[var(--color-border)] sticky top-0 z-10",
          style: { paddingTop: `calc(1.5rem + env(safe-area-inset-top, 0px))` },
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("div", { className: "flex justify-start", children: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("button", { onClick: () => navigate(-1), className: "p-2 -ml-2 text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-gray-100", "aria-label": "Go back", children: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(ChevronLeftIcon, {}) }) }),
            /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("h1", { className: "text-2xl font-bold text-gray-900 dark:text-gray-100 text-center", children: "Profile" }),
            /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("div", { className: "flex justify-end", children: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("button", { onClick: handleProfileUpdate, className: "font-semibold text-blue-600 dark:text-blue-400 px-3 py-1.5 rounded-lg hover:bg-blue-50 dark:hover:bg-blue-900/30", children: "Save" }) })
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("main", { className: "flex-grow overflow-y-auto p-6 space-y-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("section", { className: "flex flex-col items-center text-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "relative", children: [
            /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
              "img",
              {
                src: profile.avatar_url,
                alt: profile.name,
                className: "w-32 h-32 rounded-full border-4 border-white dark:border-gray-800 card-shadow object-cover"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
              "input",
              {
                type: "file",
                ref: fileInputRef,
                onChange: handleAvatarChange,
                accept: "image/*",
                className: "hidden"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
              "button",
              {
                onClick: handleAvatarClick,
                className: "absolute bottom-1 right-1 w-9 h-9 bg-blue-600 text-white rounded-full flex items-center justify-center shadow-md border-2 border-white dark:border-gray-800 hover:bg-blue-700 transition-colors",
                "aria-label": "Edit avatar",
                children: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(EditIcon, {})
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("h2", { className: "text-2xl font-bold text-gray-900 dark:text-gray-100 mt-4", children: profile.name }),
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("p", { className: "text-gray-500 dark:text-gray-400", children: profile.email })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("section", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("h3", { className: "text-lg font-bold text-gray-800 dark:text-gray-200 mb-3", children: "Personal Info" }),
          /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "space-y-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("label", { htmlFor: "username", className: "block text-sm font-medium text-gray-600 dark:text-gray-400 mb-1", children: "Username" }),
              /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
                "input",
                {
                  id: "username",
                  type: "text",
                  value: profile.username,
                  onChange: (e) => setProfile((prev) => prev ? { ...prev, username: e.target.value } : null),
                  className: "w-full px-4 py-3 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900 dark:text-gray-100"
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("label", { htmlFor: "bio", className: "block text-sm font-medium text-gray-600 dark:text-gray-400 mb-1", children: "Bio" }),
              /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
                "textarea",
                {
                  id: "bio",
                  rows: 3,
                  value: profile.bio,
                  onChange: (e) => setProfile((prev) => prev ? { ...prev, bio: e.target.value } : null),
                  className: "w-full px-4 py-3 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-xl min-h-[80px] focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none text-gray-900 dark:text-gray-100"
                }
              )
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("section", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("h3", { className: "text-lg font-bold text-gray-800 dark:text-gray-200 mb-3", children: "Stats" }),
          /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-xl card-shadow p-4 text-center", children: [
              /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("p", { className: "text-3xl font-bold text-blue-600 dark:text-blue-400", children: tasksCompleted }),
              /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400 mt-1", children: "Tasks Completed" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-xl card-shadow p-4 text-center", children: [
              /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("p", { className: "text-3xl font-bold text-blue-600 dark:text-blue-400", children: momentsCreated }),
              /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400 mt-1", children: "Moments Created" })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "grid grid-cols-2 gap-4 mt-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-xl card-shadow p-4 text-center", children: [
              /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("p", { className: "text-3xl font-bold text-purple-600 dark:text-purple-400", children: totalFocusTime }),
              /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400 mt-1", children: "Total Focus Time" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "bg-white dark:bg-gray-800 rounded-xl card-shadow p-4 text-center", children: [
              /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("p", { className: "text-3xl font-bold text-purple-600 dark:text-purple-400", children: [
                focusStreak,
                " ",
                /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("span", { className: "text-lg", children: "days" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400 mt-1", children: "Focus Streak" })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("section", { className: "pb-4", children: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
          "button",
          {
            onClick: handleLogout,
            className: "w-full bg-gray-200 dark:bg-gray-700 text-red-600 dark:text-red-400 font-bold py-3 rounded-xl hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors",
            children: "Logout"
          }
        ) })
      ] })
    ] }) });
  };
  var ProfileScreen_default = ProfileScreen;

  // screens/FocusScreen.tsx
  var import_react36 = __toESM(require_react());

  // components/focus/TaskSelector.tsx
  var import_jsx_runtime49 = __toESM(require_jsx_runtime());
  var TaskSelector = ({ tasks, onSelect }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "flex flex-col items-center w-full p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("h2", { className: "text-xl font-bold text-[var(--color-text-primary)] mb-3", children: "Start a New Session" }),
      /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", { className: "w-full max-w-md", children: tasks.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", { className: "space-y-3", children: tasks.map((task) => /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)(
        "button",
        {
          onClick: () => onSelect(task),
          className: "w-full text-left bg-[var(--color-surface-container)] p-4 rounded-xl card-shadow flex justify-between items-center hover:bg-[var(--color-surface-container-low)] transition-colors animate-card-fade-in",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("p", { className: "font-semibold text-[var(--color-text-primary)]", children: task.title }),
              /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("p", { className: "text-sm text-[var(--color-text-secondary)]", children: task.category })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "px-3 py-1 bg-[var(--color-surface-container-low)] rounded-full text-sm font-medium text-[var(--color-text-secondary)]", children: [
              task.duration,
              " min"
            ] })
          ]
        },
        task.id
      )) }) : /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "text-center py-10 px-4 bg-[var(--color-surface-container)] rounded-xl card-shadow", children: [
        /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("p", { className: "font-semibold text-[var(--color-text-secondary)]", children: "No tasks to focus on." }),
        /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("p", { className: "text-sm text-[var(--color-text-tertiary)] mt-1", children: 'Add tasks to your "Today" list and set a duration for them.' })
      ] }) })
    ] });
  };
  var TaskSelector_default = TaskSelector;

  // components/focus/FocusSession.tsx
  var import_react35 = __toESM(require_react());

  // hooks/useCountdown.ts
  var import_react34 = __toESM(require_react());
  var useCountdown = ({ initialSeconds, onComplete }) => {
    const [secondsRemaining, setSecondsRemaining] = (0, import_react34.useState)(initialSeconds);
    const [isActive, setIsActive] = (0, import_react34.useState)(false);
    const timerRef = (0, import_react34.useRef)(null);
    const endTimeRef = (0, import_react34.useRef)(null);
    const animate = (0, import_react34.useCallback)((timestamp) => {
      if (endTimeRef.current === null) return;
      const remaining = endTimeRef.current - timestamp;
      if (remaining <= 0) {
        setSecondsRemaining(0);
        setIsActive(false);
        onComplete?.();
      } else {
        setSecondsRemaining(Math.ceil(remaining / 1e3));
        timerRef.current = requestAnimationFrame(animate);
      }
    }, [onComplete]);
    const start = (0, import_react34.useCallback)(() => {
      if (!isActive) {
        setIsActive(true);
        endTimeRef.current = performance.now() + secondsRemaining * 1e3;
        timerRef.current = requestAnimationFrame(animate);
      }
    }, [isActive, secondsRemaining, animate]);
    const pause = (0, import_react34.useCallback)(() => {
      if (isActive && timerRef.current) {
        setIsActive(false);
        cancelAnimationFrame(timerRef.current);
        timerRef.current = null;
        if (endTimeRef.current) {
          const timeleft = Math.round((endTimeRef.current - performance.now()) / 1e3);
          setSecondsRemaining(timeleft > 0 ? timeleft : 0);
        }
        endTimeRef.current = null;
      }
    }, [isActive]);
    const reset = (0, import_react34.useCallback)(() => {
      pause();
      setSecondsRemaining(initialSeconds);
    }, [pause, initialSeconds]);
    (0, import_react34.useEffect)(() => {
      return () => {
        if (timerRef.current) {
          cancelAnimationFrame(timerRef.current);
        }
      };
    }, []);
    (0, import_react34.useEffect)(() => {
      setSecondsRemaining(initialSeconds);
    }, [initialSeconds]);
    return { secondsRemaining, isActive, start, pause, reset };
  };
  var useCountdown_default = useCountdown;

  // components/focus/DynamicBackground.tsx
  var import_jsx_runtime50 = __toESM(require_jsx_runtime());
  var DynamicBackground = () => {
    return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("div", { className: "absolute inset-0 -z-10 animate-slow-gradient" });
  };
  var DynamicBackground_default = DynamicBackground;

  // components/focus/GrowingPlant.tsx
  var import_jsx_runtime51 = __toESM(require_jsx_runtime());
  var GrowingPlant = ({ plantType, isGrown, className }) => {
    if (!plantType) return null;
    const symbolId = `#plant-${plantType}-${isGrown ? "grown" : "seed"}`;
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("div", { className, children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
      "svg",
      {
        className: `w-full h-full object-contain ${isGrown ? "animate-plant-grow" : ""}`,
        "aria-label": isGrown ? `A grown ${plantType}` : `A ${plantType} seedling`,
        children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("use", { href: symbolId })
      }
    ) });
  };
  var GrowingPlant_default = GrowingPlant;

  // data/quotes.ts
  var quotes = [
    "The secret of getting ahead is getting started.",
    "The journey of a thousand miles begins with a single step.",
    "Focus on being productive instead of busy.",
    "The key is not to prioritize what's on your schedule, but to schedule your priorities.",
    "What you do today can improve all your tomorrows.",
    "Concentrate all your thoughts upon the work in hand. The sun's rays do not burn until brought to a focus.",
    "The successful warrior is the average man, with laser-like focus.",
    "Don't watch the clock; do what it does. Keep going."
  ];

  // components/focus/FocusSession.tsx
  var import_jsx_runtime52 = __toESM(require_jsx_runtime());
  var sounds = [
    { name: "Rain", file: "/audio/rain.mp3" },
    { name: "Forest", file: "/audio/forest.mp3" },
    { name: "Waves", file: "/audio/waves.mp3" },
    { name: "Caf\xE9", file: "/audio/cafe.mp3" }
  ];
  var PlayIcon = () => /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("svg", { className: "w-8 h-8", fill: "currentColor", viewBox: "0 0 20 20", children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("path", { d: "M6.3 2.841A1.5 1.5 0 004 4.11V15.89a1.5 1.5 0 002.3 1.269l9.344-5.89a1.5 1.5 0 000-2.538L6.3 2.84z" }) });
  var PauseIcon = () => /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("svg", { className: "w-8 h-8", fill: "currentColor", viewBox: "0 0 20 20", children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("path", { d: "M5.75 3a.75.75 0 00-.75.75v12.5c0 .414.336.75.75.75h1.5a.75.75 0 00.75-.75V3.75A.75.75 0 007.25 3h-1.5zM12.75 3a.75.75 0 00-.75.75v12.5c0 .414.336.75.75.75h1.5a.75.75 0 00.75-.75V3.75a.75.75 0 00-.75-.75h-1.5z" }) });
  var StopIcon = () => /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("svg", { className: "w-6 h-6", fill: "currentColor", viewBox: "0 0 20 20", children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("path", { d: "M5.5 5.5A.5.5 0 016 5h8a.5.5 0 01.5.5v8a.5.5 0 01-.5.5H6a.5.5 0 01-.5-.5v-8z" }) });
  var RefreshIcon = () => /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("svg", { className: "w-6 h-6", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0011.664 0l3.18-3.185m-3.181-4.995l-3.182-3.182a8.25 8.25 0 00-11.664 0l-3.18 3.185" }) });
  var FocusSession2 = ({ task, onComplete, plantType }) => {
    const initialSeconds = (task?.duration || 25) * 60;
    const { secondsRemaining, isActive, start, pause, reset } = useCountdown_default({
      initialSeconds,
      onComplete
    });
    const [quote, setQuote] = (0, import_react35.useState)(null);
    const [currentSound, setCurrentSound] = (0, import_react35.useState)(null);
    const [isSoundMenuOpen, setIsSoundMenuOpen] = (0, import_react35.useState)(false);
    const audioRef = (0, import_react35.useRef)(null);
    (0, import_react35.useEffect)(() => {
      const randomQuote = quotes[Math.floor(Math.random() * quotes.length)];
      setQuote(randomQuote);
    }, [task]);
    (0, import_react35.useEffect)(() => {
      const audioEl = audioRef.current;
      if (!audioEl) return;
      const playAudio = () => {
        audioEl.play().catch((e) => console.error("Audio play failed:", e));
      };
      audioEl.pause();
      audioEl.removeEventListener("canplay", playAudio);
      if (currentSound) {
        audioEl.src = currentSound;
        audioEl.load();
        audioEl.addEventListener("canplay", playAudio);
      } else {
        audioEl.src = "";
      }
      return () => {
        if (audioEl) {
          audioEl.removeEventListener("canplay", playAudio);
        }
      };
    }, [currentSound]);
    (0, import_react35.useEffect)(() => {
      return () => {
        const audioEl = audioRef.current;
        if (audioEl) {
          audioEl.pause();
          audioEl.src = "";
        }
      };
    }, []);
    const handleSoundSelect = (file) => {
      setCurrentSound(file);
      setIsSoundMenuOpen(false);
    };
    const minutes = Math.floor(secondsRemaining / 60);
    const seconds = secondsRemaining % 60;
    const circumference = 2 * Math.PI * 48;
    const progress = initialSeconds > 0 ? secondsRemaining / initialSeconds : 0;
    const strokeDashoffset = circumference * (1 - progress);
    return /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "flex flex-col items-center justify-center h-full text-center p-6 relative overflow-hidden", children: [
      /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(DynamicBackground_default, {}),
      /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("audio", { ref: audioRef, loop: true }),
      /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "z-10 flex flex-col justify-end min-h-[8rem]", children: [
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("p", { className: "text-xl font-medium text-[var(--color-primary-500)] mb-2", children: task ? task.title : "Break Time" }),
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: "min-h-[3rem] flex items-center justify-center", children: quote && /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: "px-6 animate-quote-fade", children: /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("p", { className: "text-lg font-medium text-[var(--color-text-secondary)] italic", children: [
          '"',
          quote,
          '"'
        ] }) }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "relative w-64 h-64 md:w-80 md:h-80 flex items-center justify-center my-4 z-10", children: [
        /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("svg", { className: "absolute w-full h-full", viewBox: "0 0 100 100", children: [
          /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("circle", { className: "text-[var(--color-border)] opacity-50", strokeWidth: "4", stroke: "currentColor", fill: "transparent", r: "48", cx: "50", cy: "50" }),
          /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
            "circle",
            {
              className: "text-[var(--color-primary-500)]",
              style: { transition: "stroke-dashoffset 1s linear" },
              strokeWidth: "4",
              strokeDasharray: circumference,
              strokeDashoffset,
              strokeLinecap: "round",
              stroke: "currentColor",
              fill: "transparent",
              r: "48",
              cx: "50",
              cy: "50",
              transform: "rotate(-90 50 50)"
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: "z-10", children: /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("h2", { className: "text-6xl md:text-7xl font-bold text-[var(--color-text-primary)] tabular-nums tracking-tighter", children: [
          String(minutes).padStart(2, "0"),
          ":",
          String(seconds).padStart(2, "0")
        ] }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "flex items-center gap-6 z-10", children: [
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Button_default, { variant: "secondary", className: "!w-auto !px-6 !py-3 disabled:opacity-50", onClick: reset, disabled: !isActive && secondsRemaining === initialSeconds, children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(RefreshIcon, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
          "button",
          {
            className: "w-20 h-20 bg-[var(--color-primary-500)] text-white rounded-full flex items-center justify-center fab-shadow transform hover:scale-105 transition-transform",
            onClick: isActive ? pause : start,
            children: isActive ? /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(PauseIcon, {}) : /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(PlayIcon, {})
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Button_default, { variant: "secondary", className: "!w-auto !px-6 !py-3", onClick: onComplete, children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(StopIcon, {}) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
        GrowingPlant_default,
        {
          plantType,
          isGrown: false,
          className: "absolute bottom-6 left-6 w-16 h-16 z-20 opacity-80"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: "absolute bottom-6 right-6 z-20", children: /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "relative", children: [
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
          "button",
          {
            onClick: () => setIsSoundMenuOpen(!isSoundMenuOpen),
            className: "p-3 bg-white/50 dark:bg-[var(--color-surface-container)]/50 backdrop-blur-sm rounded-full text-[var(--color-text-secondary)] hover:bg-white/80 dark:hover:bg-[var(--color-surface-container)]/80 transition-colors",
            "aria-haspopup": "true",
            "aria-expanded": isSoundMenuOpen,
            children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(SoundOnIcon, { className: "w-6 h-6" })
          }
        ),
        isSoundMenuOpen && /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: "absolute bottom-full right-0 mb-2 w-36 bg-white/80 dark:bg-[var(--color-surface-container)]/80 backdrop-blur-sm rounded-xl shadow-lg p-2 space-y-1 animate-page-fade-in", children: [
          sounds.map((sound) => /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
            "button",
            {
              onClick: () => handleSoundSelect(sound.file),
              className: `w-full text-left px-3 py-1.5 rounded-lg text-sm font-medium transition-colors ${currentSound === sound.file ? "bg-purple-100 dark:bg-purple-900/50 text-purple-700 dark:text-purple-300" : "text-[var(--color-text-secondary)] hover:bg-[var(--color-surface-container-low)]/50"}`,
              children: sound.name
            },
            sound.name
          )),
          /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: "border-t border-black/10 dark:border-white/20 my-1" }),
          /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
            "button",
            {
              onClick: () => handleSoundSelect(null),
              className: `w-full text-left px-3 py-1.5 rounded-lg text-sm font-medium transition-colors ${!currentSound ? "bg-[var(--color-surface-container-low)] text-[var(--color-text-primary)]" : "text-[var(--color-text-secondary)] hover:bg-[var(--color-surface-container-low)]/50"}`,
              children: "Mute"
            }
          )
        ] })
      ] }) })
    ] });
  };
  var FocusSession_default = FocusSession2;

  // components/focus/SessionComplete.tsx
  var import_jsx_runtime53 = __toESM(require_jsx_runtime());
  var SessionComplete = ({ task, plantType, onMarkComplete, onStartBreak, onNextTask, isBreak = false }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "flex flex-col items-center justify-center h-full text-center p-6 bg-[var(--color-surface-container)] animate-page-fade-in", children: [
      /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("div", { className: "w-32 h-32 mb-6", children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(GrowingPlant_default, { plantType, isGrown: true }) }),
      /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("h1", { className: "text-3xl font-bold text-[var(--color-text-primary)]", children: "Focus Complete!" }),
      /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("p", { className: "text-[var(--color-text-secondary)] mt-2", children: [
        "You focused on ",
        /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("span", { className: "font-semibold text-[var(--color-text-primary)]", children: [
          '"',
          task.title,
          '"'
        ] }),
        " for ",
        task.duration,
        " minutes."
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "w-full max-w-xs mt-10 space-y-3", children: [
        !isBreak && /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Button_default, { variant: "primary", onClick: onMarkComplete, children: "Mark as Complete" }),
        /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Button_default, { variant: "secondary", onClick: onStartBreak, children: "Start 5 min Break" }),
        /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Button_default, { variant: "secondary", onClick: onNextTask, children: "Choose Next Task" })
      ] })
    ] });
  };
  var SessionComplete_default = SessionComplete;

  // components/focus/FocusGarden.tsx
  var import_jsx_runtime54 = __toESM(require_jsx_runtime());
  var EmptyGardenIllustration = () => /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "w-24 h-24 text-[var(--color-text-tertiary)] opacity-60", children: /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
    /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("path", { d: "M16.44 8.8999C16.44 8.8999 15.34 7.2099 13.59 6.7499C11.84 6.2899 10.61 7.2899 10.15 8.1699", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("path", { d: "M12.0028 3.46997C12.0028 3.46997 12.5428 5.74997 10.1528 8.16997", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("path", { d: "M7.56002 8.16992C7.90002 7.15992 8.78002 6.00992 10.41 6.57992C12.04 7.14992 12.63 8.89992 12.63 8.89992", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("path", { d: "M12 21V9", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }),
    /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("path", { d: "M15 21H9C7.34315 21 6 19.6569 6 18V18C6 16.3431 7.34315 15 9 15H15C16.6569 15 18 16.3431 18 18V18C18 19.6569 16.6569 21 15 21Z", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" })
  ] }) });
  var FocusGarden = ({ history }) => {
    const sortedHistory = [...history].sort((a, b) => b.plant_id - a.plant_id);
    return /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "flex flex-col items-center w-full p-6", children: [
      /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("h2", { className: "text-xl font-bold text-[var(--color-text-primary)] mb-3", children: "My Focus Garden" }),
      /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "w-full max-w-md", children: sortedHistory.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "grid grid-cols-4 sm:grid-cols-5 gap-4 p-4 bg-[var(--color-surface-container)] rounded-xl card-shadow", children: sortedHistory.map((plant) => {
        const date = /* @__PURE__ */ new Date(plant.session_date + "T00:00:00");
        const formattedDate = `${date.getMonth() + 1}/${date.getDate()}`;
        return /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "flex flex-col items-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "w-12 h-12", children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(
            "svg",
            {
              className: "w-full h-full object-contain",
              "aria-label": `A grown ${plant.plant_type}`,
              children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("use", { href: `#plant-${plant.plant_type}-grown` })
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("span", { className: "text-xs text-[var(--color-text-secondary)] mt-1", children: formattedDate })
        ] }, plant.plant_id);
      }) }) : /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "flex flex-col items-center justify-center text-center py-10 px-4 bg-[var(--color-surface-container)] rounded-xl card-shadow", children: [
        /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(EmptyGardenIllustration, {}),
        /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("p", { className: "font-semibold text-[var(--color-text-secondary)] mt-2", children: "Your garden is waiting to grow." }),
        /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("p", { className: "text-sm text-[var(--color-text-tertiary)] mt-1", children: "Complete a focus session to plant your first seed." })
      ] }) })
    ] });
  };
  var FocusGarden_default = FocusGarden;

  // screens/FocusScreen.tsx
  var import_jsx_runtime55 = __toESM(require_jsx_runtime());
  var plantTypes = ["bonsai", "cactus", "fern", "orchid", "sunflower"];
  var FocusScreen = () => {
    const { tasks: allTasks, addFocusSession, updateTask, focusHistory } = useData();
    const [view, setView] = (0, import_react36.useState)("garden");
    const [sessionState, setSessionState] = (0, import_react36.useState)("selecting");
    const [selectedTask, setSelectedTask] = (0, import_react36.useState)(null);
    const [plantType, setPlantType] = (0, import_react36.useState)(null);
    const focusableTasks = (0, import_react36.useMemo)(() => {
      return allTasks.filter((task) => task.today && !task.completed && task.duration && task.duration > 0);
    }, [allTasks]);
    const startSession = (task) => {
      setSelectedTask(task);
      setPlantType(plantTypes[Math.floor(Math.random() * plantTypes.length)]);
      setSessionState("focusing");
    };
    const handleSessionComplete = () => {
      if (selectedTask && plantType && selectedTask.id !== "break") {
        const sessionData = {
          plant_id: Date.now(),
          session_date: (/* @__PURE__ */ new Date()).toISOString().split("T")[0],
          plant_type: plantType,
          duration: selectedTask.duration || 0
        };
        addFocusSession(sessionData);
      }
      setSessionState("complete");
    };
    const handleMarkComplete = () => {
      if (selectedTask && selectedTask.id !== "break") {
        updateTask(selectedTask.id, { completed: true });
      }
      resetToGarden();
    };
    const handleStartBreak = () => {
      const breakTask = {
        id: "break",
        title: "Break Time",
        duration: 5,
        category: "Rest",
        completed: false
      };
      startSession(breakTask);
    };
    const resetToSelection = () => {
      setSelectedTask(null);
      setSessionState("selecting");
    };
    const resetToGarden = () => {
      resetToSelection();
      setView("garden");
    };
    const renderSessionContent = () => {
      switch (sessionState) {
        case "selecting":
          return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(TaskSelector_default, { tasks: focusableTasks, onSelect: startSession });
        case "focusing":
          return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(FocusSession_default, { task: selectedTask, onComplete: handleSessionComplete, plantType });
        case "complete":
          if (!selectedTask) return null;
          if (selectedTask.id === "break") {
            return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(SessionComplete_default, { task: selectedTask, plantType, onMarkComplete: resetToGarden, onStartBreak: handleStartBreak, onNextTask: resetToSelection, isBreak: true });
          }
          return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(SessionComplete_default, { task: selectedTask, plantType, onMarkComplete: handleMarkComplete, onStartBreak: handleStartBreak, onNextTask: resetToSelection });
        default:
          return null;
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(MainLayout_default, { children: /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "absolute inset-0 flex flex-col bg-[var(--color-background-primary)]", children: [
      /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)(
        "header",
        {
          className: "px-4 pt-6 pb-4 flex items-center gap-2 flex-shrink-0 bg-[var(--color-surface-container)] border-b border-[var(--color-border)] sticky top-0 z-10",
          style: { paddingTop: `calc(1.5rem + env(safe-area-inset-top, 0px))` },
          children: [
            view === "new_session" && /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("button", { onClick: resetToGarden, className: "p-2 -ml-2 text-[var(--color-text-secondary)] hover:text-[var(--color-primary-500)]", children: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(ChevronLeftIcon, {}) }),
            /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("h1", { className: "text-2xl font-bold text-[var(--color-text-primary)]", children: view === "garden" ? "Focus Garden" : "New Session" })
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("main", { className: "flex-grow overflow-y-auto", children: view === "garden" ? /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)(import_jsx_runtime55.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(FocusGarden_default, { history: focusHistory }),
        /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { className: "p-6", style: { paddingBottom: `calc(6rem + env(safe-area-inset-bottom, 0px))` }, children: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("button", { onClick: () => setView("new_session"), className: "w-full bg-[var(--color-primary-500)] text-white font-bold py-3 rounded-xl fab-shadow hover:opacity-90 transition-all", children: "Start New Focus Session" }) })
      ] }) : renderSessionContent() })
    ] }) });
  };
  var FocusScreen_default = FocusScreen;

  // screens/TagDetailScreen.tsx
  var import_react37 = __toESM(require_react());
  var import_jsx_runtime56 = __toESM(require_jsx_runtime());
  var MomentCard2 = ({ id, title, imageUrl, index: index2 }) => /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(
    Link,
    {
      to: `/moments/${id}`,
      className: "relative aspect-[4/3] rounded-2xl overflow-hidden group cursor-pointer block animate-card-fade-in card-shadow",
      style: { animationDelay: `${index2 * 50}ms`, willChange: "transform, opacity" },
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("img", { src: imageUrl, alt: title, className: "w-full h-full object-cover group-hover:scale-105 transition-transform duration-300" }),
        /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "absolute inset-0 bg-gradient-to-t from-black/60 to-transparent" }),
        /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "absolute bottom-0 left-0 p-3 text-white", children: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("h3", { className: "font-bold", children: title }) })
      ]
    }
  );
  var TagDetailScreen = () => {
    const { tagName } = useParams();
    const navigate = useNavigate();
    const { moments } = useData();
    const decodedTagName = (0, import_react37.useMemo)(() => tagName ? decodeURIComponent(tagName) : "", [tagName]);
    const taggedMoments = (0, import_react37.useMemo)(() => {
      if (!decodedTagName) return [];
      return moments.filter((moment) => moment.tags?.includes(decodedTagName)).sort((a, b) => new Date(b.date || 0).getTime() - new Date(a.date || 0).getTime());
    }, [moments, decodedTagName]);
    const { totalCheckins, currentStreak, longestStreak } = (0, import_react37.useMemo)(() => {
      if (taggedMoments.length === 0) {
        return { totalCheckins: 0, currentStreak: 0, longestStreak: 0 };
      }
      const dates = taggedMoments.filter((m) => m.date).map((m) => new Date(m.date)).sort((a, b) => b.getTime() - a.getTime());
      const uniqueDays = [...new Set(dates.map((d) => d.toISOString().split("T")[0]))];
      let current = 0;
      let longest = 0;
      if (uniqueDays.length > 0) {
        const today = /* @__PURE__ */ new Date();
        today.setHours(0, 0, 0, 0);
        const mostRecent = /* @__PURE__ */ new Date(uniqueDays[0] + "T00:00:00");
        mostRecent.setHours(0, 0, 0, 0);
        const diff = (today.getTime() - mostRecent.getTime()) / (1e3 * 3600 * 24);
        if (diff <= 1) {
          current = 1;
          longest = 1;
          for (let i = 0; i < uniqueDays.length - 1; i++) {
            const d1 = /* @__PURE__ */ new Date(uniqueDays[i] + "T00:00:00");
            const d2 = /* @__PURE__ */ new Date(uniqueDays[i + 1] + "T00:00:00");
            const dayDiff = (d1.getTime() - d2.getTime()) / (1e3 * 3600 * 24);
            if (dayDiff === 1) {
              current++;
            } else {
              break;
            }
          }
          longest = current;
        }
      }
      if (uniqueDays.length > 1) {
        let tempLongest = 1;
        for (let i = 0; i < uniqueDays.length - 1; i++) {
          const d1 = /* @__PURE__ */ new Date(uniqueDays[i] + "T00:00:00");
          const d2 = /* @__PURE__ */ new Date(uniqueDays[i + 1] + "T00:00:00");
          const dayDiff = (d1.getTime() - d2.getTime()) / (1e3 * 3600 * 24);
          if (dayDiff === 1) {
            tempLongest++;
          } else {
            tempLongest = 1;
          }
          if (tempLongest > longest) longest = tempLongest;
        }
      } else if (uniqueDays.length === 1 && longest === 0) {
        longest = 1;
      }
      return {
        totalCheckins: taggedMoments.length,
        currentStreak: current,
        longestStreak: longest
      };
    }, [taggedMoments]);
    return /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(MainLayout_default, { hideNavBar: true, children: /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "absolute inset-0 flex flex-col bg-gray-50", children: [
      /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(
        "header",
        {
          className: "px-4 pt-6 pb-4 flex items-center gap-2 flex-shrink-0 bg-white border-b sticky top-0 z-10",
          style: { paddingTop: `calc(1.5rem + env(safe-area-inset-top))` },
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("button", { onClick: () => navigate(-1), className: "p-2 text-gray-600 hover:text-blue-600", children: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(ChevronLeftIcon, {}) }),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("h1", { className: "text-2xl font-bold text-gray-900", children: [
              "#",
              decodedTagName
            ] })
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("main", { className: "flex-grow overflow-y-auto px-6 pb-24", children: [
        /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "grid grid-cols-3 gap-4 my-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "bg-white p-3 rounded-xl card-shadow text-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("p", { className: "text-2xl font-bold text-purple-600", children: totalCheckins }),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("p", { className: "text-xs text-gray-500 mt-1", children: "Total Check-ins" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "bg-white p-3 rounded-xl card-shadow text-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("p", { className: "text-2xl font-bold text-purple-600", children: currentStreak }),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("p", { className: "text-xs text-gray-500 mt-1", children: "Current Streak" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)("div", { className: "bg-white p-3 rounded-xl card-shadow text-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("p", { className: "text-2xl font-bold text-purple-600", children: longestStreak }),
            /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("p", { className: "text-xs text-gray-500 mt-1", children: "Longest Streak" })
          ] })
        ] }),
        taggedMoments.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4", children: taggedMoments.map((moment, index2) => /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(MomentCard2, { id: moment.id, title: moment.title, imageUrl: moment.imageUrl, index: index2 }, moment.id)) }) : /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", { className: "text-center py-16 text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("p", { children: "No moments found for this tag yet." }) })
      ] })
    ] }) });
  };
  var TagDetailScreen_default = TagDetailScreen;

  // App.tsx
  var import_jsx_runtime57 = __toESM(require_jsx_runtime());
  var AppRoutes = () => {
    const { session, loading, syncError, theme, fontSize } = useData();
    const navigate = useNavigate();
    const location = useLocation();
    const [toast, setToast] = (0, import_react38.useState)({ show: false, message: "", isError: false });
    const backPressTimer = (0, import_react38.useRef)(null);
    const isAuthRoute = ["/login", "/signup", "/reset-password"].includes(location.pathname);
    const isOnboardingRoute = location.pathname.startsWith("/onboarding");
    (0, import_react38.useEffect)(() => {
      const root2 = window.document.documentElement;
      const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
      const applyTheme = () => {
        const isDark = theme === "Dark" || theme === "System" && mediaQuery.matches;
        root2.classList.toggle("dark", isDark);
      };
      applyTheme();
      mediaQuery.addEventListener("change", applyTheme);
      return () => mediaQuery.removeEventListener("change", applyTheme);
    }, [theme]);
    (0, import_react38.useEffect)(() => {
      const root2 = window.document.documentElement;
      root2.classList.remove("font-size-sm", "font-size-md", "font-size-lg", "font-size-xl");
      root2.classList.add(`font-size-${fontSize}`);
    }, [fontSize]);
    (0, import_react38.useEffect)(() => {
      const applyStatusBarStyling = () => {
        if (!Capacitor2.isNativePlatform()) {
          return;
        }
        const isDarkMode = theme === "Dark" || theme === "System" && window.matchMedia("(prefers-color-scheme: dark)").matches;
        StatusBar.setStyle({
          style: isDarkMode ? Style.Dark : Style.Light
        });
      };
      applyStatusBarStyling();
      if (Capacitor2.isNativePlatform()) {
        StatusBar.setOverlaysWebView({ overlay: true });
        StatusBar.setBackgroundColor({ color: "#00000000" });
      }
      const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
      mediaQuery.addEventListener("change", applyStatusBarStyling);
      return () => {
        mediaQuery.removeEventListener("change", applyStatusBarStyling);
      };
    }, [theme]);
    (0, import_react38.useEffect)(() => {
      if (!loading) {
        if (session && (isAuthRoute || isOnboardingRoute)) {
          navigate("/", { replace: true });
        } else if (!session && !isAuthRoute && !isOnboardingRoute) {
          navigate("/login", { replace: true });
        }
      }
    }, [session, loading, isAuthRoute, isOnboardingRoute, navigate]);
    (0, import_react38.useEffect)(() => {
      if (syncError) {
        setToast({ show: true, message: `Sync failed. Tap sync icon for details.`, isError: true });
      } else {
        setToast((prev) => prev.isError ? { show: false, message: "", isError: false } : prev);
      }
    }, [syncError]);
    (0, import_react38.useEffect)(() => {
      if (!Capacitor2.isNativePlatform()) return;
      let listener;
      const handleBackButton = () => {
        const exitRoutes = ["/today", "/plan", "/moments", "/settings", "/login", "/onboarding/welcome"];
        const isOnExitRoute = exitRoutes.includes(location.pathname);
        if (isOnExitRoute) {
          if (backPressTimer.current) {
            clearTimeout(backPressTimer.current);
            App.exitApp();
          } else {
            setToast({ show: true, message: "Press back again to exit", isError: false });
            backPressTimer.current = setTimeout(() => {
              setToast((prev) => {
                if (prev.message === "Press back again to exit") {
                  return { show: false, message: "", isError: false };
                }
                return prev;
              });
              backPressTimer.current = null;
            }, 2e3);
          }
        } else {
          navigate(-1);
        }
      };
      App.addListener("backButton", handleBackButton).then((handle) => {
        listener = handle;
      });
      return () => {
        if (listener) {
          listener.remove();
        }
        if (backPressTimer.current) {
          clearTimeout(backPressTimer.current);
        }
      };
    }, [location.pathname, navigate]);
    if (loading) {
      return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { className: "h-full w-full flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("svg", { className: "w-10 h-10 animate-ios-spinner text-[var(--color-text-secondary)]", viewBox: "0 0 50 50", children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("circle", { className: "animate-ios-spinner-path", cx: "25", cy: "25", r: "20", fill: "none", stroke: "currentColor", strokeWidth: "4" }) }) });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)(import_jsx_runtime57.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)(Routes, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Route, { path: "/", element: session ? /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Navigate, { to: "/today" }) : /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Navigate, { to: "/onboarding/welcome" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Route, { path: "/login", element: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(LoginScreen_default, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Route, { path: "/signup", element: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(SignUpScreen_default, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Route, { path: "/reset-password", element: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(ResetPasswordScreen_default, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Route, { path: "/onboarding/welcome", element: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(OnboardingWelcomeScreen_default, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Route, { path: "/onboarding/sync", element: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(OnboardingSyncScreen_default, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Route, { path: "/onboarding/organize", element: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(OnboardingOrganizeScreen_default, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Route, { path: "/onboarding/journal", element: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(OnboardingJournalScreen_default, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Route, { path: "/onboarding/permissions", element: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(OnboardingPermissionsScreen_default, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Route, { path: "/today", element: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(TodayScreen_default, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Route, { path: "/plan", element: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(PlanScreen_default, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Route, { path: "/lists/:listId", element: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(ListDetailScreen_default, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Route, { path: "/moments", element: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(MomentsScreen_default, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Route, { path: "/moments/:id", element: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(MomentDetailScreen_default, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Route, { path: "/moments/tags/:tagName", element: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(TagDetailScreen_default, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Route, { path: "/focus", element: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(FocusScreen_default, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Route, { path: "/settings", element: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(SettingsScreen_default, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Route, { path: "/settings/notifications", element: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(NotificationSettingsScreen_default, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Route, { path: "/settings/data", element: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(DataManagementScreen_default, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Route, { path: "/settings/about", element: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(AboutHelpScreen_default, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Route, { path: "/settings/theme", element: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(ThemeSettingsScreen_default, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Route, { path: "/profile", element: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(ProfileScreen_default, {}) })
      ] }),
      toast.show && /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
        "div",
        {
          className: `fixed left-1/2 -translate-x-1/2 text-white text-sm py-2 px-4 rounded-full animate-page-fade-in z-[100] ${toast.isError ? "bg-red-600 bg-opacity-90" : "bg-gray-900 bg-opacity-80"}`,
          style: { bottom: `calc(6rem + env(safe-area-inset-bottom, 0px))` },
          children: toast.message
        }
      )
    ] });
  };
  var App2 = () => {
    return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(HashRouter, { children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(DataProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(AppRoutes, {}) }) });
  };
  var App_default = App2;

  // index.tsx
  var import_jsx_runtime58 = __toESM(require_jsx_runtime());
  var rootElement = document.getElementById("root");
  if (!rootElement) {
    throw new Error("Could not find root element to mount to");
  }
  var root = import_client.default.createRoot(rootElement);
  root.render(
    /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(import_react39.default.StrictMode, { children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(App_default, {}) })
  );
  if (window.defineCustomElements) {
    window.defineCustomElements(window);
  }
})();
/*! Bundled license information:

react/cjs/react.production.min.js:
  (**
   * @license React
   * react.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.production.min.js:
  (**
   * @license React
   * scheduler.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.production.min.js:
  (**
   * @license React
   * react-dom.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@capacitor/core/dist/index.js:
  (*! Capacitor: https://capacitorjs.com/ - MIT License *)

react/cjs/react-jsx-runtime.production.min.js:
  (**
   * @license React
   * react-jsx-runtime.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@remix-run/router/dist/router.js:
  (**
   * @remix-run/router v1.23.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router/dist/index.js:
  (**
   * React Router v6.30.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router-dom/dist/index.js:
  (**
   * React Router DOM v6.30.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)
*/
